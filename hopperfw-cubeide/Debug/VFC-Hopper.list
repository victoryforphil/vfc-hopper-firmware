
VFC-Hopper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  0800a148  0800a148  0001a148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3ac  0800a3ac  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3ac  0800a3ac  0001a3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3b4  0800a3b4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3b4  0800a3b4  0001a3b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3b8  0800a3b8  0001a3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800a3bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005744  20000088  0800a440  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200057cc  0800a440  000257cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000227f4  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f51  00000000  00000000  000428a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b48  00000000  00000000  00046800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001978  00000000  00000000  00048348  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000248f4  00000000  00000000  00049cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016468  00000000  00000000  0006e5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dcccf  00000000  00000000  00084a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001616eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007680  00000000  00000000  00161768  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a130 	.word	0x0800a130

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800a130 	.word	0x0800a130

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20005720 	.word	0x20005720

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b972 	b.w	800061c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9e08      	ldr	r6, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	4688      	mov	r8, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14b      	bne.n	80003f6 <__udivmoddi4+0xa6>
 800035e:	428a      	cmp	r2, r1
 8000360:	4615      	mov	r5, r2
 8000362:	d967      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0720 	rsb	r7, r2, #32
 800036e:	fa01 f302 	lsl.w	r3, r1, r2
 8000372:	fa20 f707 	lsr.w	r7, r0, r7
 8000376:	4095      	lsls	r5, r2
 8000378:	ea47 0803 	orr.w	r8, r7, r3
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbb8 f7fe 	udiv	r7, r8, lr
 8000388:	fa1f fc85 	uxth.w	ip, r5
 800038c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000390:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000394:	fb07 f10c 	mul.w	r1, r7, ip
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18eb      	adds	r3, r5, r3
 800039e:	f107 30ff 	add.w	r0, r7, #4294967295
 80003a2:	f080 811b 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8118 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003ac:	3f02      	subs	r7, #2
 80003ae:	442b      	add	r3, r5
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003c4:	45a4      	cmp	ip, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	192c      	adds	r4, r5, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8107 	bcs.w	80005e0 <__udivmoddi4+0x290>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	f240 8104 	bls.w	80005e0 <__udivmoddi4+0x290>
 80003d8:	3802      	subs	r0, #2
 80003da:	442c      	add	r4, r5
 80003dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003e0:	eba4 040c 	sub.w	r4, r4, ip
 80003e4:	2700      	movs	r7, #0
 80003e6:	b11e      	cbz	r6, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c6 4300 	strd	r4, r3, [r6]
 80003f0:	4639      	mov	r1, r7
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0xbe>
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	f000 80eb 	beq.w	80005d6 <__udivmoddi4+0x286>
 8000400:	2700      	movs	r7, #0
 8000402:	e9c6 0100 	strd	r0, r1, [r6]
 8000406:	4638      	mov	r0, r7
 8000408:	4639      	mov	r1, r7
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f783 	clz	r7, r3
 8000412:	2f00      	cmp	r7, #0
 8000414:	d147      	bne.n	80004a6 <__udivmoddi4+0x156>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0xd0>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80fa 	bhi.w	8000614 <__udivmoddi4+0x2c4>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0303 	sbc.w	r3, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	4698      	mov	r8, r3
 800042a:	2e00      	cmp	r6, #0
 800042c:	d0e0      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800042e:	e9c6 4800 	strd	r4, r8, [r6]
 8000432:	e7dd      	b.n	80003f0 <__udivmoddi4+0xa0>
 8000434:	b902      	cbnz	r2, 8000438 <__udivmoddi4+0xe8>
 8000436:	deff      	udf	#255	; 0xff
 8000438:	fab2 f282 	clz	r2, r2
 800043c:	2a00      	cmp	r2, #0
 800043e:	f040 808f 	bne.w	8000560 <__udivmoddi4+0x210>
 8000442:	1b49      	subs	r1, r1, r5
 8000444:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000448:	fa1f f885 	uxth.w	r8, r5
 800044c:	2701      	movs	r7, #1
 800044e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000452:	0c23      	lsrs	r3, r4, #16
 8000454:	fb0e 111c 	mls	r1, lr, ip, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb08 f10c 	mul.w	r1, r8, ip
 8000460:	4299      	cmp	r1, r3
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x124>
 8000464:	18eb      	adds	r3, r5, r3
 8000466:	f10c 30ff 	add.w	r0, ip, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x122>
 800046c:	4299      	cmp	r1, r3
 800046e:	f200 80cd 	bhi.w	800060c <__udivmoddi4+0x2bc>
 8000472:	4684      	mov	ip, r0
 8000474:	1a59      	subs	r1, r3, r1
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb1 f0fe 	udiv	r0, r1, lr
 800047c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000480:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000484:	fb08 f800 	mul.w	r8, r8, r0
 8000488:	45a0      	cmp	r8, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x14c>
 800048c:	192c      	adds	r4, r5, r4
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x14a>
 8000494:	45a0      	cmp	r8, r4
 8000496:	f200 80b6 	bhi.w	8000606 <__udivmoddi4+0x2b6>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 0408 	sub.w	r4, r4, r8
 80004a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004a4:	e79f      	b.n	80003e6 <__udivmoddi4+0x96>
 80004a6:	f1c7 0c20 	rsb	ip, r7, #32
 80004aa:	40bb      	lsls	r3, r7
 80004ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004b4:	fa01 f407 	lsl.w	r4, r1, r7
 80004b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80004c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004c4:	4325      	orrs	r5, r4
 80004c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ca:	0c2c      	lsrs	r4, r5, #16
 80004cc:	fb08 3319 	mls	r3, r8, r9, r3
 80004d0:	fa1f fa8e 	uxth.w	sl, lr
 80004d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004d8:	fb09 f40a 	mul.w	r4, r9, sl
 80004dc:	429c      	cmp	r4, r3
 80004de:	fa02 f207 	lsl.w	r2, r2, r7
 80004e2:	fa00 f107 	lsl.w	r1, r0, r7
 80004e6:	d90b      	bls.n	8000500 <__udivmoddi4+0x1b0>
 80004e8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f0:	f080 8087 	bcs.w	8000602 <__udivmoddi4+0x2b2>
 80004f4:	429c      	cmp	r4, r3
 80004f6:	f240 8084 	bls.w	8000602 <__udivmoddi4+0x2b2>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4473      	add	r3, lr
 8000500:	1b1b      	subs	r3, r3, r4
 8000502:	b2ad      	uxth	r5, r5
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3310 	mls	r3, r8, r0, r3
 800050c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000510:	fb00 fa0a 	mul.w	sl, r0, sl
 8000514:	45a2      	cmp	sl, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x1da>
 8000518:	eb1e 0404 	adds.w	r4, lr, r4
 800051c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000520:	d26b      	bcs.n	80005fa <__udivmoddi4+0x2aa>
 8000522:	45a2      	cmp	sl, r4
 8000524:	d969      	bls.n	80005fa <__udivmoddi4+0x2aa>
 8000526:	3802      	subs	r0, #2
 8000528:	4474      	add	r4, lr
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	fba0 8902 	umull	r8, r9, r0, r2
 8000532:	eba4 040a 	sub.w	r4, r4, sl
 8000536:	454c      	cmp	r4, r9
 8000538:	46c2      	mov	sl, r8
 800053a:	464b      	mov	r3, r9
 800053c:	d354      	bcc.n	80005e8 <__udivmoddi4+0x298>
 800053e:	d051      	beq.n	80005e4 <__udivmoddi4+0x294>
 8000540:	2e00      	cmp	r6, #0
 8000542:	d069      	beq.n	8000618 <__udivmoddi4+0x2c8>
 8000544:	ebb1 050a 	subs.w	r5, r1, sl
 8000548:	eb64 0403 	sbc.w	r4, r4, r3
 800054c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000550:	40fd      	lsrs	r5, r7
 8000552:	40fc      	lsrs	r4, r7
 8000554:	ea4c 0505 	orr.w	r5, ip, r5
 8000558:	e9c6 5400 	strd	r5, r4, [r6]
 800055c:	2700      	movs	r7, #0
 800055e:	e747      	b.n	80003f0 <__udivmoddi4+0xa0>
 8000560:	f1c2 0320 	rsb	r3, r2, #32
 8000564:	fa20 f703 	lsr.w	r7, r0, r3
 8000568:	4095      	lsls	r5, r2
 800056a:	fa01 f002 	lsl.w	r0, r1, r2
 800056e:	fa21 f303 	lsr.w	r3, r1, r3
 8000572:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000576:	4338      	orrs	r0, r7
 8000578:	0c01      	lsrs	r1, r0, #16
 800057a:	fbb3 f7fe 	udiv	r7, r3, lr
 800057e:	fa1f f885 	uxth.w	r8, r5
 8000582:	fb0e 3317 	mls	r3, lr, r7, r3
 8000586:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058a:	fb07 f308 	mul.w	r3, r7, r8
 800058e:	428b      	cmp	r3, r1
 8000590:	fa04 f402 	lsl.w	r4, r4, r2
 8000594:	d907      	bls.n	80005a6 <__udivmoddi4+0x256>
 8000596:	1869      	adds	r1, r5, r1
 8000598:	f107 3cff 	add.w	ip, r7, #4294967295
 800059c:	d22f      	bcs.n	80005fe <__udivmoddi4+0x2ae>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d92d      	bls.n	80005fe <__udivmoddi4+0x2ae>
 80005a2:	3f02      	subs	r7, #2
 80005a4:	4429      	add	r1, r5
 80005a6:	1acb      	subs	r3, r1, r3
 80005a8:	b281      	uxth	r1, r0
 80005aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80005ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80005b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b6:	fb00 f308 	mul.w	r3, r0, r8
 80005ba:	428b      	cmp	r3, r1
 80005bc:	d907      	bls.n	80005ce <__udivmoddi4+0x27e>
 80005be:	1869      	adds	r1, r5, r1
 80005c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005c4:	d217      	bcs.n	80005f6 <__udivmoddi4+0x2a6>
 80005c6:	428b      	cmp	r3, r1
 80005c8:	d915      	bls.n	80005f6 <__udivmoddi4+0x2a6>
 80005ca:	3802      	subs	r0, #2
 80005cc:	4429      	add	r1, r5
 80005ce:	1ac9      	subs	r1, r1, r3
 80005d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005d4:	e73b      	b.n	800044e <__udivmoddi4+0xfe>
 80005d6:	4637      	mov	r7, r6
 80005d8:	4630      	mov	r0, r6
 80005da:	e709      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005dc:	4607      	mov	r7, r0
 80005de:	e6e7      	b.n	80003b0 <__udivmoddi4+0x60>
 80005e0:	4618      	mov	r0, r3
 80005e2:	e6fb      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e4:	4541      	cmp	r1, r8
 80005e6:	d2ab      	bcs.n	8000540 <__udivmoddi4+0x1f0>
 80005e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ec:	eb69 020e 	sbc.w	r2, r9, lr
 80005f0:	3801      	subs	r0, #1
 80005f2:	4613      	mov	r3, r2
 80005f4:	e7a4      	b.n	8000540 <__udivmoddi4+0x1f0>
 80005f6:	4660      	mov	r0, ip
 80005f8:	e7e9      	b.n	80005ce <__udivmoddi4+0x27e>
 80005fa:	4618      	mov	r0, r3
 80005fc:	e795      	b.n	800052a <__udivmoddi4+0x1da>
 80005fe:	4667      	mov	r7, ip
 8000600:	e7d1      	b.n	80005a6 <__udivmoddi4+0x256>
 8000602:	4681      	mov	r9, r0
 8000604:	e77c      	b.n	8000500 <__udivmoddi4+0x1b0>
 8000606:	3802      	subs	r0, #2
 8000608:	442c      	add	r4, r5
 800060a:	e747      	b.n	800049c <__udivmoddi4+0x14c>
 800060c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000610:	442b      	add	r3, r5
 8000612:	e72f      	b.n	8000474 <__udivmoddi4+0x124>
 8000614:	4638      	mov	r0, r7
 8000616:	e708      	b.n	800042a <__udivmoddi4+0xda>
 8000618:	4637      	mov	r7, r6
 800061a:	e6e9      	b.n	80003f0 <__udivmoddi4+0xa0>

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0

}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0
return 0;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fea8 	bl	8001398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f878 	bl	800073c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SEGGER_SYSVIEW_Conf();
 800064c:	f008 fff0 	bl	8009630 <SEGGER_SYSVIEW_Conf>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000650:	f000 fa2e 	bl	8000ab0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000654:	f000 fa04 	bl	8000a60 <MX_DMA_Init>
  MX_TIM1_Init();
 8000658:	f000 f906 	bl	8000868 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800065c:	f000 f9d6 	bl	8000a0c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000660:	f000 f9aa 	bl	80009b8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000664:	f000 f8d2 	bl	800080c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000668:	2100      	movs	r1, #0
 800066a:	4825      	ldr	r0, [pc, #148]	; (8000700 <main+0xc0>)
 800066c:	f002 fffc 	bl	8003668 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000670:	2104      	movs	r1, #4
 8000672:	4823      	ldr	r0, [pc, #140]	; (8000700 <main+0xc0>)
 8000674:	f002 fff8 	bl	8003668 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000678:	2108      	movs	r1, #8
 800067a:	4821      	ldr	r0, [pc, #132]	; (8000700 <main+0xc0>)
 800067c:	f002 fff4 	bl	8003668 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000680:	210c      	movs	r1, #12
 8000682:	481f      	ldr	r0, [pc, #124]	; (8000700 <main+0xc0>)
 8000684:	f002 fff0 	bl	8003668 <HAL_TIM_PWM_Start>
 // UART2_Read();

  __HAL_UART_ENABLE_IT(&huart2,UART_IT_IDLE);
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <main+0xc4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	68da      	ldr	r2, [r3, #12]
 800068e:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <main+0xc4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f042 0210 	orr.w	r2, r2, #16
 8000696:	60da      	str	r2, [r3, #12]

  HAL_UART_Receive_DMA(&huart2, uart2Buffer, UART2_BUFFER_SIZE);
 8000698:	2280      	movs	r2, #128	; 0x80
 800069a:	491b      	ldr	r1, [pc, #108]	; (8000708 <main+0xc8>)
 800069c:	4819      	ldr	r0, [pc, #100]	; (8000704 <main+0xc4>)
 800069e:	f003 fe55 	bl	800434c <HAL_UART_Receive_DMA>

  MTR_Init(&htim1, &semPWMPendingHandle);
 80006a2:	491a      	ldr	r1, [pc, #104]	; (800070c <main+0xcc>)
 80006a4:	4816      	ldr	r0, [pc, #88]	; (8000700 <main+0xc0>)
 80006a6:	f000 fae9 	bl	8000c7c <MTR_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006aa:	f004 fb7b 	bl	8004da4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutexPX4 */
  mutexPX4Handle = osMutexNew(&mutexPX4_attributes);
 80006ae:	4818      	ldr	r0, [pc, #96]	; (8000710 <main+0xd0>)
 80006b0:	f004 fcb6 	bl	8005020 <osMutexNew>
 80006b4:	4602      	mov	r2, r0
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <main+0xd4>)
 80006b8:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semPWMPending */
  semPWMPendingHandle = osSemaphoreNew(1, 1, &semPWMPending_attributes);
 80006ba:	4a17      	ldr	r2, [pc, #92]	; (8000718 <main+0xd8>)
 80006bc:	2101      	movs	r1, #1
 80006be:	2001      	movs	r0, #1
 80006c0:	f004 fd48 	bl	8005154 <osSemaphoreNew>
 80006c4:	4602      	mov	r2, r0
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <main+0xcc>)
 80006c8:	601a      	str	r2, [r3, #0]

  /* creation of semUART2Data */
  semUART2DataHandle = osSemaphoreNew(1, 1, &semUART2Data_attributes);
 80006ca:	4a14      	ldr	r2, [pc, #80]	; (800071c <main+0xdc>)
 80006cc:	2101      	movs	r1, #1
 80006ce:	2001      	movs	r0, #1
 80006d0:	f004 fd40 	bl	8005154 <osSemaphoreNew>
 80006d4:	4602      	mov	r2, r0
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <main+0xe0>)
 80006d8:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006da:	4a12      	ldr	r2, [pc, #72]	; (8000724 <main+0xe4>)
 80006dc:	2100      	movs	r1, #0
 80006de:	4812      	ldr	r0, [pc, #72]	; (8000728 <main+0xe8>)
 80006e0:	f004 fbca 	bl	8004e78 <osThreadNew>
 80006e4:	4602      	mov	r2, r0
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <main+0xec>)
 80006e8:	601a      	str	r2, [r3, #0]

  /* creation of task_UpdatePWM */
  task_UpdatePWMHandle = osThreadNew(MTR_TaskUpdate, NULL, &task_UpdatePWM_attributes);
 80006ea:	4a11      	ldr	r2, [pc, #68]	; (8000730 <main+0xf0>)
 80006ec:	2100      	movs	r1, #0
 80006ee:	4811      	ldr	r0, [pc, #68]	; (8000734 <main+0xf4>)
 80006f0:	f004 fbc2 	bl	8004e78 <osThreadNew>
 80006f4:	4602      	mov	r2, r0
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <main+0xf8>)
 80006f8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006fa:	f004 fb87 	bl	8004e0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <main+0xbe>
 8000700:	200055b8 	.word	0x200055b8
 8000704:	20005658 	.word	0x20005658
 8000708:	200000a4 	.word	0x200000a4
 800070c:	200055b4 	.word	0x200055b4
 8000710:	0800a314 	.word	0x0800a314
 8000714:	20005570 	.word	0x20005570
 8000718:	0800a324 	.word	0x0800a324
 800071c:	0800a334 	.word	0x0800a334
 8000720:	20005510 	.word	0x20005510
 8000724:	0800a2cc 	.word	0x0800a2cc
 8000728:	08000b9d 	.word	0x08000b9d
 800072c:	200054ac 	.word	0x200054ac
 8000730:	0800a2f0 	.word	0x0800a2f0
 8000734:	08000cf5 	.word	0x08000cf5
 8000738:	20005568 	.word	0x20005568

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	; 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	2230      	movs	r2, #48	; 0x30
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f009 f905 	bl	800995a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <SystemClock_Config+0xc8>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	4a26      	ldr	r2, [pc, #152]	; (8000804 <SystemClock_Config+0xc8>)
 800076a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076e:	6413      	str	r3, [r2, #64]	; 0x40
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <SystemClock_Config+0xc8>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	4b21      	ldr	r3, [pc, #132]	; (8000808 <SystemClock_Config+0xcc>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a20      	ldr	r2, [pc, #128]	; (8000808 <SystemClock_Config+0xcc>)
 8000786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <SystemClock_Config+0xcc>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000798:	2302      	movs	r3, #2
 800079a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	2301      	movs	r3, #1
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a0:	2310      	movs	r3, #16
 80007a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a4:	2302      	movs	r3, #2
 80007a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a8:	2300      	movs	r3, #0
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007ac:	2310      	movs	r3, #16
 80007ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007b0:	23c0      	movs	r3, #192	; 0xc0
 80007b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b8:	2304      	movs	r3, #4
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 0320 	add.w	r3, r7, #32
 80007c0:	4618      	mov	r0, r3
 80007c2:	f002 fa5f 	bl	8002c84 <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007cc:	f000 fa51 	bl	8000c72 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80007d8:	2390      	movs	r3, #144	; 0x90
 80007da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 fcba 	bl	8003164 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80007f6:	f000 fa3c 	bl	8000c72 <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3750      	adds	r7, #80	; 0x50
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_I2C1_Init+0x50>)
 8000812:	4a13      	ldr	r2, [pc, #76]	; (8000860 <MX_I2C1_Init+0x54>)
 8000814:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_I2C1_Init+0x50>)
 8000818:	4a12      	ldr	r2, [pc, #72]	; (8000864 <MX_I2C1_Init+0x58>)
 800081a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_I2C1_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_I2C1_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_I2C1_Init+0x50>)
 800082a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800082e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <MX_I2C1_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_I2C1_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <MX_I2C1_Init+0x50>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_I2C1_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_I2C1_Init+0x50>)
 800084a:	f001 fbff 	bl	800204c <HAL_I2C_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000854:	f000 fa0d 	bl	8000c72 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20005514 	.word	0x20005514
 8000860:	40005400 	.word	0x40005400
 8000864:	000186a0 	.word	0x000186a0

08000868 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b092      	sub	sp, #72	; 0x48
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
 8000888:	615a      	str	r2, [r3, #20]
 800088a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2220      	movs	r2, #32
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f009 f861 	bl	800995a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000898:	4b45      	ldr	r3, [pc, #276]	; (80009b0 <MX_TIM1_Init+0x148>)
 800089a:	4a46      	ldr	r2, [pc, #280]	; (80009b4 <MX_TIM1_Init+0x14c>)
 800089c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 800089e:	4b44      	ldr	r3, [pc, #272]	; (80009b0 <MX_TIM1_Init+0x148>)
 80008a0:	22ef      	movs	r2, #239	; 0xef
 80008a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80008a4:	4b42      	ldr	r3, [pc, #264]	; (80009b0 <MX_TIM1_Init+0x148>)
 80008a6:	2220      	movs	r2, #32
 80008a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 80008aa:	4b41      	ldr	r3, [pc, #260]	; (80009b0 <MX_TIM1_Init+0x148>)
 80008ac:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80008b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b2:	4b3f      	ldr	r3, [pc, #252]	; (80009b0 <MX_TIM1_Init+0x148>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008b8:	4b3d      	ldr	r3, [pc, #244]	; (80009b0 <MX_TIM1_Init+0x148>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008be:	4b3c      	ldr	r3, [pc, #240]	; (80009b0 <MX_TIM1_Init+0x148>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008c4:	483a      	ldr	r0, [pc, #232]	; (80009b0 <MX_TIM1_Init+0x148>)
 80008c6:	f002 fea4 	bl	8003612 <HAL_TIM_PWM_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80008d0:	f000 f9cf 	bl	8000c72 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d4:	2300      	movs	r3, #0
 80008d6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008e0:	4619      	mov	r1, r3
 80008e2:	4833      	ldr	r0, [pc, #204]	; (80009b0 <MX_TIM1_Init+0x148>)
 80008e4:	f003 fb6a 	bl	8003fbc <HAL_TIMEx_MasterConfigSynchronization>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80008ee:	f000 f9c0 	bl	8000c72 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f2:	2360      	movs	r3, #96	; 0x60
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1005;
 80008f6:	f240 33ed 	movw	r3, #1005	; 0x3ed
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000900:	2300      	movs	r3, #0
 8000902:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000908:	2300      	movs	r3, #0
 800090a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800090c:	2300      	movs	r3, #0
 800090e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000914:	2200      	movs	r2, #0
 8000916:	4619      	mov	r1, r3
 8000918:	4825      	ldr	r0, [pc, #148]	; (80009b0 <MX_TIM1_Init+0x148>)
 800091a:	f002 ffeb 	bl	80038f4 <HAL_TIM_PWM_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000924:	f000 f9a5 	bl	8000c72 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092c:	2204      	movs	r2, #4
 800092e:	4619      	mov	r1, r3
 8000930:	481f      	ldr	r0, [pc, #124]	; (80009b0 <MX_TIM1_Init+0x148>)
 8000932:	f002 ffdf 	bl	80038f4 <HAL_TIM_PWM_ConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 800093c:	f000 f999 	bl	8000c72 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000944:	2208      	movs	r2, #8
 8000946:	4619      	mov	r1, r3
 8000948:	4819      	ldr	r0, [pc, #100]	; (80009b0 <MX_TIM1_Init+0x148>)
 800094a:	f002 ffd3 	bl	80038f4 <HAL_TIM_PWM_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000954:	f000 f98d 	bl	8000c72 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095c:	220c      	movs	r2, #12
 800095e:	4619      	mov	r1, r3
 8000960:	4813      	ldr	r0, [pc, #76]	; (80009b0 <MX_TIM1_Init+0x148>)
 8000962:	f002 ffc7 	bl	80038f4 <HAL_TIM_PWM_ConfigChannel>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800096c:	f000 f981 	bl	8000c72 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000988:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	4619      	mov	r1, r3
 8000992:	4807      	ldr	r0, [pc, #28]	; (80009b0 <MX_TIM1_Init+0x148>)
 8000994:	f003 fb8e 	bl	80040b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 800099e:	f000 f968 	bl	8000c72 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009a2:	4803      	ldr	r0, [pc, #12]	; (80009b0 <MX_TIM1_Init+0x148>)
 80009a4:	f000 faec 	bl	8000f80 <HAL_TIM_MspPostInit>

}
 80009a8:	bf00      	nop
 80009aa:	3748      	adds	r7, #72	; 0x48
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200055b8 	.word	0x200055b8
 80009b4:	40010000 	.word	0x40010000

080009b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009be:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <MX_USART1_UART_Init+0x50>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009f0:	f003 fbc6 	bl	8004180 <HAL_UART_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009fa:	f000 f93a 	bl	8000c72 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20005574 	.word	0x20005574
 8000a08:	40011000 	.word	0x40011000

08000a0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <MX_USART2_UART_Init+0x50>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a44:	f003 fb9c 	bl	8004180 <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a4e:	f000 f910 	bl	8000c72 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20005658 	.word	0x20005658
 8000a5c:	40004400 	.word	0x40004400

08000a60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_DMA_Init+0x4c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <MX_DMA_Init+0x4c>)
 8000a70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <MX_DMA_Init+0x4c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2105      	movs	r1, #5
 8000a86:	200b      	movs	r0, #11
 8000a88:	f000 fd80 	bl	800158c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a8c:	200b      	movs	r0, #11
 8000a8e:	f000 fd99 	bl	80015c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2105      	movs	r1, #5
 8000a96:	2010      	movs	r0, #16
 8000a98:	f000 fd78 	bl	800158c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a9c:	2010      	movs	r0, #16
 8000a9e:	f000 fd91 	bl	80015c4 <HAL_NVIC_EnableIRQ>

}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800

08000ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_GPIO_Init+0x68>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a16      	ldr	r2, [pc, #88]	; (8000b18 <MX_GPIO_Init+0x68>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_GPIO_Init+0x68>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <MX_GPIO_Init+0x68>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <MX_GPIO_Init+0x68>)
 8000adc:	f043 0310 	orr.w	r3, r3, #16
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <MX_GPIO_Init+0x68>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0310 	and.w	r3, r3, #16
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_GPIO_Init+0x68>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <MX_GPIO_Init+0x68>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_GPIO_Init+0x68>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]

}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <UART2_Read>:

/* USER CODE BEGIN 4 */
size_t _lastUartRequest = UART2_BUFFER_SIZE;
void UART2_Read(){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0

	size_t offset = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
	uint8_t data_length  = UART2_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <UART2_Read+0x44>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8000b32:	1a9b      	subs	r3, r3, r2
 8000b34:	71fb      	strb	r3, [r7, #7]
	pxParse(uart2Buffer, data_length, &offset);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	463a      	mov	r2, r7
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4809      	ldr	r0, [pc, #36]	; (8000b64 <UART2_Read+0x48>)
 8000b3e:	f000 f907 	bl	8000d50 <pxParse>
	memset(uart2Buffer, 0,UART2_BUFFER_SIZE);
 8000b42:	2280      	movs	r2, #128	; 0x80
 8000b44:	2100      	movs	r1, #0
 8000b46:	4807      	ldr	r0, [pc, #28]	; (8000b64 <UART2_Read+0x48>)
 8000b48:	f008 ff07 	bl	800995a <memset>
	HAL_UART_Receive_DMA(&huart2, (uint8_t* )uart2Buffer, UART2_BUFFER_SIZE);
 8000b4c:	2280      	movs	r2, #128	; 0x80
 8000b4e:	4905      	ldr	r1, [pc, #20]	; (8000b64 <UART2_Read+0x48>)
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <UART2_Read+0x4c>)
 8000b52:	f003 fbfb 	bl	800434c <HAL_UART_Receive_DMA>
	//HAL_UART_Transmit(&huart1, 5, 1, 100);
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200054b0 	.word	0x200054b0
 8000b64:	200000a4 	.word	0x200000a4
 8000b68:	20005658 	.word	0x20005658

08000b6c <I2C1_Read>:

void I2C1_Read(){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af02      	add	r7, sp, #8

	HAL_StatusTypeDef state = HAL_I2C_Mem_Read_DMA(&hi2c1, 0x28 << 1, 0x00, I2C1_BUFFER_SIZE, &i2c1Buffer,I2C1_BUFFER_SIZE);
 8000b72:	236a      	movs	r3, #106	; 0x6a
 8000b74:	9301      	str	r3, [sp, #4]
 8000b76:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <I2C1_Read+0x28>)
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	236a      	movs	r3, #106	; 0x6a
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2150      	movs	r1, #80	; 0x50
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <I2C1_Read+0x2c>)
 8000b82:	f001 fb9b 	bl	80022bc <HAL_I2C_Mem_Read_DMA>
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]

}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000124 	.word	0x20000124
 8000b98:	20005514 	.word	0x20005514

08000b9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b9c:	b5b0      	push	{r4, r5, r7, lr}
 8000b9e:	ed2d 8b02 	vpush	{d8}
 8000ba2:	b0aa      	sub	sp, #168	; 0xa8
 8000ba4:	af02      	add	r7, sp, #8
 8000ba6:	6078      	str	r0, [r7, #4]
	osDelay(1000);
	MTR_UpdateState(min);
	osDelay(1000);
	 */

	uint8_t txdata[2] = {0x3D, 0x08};
 8000ba8:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <StartDefaultTask+0xa8>)
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
	//HAL_I2C_Master_Transmit(&hi2c1, 0x28<<1, txdata, sizeof(txdata), 100);
	osDelay(1000);
 8000bb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bb4:	f004 fa06 	bl	8004fc4 <osDelay>
	 // memcpy(&pitch, &i2c1Buffer[0x1E],2 );

	 // int16_t heading = 0;
	 // memcpy(&heading, &i2c1Buffer[0x1A],2 );

	  char str[] = "Height=%d, FlowX=%d, FlowY=%d, Quality=%d\n";
 8000bb8:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <StartDefaultTask+0xac>)
 8000bba:	f107 040c 	add.w	r4, r7, #12
 8000bbe:	461d      	mov	r5, r3
 8000bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bcc:	c403      	stmia	r4!, {r0, r1}
 8000bce:	8022      	strh	r2, [r4, #0]
 8000bd0:	3402      	adds	r4, #2
 8000bd2:	0c13      	lsrs	r3, r2, #16
 8000bd4:	7023      	strb	r3, [r4, #0]


	  char str2[100];

	  sprintf(str2,str,(int)(pxGetLatest()->ground_distance * 100), pxGetLatest()->flow_x, pxGetLatest()->flow_y, pxGetLatest()->quality);
 8000bd6:	f000 f8b1 	bl	8000d3c <pxGetLatest>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	edd3 7a04 	vldr	s15, [r3, #16]
 8000be0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000c4c <StartDefaultTask+0xb0>
 8000be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000be8:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8000bec:	f000 f8a6 	bl	8000d3c <pxGetLatest>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000bf6:	461d      	mov	r5, r3
 8000bf8:	f000 f8a0 	bl	8000d3c <pxGetLatest>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000c02:	461c      	mov	r4, r3
 8000c04:	f000 f89a 	bl	8000d3c <pxGetLatest>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	7e5b      	ldrb	r3, [r3, #25]
 8000c0c:	f107 010c 	add.w	r1, r7, #12
 8000c10:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000c14:	9301      	str	r3, [sp, #4]
 8000c16:	9400      	str	r4, [sp, #0]
 8000c18:	462b      	mov	r3, r5
 8000c1a:	ee18 2a10 	vmov	r2, s16
 8000c1e:	f008 fea5 	bl	800996c <siprintf>

	  HAL_UART_Transmit(&huart1, str2, strlen(str2), 100);
 8000c22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fb1c 	bl	8000264 <strlen>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000c34:	2364      	movs	r3, #100	; 0x64
 8000c36:	4806      	ldr	r0, [pc, #24]	; (8000c50 <StartDefaultTask+0xb4>)
 8000c38:	f003 faef 	bl	800421a <HAL_UART_Transmit>


	  osDelay(100);
 8000c3c:	2064      	movs	r0, #100	; 0x64
 8000c3e:	f004 f9c1 	bl	8004fc4 <osDelay>
  {
 8000c42:	e7b9      	b.n	8000bb8 <StartDefaultTask+0x1c>
 8000c44:	0800a190 	.word	0x0800a190
 8000c48:	0800a194 	.word	0x0800a194
 8000c4c:	42c80000 	.word	0x42c80000
 8000c50:	20005574 	.word	0x20005574

08000c54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c64:	d101      	bne.n	8000c6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c66:	f000 fbb9 	bl	80013dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c76:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <Error_Handler+0x6>
	...

08000c7c <MTR_Init>:

#include "motor_driver.h"

size_t _mtrValues[4] = {1000,1000,1000,1000};

void MTR_Init(TIM_HandleTypeDef *timer, osSemaphoreId_t *semaphore){
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b087      	sub	sp, #28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]


	_timer = timer;
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <MTR_Init+0x34>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6013      	str	r3, [r2, #0]
	size_t initValues[4] = {1005,1005,1005,1005};
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MTR_Init+0x38>)
 8000c8e:	f107 0408 	add.w	r4, r7, #8
 8000c92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MTR_UpdateState(initValues);
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 f80d 	bl	8000cbc <MTR_UpdateState>

	_semaphore = semaphore;
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <MTR_Init+0x3c>)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	371c      	adds	r7, #28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd90      	pop	{r4, r7, pc}
 8000cb0:	20005698 	.word	0x20005698
 8000cb4:	0800a1c0 	.word	0x0800a1c0
 8000cb8:	2000556c 	.word	0x2000556c

08000cbc <MTR_UpdateState>:

void MTR_UpdateState(size_t values[4]){
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	_mtrValues[0] = values[0];
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a09      	ldr	r2, [pc, #36]	; (8000cf0 <MTR_UpdateState+0x34>)
 8000cca:	6013      	str	r3, [r2, #0]
	_mtrValues[1] = values[1];
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <MTR_UpdateState+0x34>)
 8000cd2:	6053      	str	r3, [r2, #4]
	_mtrValues[2] = values[2];
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <MTR_UpdateState+0x34>)
 8000cda:	6093      	str	r3, [r2, #8]
	_mtrValues[3] = values[3];
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	4a03      	ldr	r2, [pc, #12]	; (8000cf0 <MTR_UpdateState+0x34>)
 8000ce2:	60d3      	str	r3, [r2, #12]
	//osSemaphoreRelease(_semaphore);
	//osSemaphoreWait(semaphore_id, millisec)
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	20000000 	.word	0x20000000

08000cf4 <MTR_TaskUpdate>:


void MTR_TaskUpdate(void *argument){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	//	return;
	//}

	for(;;){
		//SEGGER_SYSVIEW_Printf("Updating PWM Values to %f", _values[0]);
		_timer->Instance->CCR1 = _mtrValues[0];
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <MTR_TaskUpdate+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <MTR_TaskUpdate+0x44>)
 8000d04:	6812      	ldr	r2, [r2, #0]
 8000d06:	635a      	str	r2, [r3, #52]	; 0x34
		_timer->Instance->CCR2 = _mtrValues[1];
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <MTR_TaskUpdate+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <MTR_TaskUpdate+0x44>)
 8000d10:	6852      	ldr	r2, [r2, #4]
 8000d12:	639a      	str	r2, [r3, #56]	; 0x38
		_timer->Instance->CCR3 = _mtrValues[2];
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <MTR_TaskUpdate+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <MTR_TaskUpdate+0x44>)
 8000d1c:	6892      	ldr	r2, [r2, #8]
 8000d1e:	63da      	str	r2, [r3, #60]	; 0x3c
		_timer->Instance->CCR4 = _mtrValues[3];
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <MTR_TaskUpdate+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <MTR_TaskUpdate+0x44>)
 8000d28:	68d2      	ldr	r2, [r2, #12]
 8000d2a:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(10);
 8000d2c:	200a      	movs	r0, #10
 8000d2e:	f004 f949 	bl	8004fc4 <osDelay>
		_timer->Instance->CCR1 = _mtrValues[0];
 8000d32:	e7e3      	b.n	8000cfc <MTR_TaskUpdate+0x8>
 8000d34:	20005698 	.word	0x20005698
 8000d38:	20000000 	.word	0x20000000

08000d3c <pxGetLatest>:
extern osMutexId_t mutexPX4Handle;
void pxReset(){

	PXNewData();
}
OpticalFlowMessage* pxGetLatest(){
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
	return &_currentFlow;
 8000d40:	4b02      	ldr	r3, [pc, #8]	; (8000d4c <pxGetLatest+0x10>)
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	20000198 	.word	0x20000198

08000d50 <pxParse>:



}

int pxParse(uint8_t* dataBuffer, size_t size , size_t* offset ){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]

	size_t startIdx=  size;
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	61fb      	str	r3, [r7, #28]
	for(size_t i =0; i<size; i++){
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
 8000d64:	e010      	b.n	8000d88 <pxParse+0x38>
		uint8_t cur = dataBuffer[i] ;
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	75fb      	strb	r3, [r7, #23]
		if(dataBuffer[i] == 0xFE){
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	4413      	add	r3, r2
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2bfe      	cmp	r3, #254	; 0xfe
 8000d7a:	d102      	bne.n	8000d82 <pxParse+0x32>
			startIdx = i;
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	61fb      	str	r3, [r7, #28]
			break;
 8000d80:	e006      	b.n	8000d90 <pxParse+0x40>
	for(size_t i =0; i<size; i++){
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	3301      	adds	r3, #1
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d3ea      	bcc.n	8000d66 <pxParse+0x16>
		}
	}

	if(startIdx >= (size - 6)){
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	3b06      	subs	r3, #6
 8000d94:	69fa      	ldr	r2, [r7, #28]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d301      	bcc.n	8000d9e <pxParse+0x4e>
		return 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e01f      	b.n	8000dde <pxParse+0x8e>
	}

	if(_currentFrame.msgid == 101){
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <pxParse+0x98>)
 8000da0:	795b      	ldrb	r3, [r3, #5]
 8000da2:	2b65      	cmp	r3, #101	; 0x65
 8000da4:	d104      	bne.n	8000db0 <pxParse+0x60>
		size_t i = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
		i++;
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	3301      	adds	r3, #1
 8000dae:	613b      	str	r3, [r7, #16]
	}

	memcpy(&_currentFrame, dataBuffer + startIdx, 6);
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	441a      	add	r2, r3
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <pxParse+0x98>)
 8000db8:	6810      	ldr	r0, [r2, #0]
 8000dba:	6018      	str	r0, [r3, #0]
 8000dbc:	8892      	ldrh	r2, [r2, #4]
 8000dbe:	809a      	strh	r2, [r3, #4]
	if(_currentFrame.msgid == 100){
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <pxParse+0x98>)
 8000dc2:	795b      	ldrb	r3, [r3, #5]
 8000dc4:	2b64      	cmp	r3, #100	; 0x64
 8000dc6:	d109      	bne.n	8000ddc <pxParse+0x8c>
		memcpy(&_currentFlow, dataBuffer + (startIdx+ 6 ), _currentFrame.len);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	3306      	adds	r3, #6
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	18d1      	adds	r1, r2, r3
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <pxParse+0x98>)
 8000dd2:	785b      	ldrb	r3, [r3, #1]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <pxParse+0x9c>)
 8000dd8:	f008 fd9b 	bl	8009912 <memcpy>
	}


	return 64;
 8000ddc:	2340      	movs	r3, #64	; 0x40
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3720      	adds	r7, #32
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000190 	.word	0x20000190
 8000dec:	20000198 	.word	0x20000198

08000df0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_MspInit+0x54>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	4a11      	ldr	r2, [pc, #68]	; (8000e44 <HAL_MspInit+0x54>)
 8000e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e04:	6453      	str	r3, [r2, #68]	; 0x44
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <HAL_MspInit+0x54>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_MspInit+0x54>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <HAL_MspInit+0x54>)
 8000e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e20:	6413      	str	r3, [r2, #64]	; 0x40
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <HAL_MspInit+0x54>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	210f      	movs	r1, #15
 8000e32:	f06f 0001 	mvn.w	r0, #1
 8000e36:	f000 fba9 	bl	800158c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800

08000e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a30      	ldr	r2, [pc, #192]	; (8000f28 <HAL_I2C_MspInit+0xe0>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d159      	bne.n	8000f1e <HAL_I2C_MspInit+0xd6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b2f      	ldr	r3, [pc, #188]	; (8000f2c <HAL_I2C_MspInit+0xe4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a2e      	ldr	r2, [pc, #184]	; (8000f2c <HAL_I2C_MspInit+0xe4>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <HAL_I2C_MspInit+0xe4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e86:	23c0      	movs	r3, #192	; 0xc0
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8a:	2312      	movs	r3, #18
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e96:	2304      	movs	r3, #4
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4823      	ldr	r0, [pc, #140]	; (8000f30 <HAL_I2C_MspInit+0xe8>)
 8000ea2:	f000 ff39 	bl	8001d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <HAL_I2C_MspInit+0xe4>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	4a1f      	ldr	r2, [pc, #124]	; (8000f2c <HAL_I2C_MspInit+0xe4>)
 8000eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <HAL_I2C_MspInit+0xe4>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <HAL_I2C_MspInit+0xec>)
 8000ec4:	4a1c      	ldr	r2, [pc, #112]	; (8000f38 <HAL_I2C_MspInit+0xf0>)
 8000ec6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <HAL_I2C_MspInit+0xec>)
 8000eca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ece:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ed0:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <HAL_I2C_MspInit+0xec>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <HAL_I2C_MspInit+0xec>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <HAL_I2C_MspInit+0xec>)
 8000ede:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ee2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <HAL_I2C_MspInit+0xec>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_I2C_MspInit+0xec>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <HAL_I2C_MspInit+0xec>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <HAL_I2C_MspInit+0xec>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000efc:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <HAL_I2C_MspInit+0xec>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000f02:	480c      	ldr	r0, [pc, #48]	; (8000f34 <HAL_I2C_MspInit+0xec>)
 8000f04:	f000 fb6c 	bl	80015e0 <HAL_DMA_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8000f0e:	f7ff feb0 	bl	8000c72 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_I2C_MspInit+0xec>)
 8000f16:	639a      	str	r2, [r3, #56]	; 0x38
 8000f18:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <HAL_I2C_MspInit+0xec>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f1e:	bf00      	nop
 8000f20:	3728      	adds	r7, #40	; 0x28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40005400 	.word	0x40005400
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020400 	.word	0x40020400
 8000f34:	200055f8 	.word	0x200055f8
 8000f38:	40026010 	.word	0x40026010

08000f3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d10d      	bne.n	8000f6a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_TIM_PWM_MspInit+0x40>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	4a09      	ldr	r2, [pc, #36]	; (8000f7c <HAL_TIM_PWM_MspInit+0x40>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5e:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <HAL_TIM_PWM_MspInit+0x40>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40010000 	.word	0x40010000
 8000f7c:	40023800 	.word	0x40023800

08000f80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <HAL_TIM_MspPostInit+0x68>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d11e      	bne.n	8000fe0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_TIM_MspPostInit+0x6c>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a10      	ldr	r2, [pc, #64]	; (8000fec <HAL_TIM_MspPostInit+0x6c>)
 8000fac:	f043 0310 	orr.w	r3, r3, #16
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_TIM_MspPostInit+0x6c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0310 	and.w	r3, r3, #16
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8000fbe:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8000fc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <HAL_TIM_MspPostInit+0x70>)
 8000fdc:	f000 fe9c 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	3720      	adds	r7, #32
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40010000 	.word	0x40010000
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	; 0x30
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a49      	ldr	r2, [pc, #292]	; (8001138 <HAL_UART_MspInit+0x144>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d12d      	bne.n	8001072 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
 800101a:	4b48      	ldr	r3, [pc, #288]	; (800113c <HAL_UART_MspInit+0x148>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	4a47      	ldr	r2, [pc, #284]	; (800113c <HAL_UART_MspInit+0x148>)
 8001020:	f043 0310 	orr.w	r3, r3, #16
 8001024:	6453      	str	r3, [r2, #68]	; 0x44
 8001026:	4b45      	ldr	r3, [pc, #276]	; (800113c <HAL_UART_MspInit+0x148>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	f003 0310 	and.w	r3, r3, #16
 800102e:	61bb      	str	r3, [r7, #24]
 8001030:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	4b41      	ldr	r3, [pc, #260]	; (800113c <HAL_UART_MspInit+0x148>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a40      	ldr	r2, [pc, #256]	; (800113c <HAL_UART_MspInit+0x148>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b3e      	ldr	r3, [pc, #248]	; (800113c <HAL_UART_MspInit+0x148>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800104e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001060:	2307      	movs	r3, #7
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4619      	mov	r1, r3
 800106a:	4835      	ldr	r0, [pc, #212]	; (8001140 <HAL_UART_MspInit+0x14c>)
 800106c:	f000 fe54 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001070:	e05e      	b.n	8001130 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a33      	ldr	r2, [pc, #204]	; (8001144 <HAL_UART_MspInit+0x150>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d159      	bne.n	8001130 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	4b2e      	ldr	r3, [pc, #184]	; (800113c <HAL_UART_MspInit+0x148>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	4a2d      	ldr	r2, [pc, #180]	; (800113c <HAL_UART_MspInit+0x148>)
 8001086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108a:	6413      	str	r3, [r2, #64]	; 0x40
 800108c:	4b2b      	ldr	r3, [pc, #172]	; (800113c <HAL_UART_MspInit+0x148>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	4b27      	ldr	r3, [pc, #156]	; (800113c <HAL_UART_MspInit+0x148>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	4a26      	ldr	r2, [pc, #152]	; (800113c <HAL_UART_MspInit+0x148>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6313      	str	r3, [r2, #48]	; 0x30
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <HAL_UART_MspInit+0x148>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010b4:	230c      	movs	r3, #12
 80010b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010c4:	2307      	movs	r3, #7
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	4619      	mov	r1, r3
 80010ce:	481c      	ldr	r0, [pc, #112]	; (8001140 <HAL_UART_MspInit+0x14c>)
 80010d0:	f000 fe22 	bl	8001d18 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <HAL_UART_MspInit+0x154>)
 80010d6:	4a1d      	ldr	r2, [pc, #116]	; (800114c <HAL_UART_MspInit+0x158>)
 80010d8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <HAL_UART_MspInit+0x154>)
 80010dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010e0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <HAL_UART_MspInit+0x154>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <HAL_UART_MspInit+0x154>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <HAL_UART_MspInit+0x154>)
 80010f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <HAL_UART_MspInit+0x154>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_UART_MspInit+0x154>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <HAL_UART_MspInit+0x154>)
 8001104:	2200      	movs	r2, #0
 8001106:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <HAL_UART_MspInit+0x154>)
 800110a:	2200      	movs	r2, #0
 800110c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <HAL_UART_MspInit+0x154>)
 8001110:	2200      	movs	r2, #0
 8001112:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001114:	480c      	ldr	r0, [pc, #48]	; (8001148 <HAL_UART_MspInit+0x154>)
 8001116:	f000 fa63 	bl	80015e0 <HAL_DMA_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8001120:	f7ff fda7 	bl	8000c72 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a08      	ldr	r2, [pc, #32]	; (8001148 <HAL_UART_MspInit+0x154>)
 8001128:	635a      	str	r2, [r3, #52]	; 0x34
 800112a:	4a07      	ldr	r2, [pc, #28]	; (8001148 <HAL_UART_MspInit+0x154>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001130:	bf00      	nop
 8001132:	3730      	adds	r7, #48	; 0x30
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40011000 	.word	0x40011000
 800113c:	40023800 	.word	0x40023800
 8001140:	40020000 	.word	0x40020000
 8001144:	40004400 	.word	0x40004400
 8001148:	200054b0 	.word	0x200054b0
 800114c:	40026088 	.word	0x40026088

08001150 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	; 0x30
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	201c      	movs	r0, #28
 8001166:	f000 fa11 	bl	800158c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800116a:	201c      	movs	r0, #28
 800116c:	f000 fa2a 	bl	80015c4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <HAL_InitTick+0xa4>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	4a1e      	ldr	r2, [pc, #120]	; (80011f4 <HAL_InitTick+0xa4>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6413      	str	r3, [r2, #64]	; 0x40
 8001180:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <HAL_InitTick+0xa4>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800118c:	f107 0210 	add.w	r2, r7, #16
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4611      	mov	r1, r2
 8001196:	4618      	mov	r0, r3
 8001198:	f002 f9b0 	bl	80034fc <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800119c:	f002 f986 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 80011a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a4:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <HAL_InitTick+0xa8>)
 80011a6:	fba2 2303 	umull	r2, r3, r2, r3
 80011aa:	0c9b      	lsrs	r3, r3, #18
 80011ac:	3b01      	subs	r3, #1
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_InitTick+0xac>)
 80011b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <HAL_InitTick+0xac>)
 80011ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011be:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80011c0:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <HAL_InitTick+0xac>)
 80011c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <HAL_InitTick+0xac>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <HAL_InitTick+0xac>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80011d2:	480a      	ldr	r0, [pc, #40]	; (80011fc <HAL_InitTick+0xac>)
 80011d4:	f002 f9c4 	bl	8003560 <HAL_TIM_Base_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d104      	bne.n	80011e8 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <HAL_InitTick+0xac>)
 80011e0:	f002 f9f3 	bl	80035ca <HAL_TIM_Base_Start_IT>
 80011e4:	4603      	mov	r3, r0
 80011e6:	e000      	b.n	80011ea <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3730      	adds	r7, #48	; 0x30
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800
 80011f8:	431bde83 	.word	0x431bde83
 80011fc:	2000569c 	.word	0x2000569c

08001200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <NMI_Handler+0x4>

08001206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <HardFault_Handler+0x4>

0800120c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <MemManage_Handler+0x4>

08001212 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <BusFault_Handler+0x4>

08001218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <UsageFault_Handler+0x4>

0800121e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
	SEGGER_SYSVIEW_RecordEnterISR();
 8001230:	f007 ff68 	bl	8009104 <SEGGER_SYSVIEW_RecordEnterISR>
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <DMA1_Stream0_IRQHandler+0x1c>)
 8001236:	f000 fafb 	bl	8001830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  I2C1_Read();
 800123a:	f7ff fc97 	bl	8000b6c <I2C1_Read>
  SEGGER_SYSVIEW_RecordExitISR();
 800123e:	f007 ffa3 	bl	8009188 <SEGGER_SYSVIEW_RecordExitISR>
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200055f8 	.word	0x200055f8

0800124c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	SEGGER_SYSVIEW_RecordEnterISR();
 8001252:	f007 ff57 	bl	8009104 <SEGGER_SYSVIEW_RecordEnterISR>
	/* USER CODE END DMA1_Stream5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001256:	480e      	ldr	r0, [pc, #56]	; (8001290 <DMA1_Stream5_IRQHandler+0x44>)
 8001258:	f000 faea 	bl	8001830 <HAL_DMA_IRQHandler>
 	/* USER CODE BEGIN DMA1_Stream5_IRQn 1 */
  	  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE) != RESET){
 800125c:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <DMA1_Stream5_IRQHandler+0x48>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0310 	and.w	r3, r3, #16
 8001266:	2b10      	cmp	r3, #16
 8001268:	d10c      	bne.n	8001284 <DMA1_Stream5_IRQHandler+0x38>
  		  __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <DMA1_Stream5_IRQHandler+0x48>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <DMA1_Stream5_IRQHandler+0x48>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	687b      	ldr	r3, [r7, #4]
  		UART2_Read();
 8001280:	f7ff fc4c 	bl	8000b1c <UART2_Read>
  	  }
  SEGGER_SYSVIEW_RecordExitISR();
 8001284:	f007 ff80 	bl	8009188 <SEGGER_SYSVIEW_RecordExitISR>
  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200054b0 	.word	0x200054b0
 8001294:	20005658 	.word	0x20005658

08001298 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <TIM2_IRQHandler+0x10>)
 800129e:	f002 fa21 	bl	80036e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000569c 	.word	0x2000569c

080012ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b4:	4a14      	ldr	r2, [pc, #80]	; (8001308 <_sbrk+0x5c>)
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <_sbrk+0x60>)
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <_sbrk+0x64>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <_sbrk+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012dc:	f008 fae0 	bl	80098a0 <__errno>
 80012e0:	4602      	mov	r2, r0
 80012e2:	230c      	movs	r3, #12
 80012e4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	e009      	b.n	8001300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <_sbrk+0x64>)
 80012fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20020000 	.word	0x20020000
 800130c:	00000400 	.word	0x00000400
 8001310:	200001b8 	.word	0x200001b8
 8001314:	200057d0 	.word	0x200057d0

08001318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <SystemInit+0x28>)
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001322:	4a07      	ldr	r2, [pc, #28]	; (8001340 <SystemInit+0x28>)
 8001324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <SystemInit+0x28>)
 800132e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001332:	609a      	str	r2, [r3, #8]
#endif
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800137c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001348:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800134a:	e003      	b.n	8001354 <LoopCopyDataInit>

0800134c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800134e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001350:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001352:	3104      	adds	r1, #4

08001354 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001354:	480b      	ldr	r0, [pc, #44]	; (8001384 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001358:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800135a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800135c:	d3f6      	bcc.n	800134c <CopyDataInit>
  ldr  r2, =_sbss
 800135e:	4a0b      	ldr	r2, [pc, #44]	; (800138c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001360:	e002      	b.n	8001368 <LoopFillZerobss>

08001362 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001362:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001364:	f842 3b04 	str.w	r3, [r2], #4

08001368 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800136a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800136c:	d3f9      	bcc.n	8001362 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800136e:	f7ff ffd3 	bl	8001318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001372:	f008 fa9b 	bl	80098ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001376:	f7ff f963 	bl	8000640 <main>
  bx  lr    
 800137a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800137c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001380:	0800a3bc 	.word	0x0800a3bc
  ldr  r0, =_sdata
 8001384:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001388:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 800138c:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8001390:	200057cc 	.word	0x200057cc

08001394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC_IRQHandler>
	...

08001398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_Init+0x40>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0d      	ldr	r2, [pc, #52]	; (80013d8 <HAL_Init+0x40>)
 80013a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_Init+0x40>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <HAL_Init+0x40>)
 80013ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <HAL_Init+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <HAL_Init+0x40>)
 80013ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c0:	2003      	movs	r0, #3
 80013c2:	f000 f8d8 	bl	8001576 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c6:	2000      	movs	r0, #0
 80013c8:	f7ff fec2 	bl	8001150 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013cc:	f7ff fd10 	bl	8000df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023c00 	.word	0x40023c00

080013dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_IncTick+0x20>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_IncTick+0x24>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <HAL_IncTick+0x24>)
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000018 	.word	0x20000018
 8001400:	200056dc 	.word	0x200056dc

08001404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return uwTick;
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <HAL_GetTick+0x14>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	200056dc 	.word	0x200056dc

0800141c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001438:	4013      	ands	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144e:	4a04      	ldr	r2, [pc, #16]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	60d3      	str	r3, [r2, #12]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <__NVIC_GetPriorityGrouping+0x18>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	0a1b      	lsrs	r3, r3, #8
 800146e:	f003 0307 	and.w	r3, r3, #7
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	2b00      	cmp	r3, #0
 8001490:	db0b      	blt.n	80014aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f003 021f 	and.w	r2, r3, #31
 8001498:	4907      	ldr	r1, [pc, #28]	; (80014b8 <__NVIC_EnableIRQ+0x38>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	095b      	lsrs	r3, r3, #5
 80014a0:	2001      	movs	r0, #1
 80014a2:	fa00 f202 	lsl.w	r2, r0, r2
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000e100 	.word	0xe000e100

080014bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	db0a      	blt.n	80014e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	490c      	ldr	r1, [pc, #48]	; (8001508 <__NVIC_SetPriority+0x4c>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	0112      	lsls	r2, r2, #4
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	440b      	add	r3, r1
 80014e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e4:	e00a      	b.n	80014fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4908      	ldr	r1, [pc, #32]	; (800150c <__NVIC_SetPriority+0x50>)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	3b04      	subs	r3, #4
 80014f4:	0112      	lsls	r2, r2, #4
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	440b      	add	r3, r1
 80014fa:	761a      	strb	r2, [r3, #24]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000e100 	.word	0xe000e100
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f1c3 0307 	rsb	r3, r3, #7
 800152a:	2b04      	cmp	r3, #4
 800152c:	bf28      	it	cs
 800152e:	2304      	movcs	r3, #4
 8001530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3304      	adds	r3, #4
 8001536:	2b06      	cmp	r3, #6
 8001538:	d902      	bls.n	8001540 <NVIC_EncodePriority+0x30>
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3b03      	subs	r3, #3
 800153e:	e000      	b.n	8001542 <NVIC_EncodePriority+0x32>
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	f04f 32ff 	mov.w	r2, #4294967295
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43da      	mvns	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	401a      	ands	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001558:	f04f 31ff 	mov.w	r1, #4294967295
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43d9      	mvns	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	4313      	orrs	r3, r2
         );
}
 800156a:	4618      	mov	r0, r3
 800156c:	3724      	adds	r7, #36	; 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ff4c 	bl	800141c <__NVIC_SetPriorityGrouping>
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800159e:	f7ff ff61 	bl	8001464 <__NVIC_GetPriorityGrouping>
 80015a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	68b9      	ldr	r1, [r7, #8]
 80015a8:	6978      	ldr	r0, [r7, #20]
 80015aa:	f7ff ffb1 	bl	8001510 <NVIC_EncodePriority>
 80015ae:	4602      	mov	r2, r0
 80015b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b4:	4611      	mov	r1, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff80 	bl	80014bc <__NVIC_SetPriority>
}
 80015bc:	bf00      	nop
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff ff54 	bl	8001480 <__NVIC_EnableIRQ>
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015ec:	f7ff ff0a 	bl	8001404 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e099      	b.n	8001730 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2202      	movs	r2, #2
 8001608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0201 	bic.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800161c:	e00f      	b.n	800163e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800161e:	f7ff fef1 	bl	8001404 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b05      	cmp	r3, #5
 800162a:	d908      	bls.n	800163e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2220      	movs	r2, #32
 8001630:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2203      	movs	r2, #3
 8001636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e078      	b.n	8001730 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1e8      	bne.n	800161e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	4b38      	ldr	r3, [pc, #224]	; (8001738 <HAL_DMA_Init+0x158>)
 8001658:	4013      	ands	r3, r2
 800165a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800166a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001676:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001682:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	4313      	orrs	r3, r2
 800168e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	2b04      	cmp	r3, #4
 8001696:	d107      	bne.n	80016a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	4313      	orrs	r3, r2
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	f023 0307 	bic.w	r3, r3, #7
 80016be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	d117      	bne.n	8001702 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	4313      	orrs	r3, r2
 80016da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d00e      	beq.n	8001702 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 fa9d 	bl	8001c24 <DMA_CheckFifoParam>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2240      	movs	r2, #64	; 0x40
 80016f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80016fe:	2301      	movs	r3, #1
 8001700:	e016      	b.n	8001730 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 fa54 	bl	8001bb8 <DMA_CalcBaseAndBitshift>
 8001710:	4603      	mov	r3, r0
 8001712:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001718:	223f      	movs	r2, #63	; 0x3f
 800171a:	409a      	lsls	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	f010803f 	.word	0xf010803f

0800173c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
 8001748:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001752:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_DMA_Start_IT+0x26>
 800175e:	2302      	movs	r3, #2
 8001760:	e040      	b.n	80017e4 <HAL_DMA_Start_IT+0xa8>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b01      	cmp	r3, #1
 8001774:	d12f      	bne.n	80017d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2202      	movs	r2, #2
 800177a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f000 f9e6 	bl	8001b5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001794:	223f      	movs	r2, #63	; 0x3f
 8001796:	409a      	lsls	r2, r3
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0216 	orr.w	r2, r2, #22
 80017aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d007      	beq.n	80017c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0208 	orr.w	r2, r2, #8
 80017c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0201 	orr.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	e005      	b.n	80017e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017de:	2302      	movs	r3, #2
 80017e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80017e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d004      	beq.n	800180a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2280      	movs	r2, #128	; 0x80
 8001804:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e00c      	b.n	8001824 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2205      	movs	r2, #5
 800180e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 0201 	bic.w	r2, r2, #1
 8001820:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800183c:	4b92      	ldr	r3, [pc, #584]	; (8001a88 <HAL_DMA_IRQHandler+0x258>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a92      	ldr	r2, [pc, #584]	; (8001a8c <HAL_DMA_IRQHandler+0x25c>)
 8001842:	fba2 2303 	umull	r2, r3, r2, r3
 8001846:	0a9b      	lsrs	r3, r3, #10
 8001848:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185a:	2208      	movs	r2, #8
 800185c:	409a      	lsls	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4013      	ands	r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d01a      	beq.n	800189c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d013      	beq.n	800189c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0204 	bic.w	r2, r2, #4
 8001882:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001888:	2208      	movs	r2, #8
 800188a:	409a      	lsls	r2, r3
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001894:	f043 0201 	orr.w	r2, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a0:	2201      	movs	r2, #1
 80018a2:	409a      	lsls	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d012      	beq.n	80018d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00b      	beq.n	80018d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018be:	2201      	movs	r2, #1
 80018c0:	409a      	lsls	r2, r3
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ca:	f043 0202 	orr.w	r2, r3, #2
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d6:	2204      	movs	r2, #4
 80018d8:	409a      	lsls	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4013      	ands	r3, r2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d012      	beq.n	8001908 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00b      	beq.n	8001908 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f4:	2204      	movs	r2, #4
 80018f6:	409a      	lsls	r2, r3
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001900:	f043 0204 	orr.w	r2, r3, #4
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190c:	2210      	movs	r2, #16
 800190e:	409a      	lsls	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4013      	ands	r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d043      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d03c      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192a:	2210      	movs	r2, #16
 800192c:	409a      	lsls	r2, r3
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d018      	beq.n	8001972 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d108      	bne.n	8001960 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	2b00      	cmp	r3, #0
 8001954:	d024      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	4798      	blx	r3
 800195e:	e01f      	b.n	80019a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001964:	2b00      	cmp	r3, #0
 8001966:	d01b      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	4798      	blx	r3
 8001970:	e016      	b.n	80019a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d107      	bne.n	8001990 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0208 	bic.w	r2, r2, #8
 800198e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a4:	2220      	movs	r2, #32
 80019a6:	409a      	lsls	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4013      	ands	r3, r2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 808e 	beq.w	8001ace <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0310 	and.w	r3, r3, #16
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 8086 	beq.w	8001ace <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c6:	2220      	movs	r2, #32
 80019c8:	409a      	lsls	r2, r3
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b05      	cmp	r3, #5
 80019d8:	d136      	bne.n	8001a48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0216 	bic.w	r2, r2, #22
 80019e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d103      	bne.n	8001a0a <HAL_DMA_IRQHandler+0x1da>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d007      	beq.n	8001a1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0208 	bic.w	r2, r2, #8
 8001a18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1e:	223f      	movs	r2, #63	; 0x3f
 8001a20:	409a      	lsls	r2, r3
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d07d      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	4798      	blx	r3
        }
        return;
 8001a46:	e078      	b.n	8001b3a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d01c      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d108      	bne.n	8001a76 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d030      	beq.n	8001ace <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	4798      	blx	r3
 8001a74:	e02b      	b.n	8001ace <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d027      	beq.n	8001ace <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	4798      	blx	r3
 8001a86:	e022      	b.n	8001ace <HAL_DMA_IRQHandler+0x29e>
 8001a88:	20000010 	.word	0x20000010
 8001a8c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10f      	bne.n	8001abe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0210 	bic.w	r2, r2, #16
 8001aac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d032      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d022      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2205      	movs	r2, #5
 8001ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0201 	bic.w	r2, r2, #1
 8001af8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	3301      	adds	r3, #1
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d307      	bcc.n	8001b16 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f2      	bne.n	8001afa <HAL_DMA_IRQHandler+0x2ca>
 8001b14:	e000      	b.n	8001b18 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b16:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	4798      	blx	r3
 8001b38:	e000      	b.n	8001b3c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001b3a:	bf00      	nop
    }
  }
}
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop

08001b44 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b40      	cmp	r3, #64	; 0x40
 8001b88:	d108      	bne.n	8001b9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b9a:	e007      	b.n	8001bac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	60da      	str	r2, [r3, #12]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	3b10      	subs	r3, #16
 8001bc8:	4a14      	ldr	r2, [pc, #80]	; (8001c1c <DMA_CalcBaseAndBitshift+0x64>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bd2:	4a13      	ldr	r2, [pc, #76]	; (8001c20 <DMA_CalcBaseAndBitshift+0x68>)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d909      	bls.n	8001bfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bee:	f023 0303 	bic.w	r3, r3, #3
 8001bf2:	1d1a      	adds	r2, r3, #4
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	659a      	str	r2, [r3, #88]	; 0x58
 8001bf8:	e007      	b.n	8001c0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c02:	f023 0303 	bic.w	r3, r3, #3
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	aaaaaaab 	.word	0xaaaaaaab
 8001c20:	0800a35c 	.word	0x0800a35c

08001c24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d11f      	bne.n	8001c7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d855      	bhi.n	8001cf0 <DMA_CheckFifoParam+0xcc>
 8001c44:	a201      	add	r2, pc, #4	; (adr r2, 8001c4c <DMA_CheckFifoParam+0x28>)
 8001c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4a:	bf00      	nop
 8001c4c:	08001c5d 	.word	0x08001c5d
 8001c50:	08001c6f 	.word	0x08001c6f
 8001c54:	08001c5d 	.word	0x08001c5d
 8001c58:	08001cf1 	.word	0x08001cf1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d045      	beq.n	8001cf4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c6c:	e042      	b.n	8001cf4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c76:	d13f      	bne.n	8001cf8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c7c:	e03c      	b.n	8001cf8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c86:	d121      	bne.n	8001ccc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d836      	bhi.n	8001cfc <DMA_CheckFifoParam+0xd8>
 8001c8e:	a201      	add	r2, pc, #4	; (adr r2, 8001c94 <DMA_CheckFifoParam+0x70>)
 8001c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c94:	08001ca5 	.word	0x08001ca5
 8001c98:	08001cab 	.word	0x08001cab
 8001c9c:	08001ca5 	.word	0x08001ca5
 8001ca0:	08001cbd 	.word	0x08001cbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ca8:	e02f      	b.n	8001d0a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d024      	beq.n	8001d00 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cba:	e021      	b.n	8001d00 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cc4:	d11e      	bne.n	8001d04 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cca:	e01b      	b.n	8001d04 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d902      	bls.n	8001cd8 <DMA_CheckFifoParam+0xb4>
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d003      	beq.n	8001cde <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cd6:	e018      	b.n	8001d0a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
      break;
 8001cdc:	e015      	b.n	8001d0a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00e      	beq.n	8001d08 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
      break;
 8001cee:	e00b      	b.n	8001d08 <DMA_CheckFifoParam+0xe4>
      break;
 8001cf0:	bf00      	nop
 8001cf2:	e00a      	b.n	8001d0a <DMA_CheckFifoParam+0xe6>
      break;
 8001cf4:	bf00      	nop
 8001cf6:	e008      	b.n	8001d0a <DMA_CheckFifoParam+0xe6>
      break;
 8001cf8:	bf00      	nop
 8001cfa:	e006      	b.n	8001d0a <DMA_CheckFifoParam+0xe6>
      break;
 8001cfc:	bf00      	nop
 8001cfe:	e004      	b.n	8001d0a <DMA_CheckFifoParam+0xe6>
      break;
 8001d00:	bf00      	nop
 8001d02:	e002      	b.n	8001d0a <DMA_CheckFifoParam+0xe6>
      break;   
 8001d04:	bf00      	nop
 8001d06:	e000      	b.n	8001d0a <DMA_CheckFifoParam+0xe6>
      break;
 8001d08:	bf00      	nop
    }
  } 
  
  return status; 
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
 8001d32:	e16b      	b.n	800200c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d34:	2201      	movs	r2, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	f040 815a 	bne.w	8002006 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d00b      	beq.n	8001d72 <HAL_GPIO_Init+0x5a>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d007      	beq.n	8001d72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d66:	2b11      	cmp	r3, #17
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b12      	cmp	r3, #18
 8001d70:	d130      	bne.n	8001dd4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da8:	2201      	movs	r2, #1
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 0201 	and.w	r2, r3, #1
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	2203      	movs	r2, #3
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0xfc>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b12      	cmp	r3, #18
 8001e12:	d123      	bne.n	8001e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	08da      	lsrs	r2, r3, #3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3208      	adds	r2, #8
 8001e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	220f      	movs	r2, #15
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	08da      	lsrs	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3208      	adds	r2, #8
 8001e56:	69b9      	ldr	r1, [r7, #24]
 8001e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0203 	and.w	r2, r3, #3
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 80b4 	beq.w	8002006 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b5f      	ldr	r3, [pc, #380]	; (8002020 <HAL_GPIO_Init+0x308>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	4a5e      	ldr	r2, [pc, #376]	; (8002020 <HAL_GPIO_Init+0x308>)
 8001ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eac:	6453      	str	r3, [r2, #68]	; 0x44
 8001eae:	4b5c      	ldr	r3, [pc, #368]	; (8002020 <HAL_GPIO_Init+0x308>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eba:	4a5a      	ldr	r2, [pc, #360]	; (8002024 <HAL_GPIO_Init+0x30c>)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a51      	ldr	r2, [pc, #324]	; (8002028 <HAL_GPIO_Init+0x310>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d02b      	beq.n	8001f3e <HAL_GPIO_Init+0x226>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a50      	ldr	r2, [pc, #320]	; (800202c <HAL_GPIO_Init+0x314>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d025      	beq.n	8001f3a <HAL_GPIO_Init+0x222>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4f      	ldr	r2, [pc, #316]	; (8002030 <HAL_GPIO_Init+0x318>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d01f      	beq.n	8001f36 <HAL_GPIO_Init+0x21e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4e      	ldr	r2, [pc, #312]	; (8002034 <HAL_GPIO_Init+0x31c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d019      	beq.n	8001f32 <HAL_GPIO_Init+0x21a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4d      	ldr	r2, [pc, #308]	; (8002038 <HAL_GPIO_Init+0x320>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_Init+0x216>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4c      	ldr	r2, [pc, #304]	; (800203c <HAL_GPIO_Init+0x324>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00d      	beq.n	8001f2a <HAL_GPIO_Init+0x212>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4b      	ldr	r2, [pc, #300]	; (8002040 <HAL_GPIO_Init+0x328>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_Init+0x20e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4a      	ldr	r2, [pc, #296]	; (8002044 <HAL_GPIO_Init+0x32c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d101      	bne.n	8001f22 <HAL_GPIO_Init+0x20a>
 8001f1e:	2307      	movs	r3, #7
 8001f20:	e00e      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f22:	2308      	movs	r3, #8
 8001f24:	e00c      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f26:	2306      	movs	r3, #6
 8001f28:	e00a      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f2a:	2305      	movs	r3, #5
 8001f2c:	e008      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f2e:	2304      	movs	r3, #4
 8001f30:	e006      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f32:	2303      	movs	r3, #3
 8001f34:	e004      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e002      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	f002 0203 	and.w	r2, r2, #3
 8001f46:	0092      	lsls	r2, r2, #2
 8001f48:	4093      	lsls	r3, r2
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f50:	4934      	ldr	r1, [pc, #208]	; (8002024 <HAL_GPIO_Init+0x30c>)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	3302      	adds	r3, #2
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f5e:	4b3a      	ldr	r3, [pc, #232]	; (8002048 <HAL_GPIO_Init+0x330>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f82:	4a31      	ldr	r2, [pc, #196]	; (8002048 <HAL_GPIO_Init+0x330>)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f88:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <HAL_GPIO_Init+0x330>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fac:	4a26      	ldr	r2, [pc, #152]	; (8002048 <HAL_GPIO_Init+0x330>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fb2:	4b25      	ldr	r3, [pc, #148]	; (8002048 <HAL_GPIO_Init+0x330>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fd6:	4a1c      	ldr	r2, [pc, #112]	; (8002048 <HAL_GPIO_Init+0x330>)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <HAL_GPIO_Init+0x330>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002000:	4a11      	ldr	r2, [pc, #68]	; (8002048 <HAL_GPIO_Init+0x330>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3301      	adds	r3, #1
 800200a:	61fb      	str	r3, [r7, #28]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	2b0f      	cmp	r3, #15
 8002010:	f67f ae90 	bls.w	8001d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002014:	bf00      	nop
 8002016:	3724      	adds	r7, #36	; 0x24
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	40023800 	.word	0x40023800
 8002024:	40013800 	.word	0x40013800
 8002028:	40020000 	.word	0x40020000
 800202c:	40020400 	.word	0x40020400
 8002030:	40020800 	.word	0x40020800
 8002034:	40020c00 	.word	0x40020c00
 8002038:	40021000 	.word	0x40021000
 800203c:	40021400 	.word	0x40021400
 8002040:	40021800 	.word	0x40021800
 8002044:	40021c00 	.word	0x40021c00
 8002048:	40013c00 	.word	0x40013c00

0800204c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e11f      	b.n	800229e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d106      	bne.n	8002078 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7fe fee8 	bl	8000e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2224      	movs	r2, #36	; 0x24
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800209e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020b0:	f001 f9fc 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 80020b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4a7b      	ldr	r2, [pc, #492]	; (80022a8 <HAL_I2C_Init+0x25c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d807      	bhi.n	80020d0 <HAL_I2C_Init+0x84>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4a7a      	ldr	r2, [pc, #488]	; (80022ac <HAL_I2C_Init+0x260>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	bf94      	ite	ls
 80020c8:	2301      	movls	r3, #1
 80020ca:	2300      	movhi	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	e006      	b.n	80020de <HAL_I2C_Init+0x92>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4a77      	ldr	r2, [pc, #476]	; (80022b0 <HAL_I2C_Init+0x264>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	bf94      	ite	ls
 80020d8:	2301      	movls	r3, #1
 80020da:	2300      	movhi	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0db      	b.n	800229e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4a72      	ldr	r2, [pc, #456]	; (80022b4 <HAL_I2C_Init+0x268>)
 80020ea:	fba2 2303 	umull	r2, r3, r2, r3
 80020ee:	0c9b      	lsrs	r3, r3, #18
 80020f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	430a      	orrs	r2, r1
 8002104:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4a64      	ldr	r2, [pc, #400]	; (80022a8 <HAL_I2C_Init+0x25c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d802      	bhi.n	8002120 <HAL_I2C_Init+0xd4>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	3301      	adds	r3, #1
 800211e:	e009      	b.n	8002134 <HAL_I2C_Init+0xe8>
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002126:	fb02 f303 	mul.w	r3, r2, r3
 800212a:	4a63      	ldr	r2, [pc, #396]	; (80022b8 <HAL_I2C_Init+0x26c>)
 800212c:	fba2 2303 	umull	r2, r3, r2, r3
 8002130:	099b      	lsrs	r3, r3, #6
 8002132:	3301      	adds	r3, #1
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	430b      	orrs	r3, r1
 800213a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002146:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4956      	ldr	r1, [pc, #344]	; (80022a8 <HAL_I2C_Init+0x25c>)
 8002150:	428b      	cmp	r3, r1
 8002152:	d80d      	bhi.n	8002170 <HAL_I2C_Init+0x124>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1e59      	subs	r1, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002162:	3301      	adds	r3, #1
 8002164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002168:	2b04      	cmp	r3, #4
 800216a:	bf38      	it	cc
 800216c:	2304      	movcc	r3, #4
 800216e:	e04f      	b.n	8002210 <HAL_I2C_Init+0x1c4>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d111      	bne.n	800219c <HAL_I2C_Init+0x150>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1e58      	subs	r0, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6859      	ldr	r1, [r3, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	440b      	add	r3, r1
 8002186:	fbb0 f3f3 	udiv	r3, r0, r3
 800218a:	3301      	adds	r3, #1
 800218c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf0c      	ite	eq
 8002194:	2301      	moveq	r3, #1
 8002196:	2300      	movne	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	e012      	b.n	80021c2 <HAL_I2C_Init+0x176>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1e58      	subs	r0, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6859      	ldr	r1, [r3, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	0099      	lsls	r1, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80021b2:	3301      	adds	r3, #1
 80021b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	bf0c      	ite	eq
 80021bc:	2301      	moveq	r3, #1
 80021be:	2300      	movne	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_I2C_Init+0x17e>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e022      	b.n	8002210 <HAL_I2C_Init+0x1c4>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10e      	bne.n	80021f0 <HAL_I2C_Init+0x1a4>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1e58      	subs	r0, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6859      	ldr	r1, [r3, #4]
 80021da:	460b      	mov	r3, r1
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	440b      	add	r3, r1
 80021e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e4:	3301      	adds	r3, #1
 80021e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ee:	e00f      	b.n	8002210 <HAL_I2C_Init+0x1c4>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	1e58      	subs	r0, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6859      	ldr	r1, [r3, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	0099      	lsls	r1, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	fbb0 f3f3 	udiv	r3, r0, r3
 8002206:	3301      	adds	r3, #1
 8002208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800220c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	6809      	ldr	r1, [r1, #0]
 8002214:	4313      	orrs	r3, r2
 8002216:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69da      	ldr	r2, [r3, #28]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800223e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6911      	ldr	r1, [r2, #16]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68d2      	ldr	r2, [r2, #12]
 800224a:	4311      	orrs	r1, r2
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	430b      	orrs	r3, r1
 8002252:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0201 	orr.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	000186a0 	.word	0x000186a0
 80022ac:	001e847f 	.word	0x001e847f
 80022b0:	003d08ff 	.word	0x003d08ff
 80022b4:	431bde83 	.word	0x431bde83
 80022b8:	10624dd3 	.word	0x10624dd3

080022bc <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08c      	sub	sp, #48	; 0x30
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	4608      	mov	r0, r1
 80022c6:	4611      	mov	r1, r2
 80022c8:	461a      	mov	r2, r3
 80022ca:	4603      	mov	r3, r0
 80022cc:	817b      	strh	r3, [r7, #10]
 80022ce:	460b      	mov	r3, r1
 80022d0:	813b      	strh	r3, [r7, #8]
 80022d2:	4613      	mov	r3, r2
 80022d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022d6:	f7ff f895 	bl	8001404 <HAL_GetTick>
 80022da:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b20      	cmp	r3, #32
 80022ea:	f040 8154 	bne.w	8002596 <HAL_I2C_Mem_Read_DMA+0x2da>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80022ee:	4b96      	ldr	r3, [pc, #600]	; (8002548 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	08db      	lsrs	r3, r3, #3
 80022f4:	4a95      	ldr	r2, [pc, #596]	; (800254c <HAL_I2C_Mem_Read_DMA+0x290>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	0a1a      	lsrs	r2, r3, #8
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	009a      	lsls	r2, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	3b01      	subs	r3, #1
 800230c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d116      	bne.n	8002342 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f043 0220 	orr.w	r2, r3, #32
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e12a      	b.n	8002598 <HAL_I2C_Mem_Read_DMA+0x2dc>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b02      	cmp	r3, #2
 800234e:	d0db      	beq.n	8002308 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_I2C_Mem_Read_DMA+0xa2>
 800235a:	2302      	movs	r3, #2
 800235c:	e11c      	b.n	8002598 <HAL_I2C_Mem_Read_DMA+0x2dc>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b01      	cmp	r3, #1
 8002372:	d007      	beq.n	8002384 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0201 	orr.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002392:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2222      	movs	r2, #34	; 0x22
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2240      	movs	r2, #64	; 0x40
 80023a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80023b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4a63      	ldr	r2, [pc, #396]	; (8002550 <HAL_I2C_Mem_Read_DMA+0x294>)
 80023c4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 80ab 	beq.w	8002526 <HAL_I2C_Mem_Read_DMA+0x26a>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d4:	4a5f      	ldr	r2, [pc, #380]	; (8002554 <HAL_I2C_Mem_Read_DMA+0x298>)
 80023d6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023dc:	4a5e      	ldr	r2, [pc, #376]	; (8002558 <HAL_I2C_Mem_Read_DMA+0x29c>)
 80023de:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e4:	2200      	movs	r2, #0
 80023e6:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ec:	2200      	movs	r2, #0
 80023ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f4:	2200      	movs	r2, #0
 80023f6:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fc:	2200      	movs	r2, #0
 80023fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	3310      	adds	r3, #16
 800240a:	4619      	mov	r1, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	461a      	mov	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002416:	f7ff f991 	bl	800173c <HAL_DMA_Start_IT>
 800241a:	4603      	mov	r3, r0
 800241c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 8002420:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002424:	2b00      	cmp	r3, #0
 8002426:	d16a      	bne.n	80024fe <HAL_I2C_Mem_Read_DMA+0x242>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002428:	88f8      	ldrh	r0, [r7, #6]
 800242a:	893a      	ldrh	r2, [r7, #8]
 800242c:	8979      	ldrh	r1, [r7, #10]
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	9301      	str	r3, [sp, #4]
 8002432:	2323      	movs	r3, #35	; 0x23
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	4603      	mov	r3, r0
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 f8e3 	bl	8002604 <I2C_RequestMemoryRead>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d027      	beq.n	8002494 <HAL_I2C_Mem_Read_DMA+0x1d8>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff f9cf 	bl	80017ec <HAL_DMA_Abort_IT>
 800244e:	4603      	mov	r3, r0
 8002450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Clear directly Complete callback as no XferAbortCallback is used to finalize Abort treatment */
          if (hi2c->hdmarx != NULL)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_I2C_Mem_Read_DMA+0x1a8>
          {
            hi2c->hdmarx->XferCpltCallback = NULL;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002460:	2200      	movs	r2, #0
 8002462:	63da      	str	r2, [r3, #60]	; 0x3c
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002472:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e081      	b.n	8002598 <HAL_I2C_Mem_Read_DMA+0x2dc>
        }

        if (hi2c->XferSize == 1U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002498:	2b01      	cmp	r3, #1
 800249a:	d108      	bne.n	80024ae <HAL_I2C_Mem_Read_DMA+0x1f2>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	e007      	b.n	80024be <HAL_I2C_Mem_Read_DMA+0x202>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024bc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024be:	2300      	movs	r3, #0
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	61bb      	str	r3, [r7, #24]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	61bb      	str	r3, [r7, #24]
 80024d2:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ea:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024fa:	605a      	str	r2, [r3, #4]
 80024fc:	e049      	b.n	8002592 <HAL_I2C_Mem_Read_DMA+0x2d6>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f043 0210 	orr.w	r2, r3, #16
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e038      	b.n	8002598 <HAL_I2C_Mem_Read_DMA+0x2dc>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002526:	88f8      	ldrh	r0, [r7, #6]
 8002528:	893a      	ldrh	r2, [r7, #8]
 800252a:	8979      	ldrh	r1, [r7, #10]
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	2323      	movs	r3, #35	; 0x23
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	4603      	mov	r3, r0
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f864 	bl	8002604 <I2C_RequestMemoryRead>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00c      	beq.n	800255c <HAL_I2C_Mem_Read_DMA+0x2a0>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e028      	b.n	8002598 <HAL_I2C_Mem_Read_DMA+0x2dc>
 8002546:	bf00      	nop
 8002548:	20000010 	.word	0x20000010
 800254c:	14f8b589 	.word	0x14f8b589
 8002550:	ffff0000 	.word	0xffff0000
 8002554:	080027d5 	.word	0x080027d5
 8002558:	0800297f 	.word	0x0800297f
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002580:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	e000      	b.n	8002598 <HAL_I2C_Mem_Read_DMA+0x2dc>
  }
  else
  {
    return HAL_BUSY;
 8002596:	2302      	movs	r3, #2
  }
}
 8002598:	4618      	mov	r0, r3
 800259a:	3728      	adds	r7, #40	; 0x28
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af02      	add	r7, sp, #8
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	4608      	mov	r0, r1
 800260e:	4611      	mov	r1, r2
 8002610:	461a      	mov	r2, r3
 8002612:	4603      	mov	r3, r0
 8002614:	817b      	strh	r3, [r7, #10]
 8002616:	460b      	mov	r3, r1
 8002618:	813b      	strh	r3, [r7, #8]
 800261a:	4613      	mov	r3, r2
 800261c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800262c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800263c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	2200      	movs	r2, #0
 8002646:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f9d4 	bl	80029f8 <I2C_WaitOnFlagUntilTimeout>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00d      	beq.n	8002672 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002664:	d103      	bne.n	800266e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800266c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e0aa      	b.n	80027c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002672:	897b      	ldrh	r3, [r7, #10]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002680:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	6a3a      	ldr	r2, [r7, #32]
 8002686:	4952      	ldr	r1, [pc, #328]	; (80027d0 <I2C_RequestMemoryRead+0x1cc>)
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 fa0c 	bl	8002aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e097      	b.n	80027c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b0:	6a39      	ldr	r1, [r7, #32]
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fa76 	bl	8002ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00d      	beq.n	80026da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d107      	bne.n	80026d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e076      	b.n	80027c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d105      	bne.n	80026ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026e0:	893b      	ldrh	r3, [r7, #8]
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	611a      	str	r2, [r3, #16]
 80026ea:	e021      	b.n	8002730 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026ec:	893b      	ldrh	r3, [r7, #8]
 80026ee:	0a1b      	lsrs	r3, r3, #8
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fc:	6a39      	ldr	r1, [r7, #32]
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 fa50 	bl	8002ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00d      	beq.n	8002726 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	2b04      	cmp	r3, #4
 8002710:	d107      	bne.n	8002722 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002720:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e050      	b.n	80027c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002726:	893b      	ldrh	r3, [r7, #8]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002732:	6a39      	ldr	r1, [r7, #32]
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 fa35 	bl	8002ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00d      	beq.n	800275c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	2b04      	cmp	r3, #4
 8002746:	d107      	bne.n	8002758 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002756:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e035      	b.n	80027c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800276a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	2200      	movs	r2, #0
 8002774:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f93d 	bl	80029f8 <I2C_WaitOnFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00d      	beq.n	80027a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002792:	d103      	bne.n	800279c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800279a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e013      	b.n	80027c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027a0:	897b      	ldrh	r3, [r7, #10]
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	6a3a      	ldr	r2, [r7, #32]
 80027b4:	4906      	ldr	r1, [pc, #24]	; (80027d0 <I2C_RequestMemoryRead+0x1cc>)
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f975 	bl	8002aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	00010002 	.word	0x00010002

080027d4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027f0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002806:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002814:	2200      	movs	r2, #0
 8002816:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002824:	2200      	movs	r2, #0
 8002826:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8002828:	7cfb      	ldrb	r3, [r7, #19]
 800282a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800282e:	2b21      	cmp	r3, #33	; 0x21
 8002830:	d007      	beq.n	8002842 <I2C_DMAXferCplt+0x6e>
 8002832:	7cfb      	ldrb	r3, [r7, #19]
 8002834:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8002838:	2b22      	cmp	r3, #34	; 0x22
 800283a:	d131      	bne.n	80028a0 <I2C_DMAXferCplt+0xcc>
 800283c:	7cbb      	ldrb	r3, [r7, #18]
 800283e:	2b20      	cmp	r3, #32
 8002840:	d12e      	bne.n	80028a0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002850:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2200      	movs	r2, #0
 8002856:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	2b29      	cmp	r3, #41	; 0x29
 800285c:	d10a      	bne.n	8002874 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2221      	movs	r2, #33	; 0x21
 8002862:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	2228      	movs	r2, #40	; 0x28
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800286c:	6978      	ldr	r0, [r7, #20]
 800286e:	f7ff fea1 	bl	80025b4 <HAL_I2C_SlaveTxCpltCallback>
 8002872:	e00c      	b.n	800288e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002874:	7cfb      	ldrb	r3, [r7, #19]
 8002876:	2b2a      	cmp	r3, #42	; 0x2a
 8002878:	d109      	bne.n	800288e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2222      	movs	r2, #34	; 0x22
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2228      	movs	r2, #40	; 0x28
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002888:	6978      	ldr	r0, [r7, #20]
 800288a:	f7ff fe9d 	bl	80025c8 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800289c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800289e:	e06a      	b.n	8002976 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d064      	beq.n	8002976 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d107      	bne.n	80028c6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028d4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028dc:	d009      	beq.n	80028f2 <I2C_DMAXferCplt+0x11e>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d006      	beq.n	80028f2 <I2C_DMAXferCplt+0x11e>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80028ea:	d002      	beq.n	80028f2 <I2C_DMAXferCplt+0x11e>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d107      	bne.n	8002902 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002900:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002910:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002920:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2200      	movs	r2, #0
 8002926:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8002930:	6978      	ldr	r0, [r7, #20]
 8002932:	f7ff fe5d 	bl	80025f0 <HAL_I2C_ErrorCallback>
}
 8002936:	e01e      	b.n	8002976 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b40      	cmp	r3, #64	; 0x40
 800294a:	d10a      	bne.n	8002962 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2200      	movs	r2, #0
 8002958:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800295a:	6978      	ldr	r0, [r7, #20]
 800295c:	f7ff fe3e 	bl	80025dc <HAL_I2C_MemRxCpltCallback>
}
 8002960:	e009      	b.n	8002976 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2212      	movs	r2, #18
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8002970:	6978      	ldr	r0, [r7, #20]
 8002972:	f7ff fe15 	bl	80025a0 <HAL_I2C_MasterRxCpltCallback>
}
 8002976:	bf00      	nop
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002998:	2200      	movs	r2, #0
 800299a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a8:	2200      	movs	r2, #0
 80029aa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff f8c9 	bl	8001b44 <HAL_DMA_GetError>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d01b      	beq.n	80029f0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f043 0210 	orr.w	r2, r3, #16
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f7ff fe00 	bl	80025f0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80029f0:	bf00      	nop
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	4613      	mov	r3, r2
 8002a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a08:	e025      	b.n	8002a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d021      	beq.n	8002a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a12:	f7fe fcf7 	bl	8001404 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d302      	bcc.n	8002a28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d116      	bne.n	8002a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f043 0220 	orr.w	r2, r3, #32
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e023      	b.n	8002a9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	0c1b      	lsrs	r3, r3, #16
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d10d      	bne.n	8002a7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	43da      	mvns	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	bf0c      	ite	eq
 8002a72:	2301      	moveq	r3, #1
 8002a74:	2300      	movne	r3, #0
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	461a      	mov	r2, r3
 8002a7a:	e00c      	b.n	8002a96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	43da      	mvns	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4013      	ands	r3, r2
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bf0c      	ite	eq
 8002a8e:	2301      	moveq	r3, #1
 8002a90:	2300      	movne	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d0b6      	beq.n	8002a0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ab4:	e051      	b.n	8002b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac4:	d123      	bne.n	8002b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ade:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f043 0204 	orr.w	r2, r3, #4
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e046      	b.n	8002b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d021      	beq.n	8002b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b16:	f7fe fc75 	bl	8001404 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d302      	bcc.n	8002b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d116      	bne.n	8002b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f043 0220 	orr.w	r2, r3, #32
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e020      	b.n	8002b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	0c1b      	lsrs	r3, r3, #16
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d10c      	bne.n	8002b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bf14      	ite	ne
 8002b76:	2301      	movne	r3, #1
 8002b78:	2300      	moveq	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	e00b      	b.n	8002b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	43da      	mvns	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf14      	ite	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	2300      	moveq	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d18d      	bne.n	8002ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bb0:	e02d      	b.n	8002c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f837 	bl	8002c26 <I2C_IsAcknowledgeFailed>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e02d      	b.n	8002c1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	d021      	beq.n	8002c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bca:	f7fe fc1b 	bl	8001404 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d302      	bcc.n	8002be0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d116      	bne.n	8002c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f043 0220 	orr.w	r2, r3, #32
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e007      	b.n	8002c1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c18:	2b80      	cmp	r3, #128	; 0x80
 8002c1a:	d1ca      	bne.n	8002bb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3c:	d11b      	bne.n	8002c76 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c46:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f043 0204 	orr.w	r2, r3, #4
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e25b      	b.n	800314e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d075      	beq.n	8002d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ca2:	4ba3      	ldr	r3, [pc, #652]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d00c      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cae:	4ba0      	ldr	r3, [pc, #640]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d112      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cba:	4b9d      	ldr	r3, [pc, #628]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cc6:	d10b      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc8:	4b99      	ldr	r3, [pc, #612]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d05b      	beq.n	8002d8c <HAL_RCC_OscConfig+0x108>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d157      	bne.n	8002d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e236      	b.n	800314e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce8:	d106      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x74>
 8002cea:	4b91      	ldr	r3, [pc, #580]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a90      	ldr	r2, [pc, #576]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	e01d      	b.n	8002d34 <HAL_RCC_OscConfig+0xb0>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d00:	d10c      	bne.n	8002d1c <HAL_RCC_OscConfig+0x98>
 8002d02:	4b8b      	ldr	r3, [pc, #556]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a8a      	ldr	r2, [pc, #552]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	4b88      	ldr	r3, [pc, #544]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a87      	ldr	r2, [pc, #540]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e00b      	b.n	8002d34 <HAL_RCC_OscConfig+0xb0>
 8002d1c:	4b84      	ldr	r3, [pc, #528]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a83      	ldr	r2, [pc, #524]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	4b81      	ldr	r3, [pc, #516]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a80      	ldr	r2, [pc, #512]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d013      	beq.n	8002d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3c:	f7fe fb62 	bl	8001404 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d44:	f7fe fb5e 	bl	8001404 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	; 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e1fb      	b.n	800314e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	4b76      	ldr	r3, [pc, #472]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0xc0>
 8002d62:	e014      	b.n	8002d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe fb4e 	bl	8001404 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d6c:	f7fe fb4a 	bl	8001404 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	; 0x64
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e1e7      	b.n	800314e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7e:	4b6c      	ldr	r3, [pc, #432]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0xe8>
 8002d8a:	e000      	b.n	8002d8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d063      	beq.n	8002e62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d9a:	4b65      	ldr	r3, [pc, #404]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00b      	beq.n	8002dbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002da6:	4b62      	ldr	r3, [pc, #392]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d11c      	bne.n	8002dec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002db2:	4b5f      	ldr	r3, [pc, #380]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d116      	bne.n	8002dec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dbe:	4b5c      	ldr	r3, [pc, #368]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d005      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x152>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d001      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e1bb      	b.n	800314e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd6:	4b56      	ldr	r3, [pc, #344]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4952      	ldr	r1, [pc, #328]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dea:	e03a      	b.n	8002e62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d020      	beq.n	8002e36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df4:	4b4f      	ldr	r3, [pc, #316]	; (8002f34 <HAL_RCC_OscConfig+0x2b0>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfa:	f7fe fb03 	bl	8001404 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e02:	f7fe faff 	bl	8001404 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e19c      	b.n	800314e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e14:	4b46      	ldr	r3, [pc, #280]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e20:	4b43      	ldr	r3, [pc, #268]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4940      	ldr	r1, [pc, #256]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	600b      	str	r3, [r1, #0]
 8002e34:	e015      	b.n	8002e62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e36:	4b3f      	ldr	r3, [pc, #252]	; (8002f34 <HAL_RCC_OscConfig+0x2b0>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fae2 	bl	8001404 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e44:	f7fe fade 	bl	8001404 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e17b      	b.n	800314e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e56:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d030      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d016      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e76:	4b30      	ldr	r3, [pc, #192]	; (8002f38 <HAL_RCC_OscConfig+0x2b4>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7c:	f7fe fac2 	bl	8001404 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e84:	f7fe fabe 	bl	8001404 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e15b      	b.n	800314e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e96:	4b26      	ldr	r3, [pc, #152]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0x200>
 8002ea2:	e015      	b.n	8002ed0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea4:	4b24      	ldr	r3, [pc, #144]	; (8002f38 <HAL_RCC_OscConfig+0x2b4>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eaa:	f7fe faab 	bl	8001404 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb2:	f7fe faa7 	bl	8001404 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e144      	b.n	800314e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec4:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1f0      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80a0 	beq.w	800301e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee2:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10f      	bne.n	8002f0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	4a0e      	ldr	r2, [pc, #56]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efc:	6413      	str	r3, [r2, #64]	; 0x40
 8002efe:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <HAL_RCC_OscConfig+0x2ac>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCC_OscConfig+0x2b8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d121      	bne.n	8002f5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f1a:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <HAL_RCC_OscConfig+0x2b8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a07      	ldr	r2, [pc, #28]	; (8002f3c <HAL_RCC_OscConfig+0x2b8>)
 8002f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f26:	f7fe fa6d 	bl	8001404 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2c:	e011      	b.n	8002f52 <HAL_RCC_OscConfig+0x2ce>
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800
 8002f34:	42470000 	.word	0x42470000
 8002f38:	42470e80 	.word	0x42470e80
 8002f3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f40:	f7fe fa60 	bl	8001404 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e0fd      	b.n	800314e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f52:	4b81      	ldr	r3, [pc, #516]	; (8003158 <HAL_RCC_OscConfig+0x4d4>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d106      	bne.n	8002f74 <HAL_RCC_OscConfig+0x2f0>
 8002f66:	4b7d      	ldr	r3, [pc, #500]	; (800315c <HAL_RCC_OscConfig+0x4d8>)
 8002f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6a:	4a7c      	ldr	r2, [pc, #496]	; (800315c <HAL_RCC_OscConfig+0x4d8>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	6713      	str	r3, [r2, #112]	; 0x70
 8002f72:	e01c      	b.n	8002fae <HAL_RCC_OscConfig+0x32a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b05      	cmp	r3, #5
 8002f7a:	d10c      	bne.n	8002f96 <HAL_RCC_OscConfig+0x312>
 8002f7c:	4b77      	ldr	r3, [pc, #476]	; (800315c <HAL_RCC_OscConfig+0x4d8>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	4a76      	ldr	r2, [pc, #472]	; (800315c <HAL_RCC_OscConfig+0x4d8>)
 8002f82:	f043 0304 	orr.w	r3, r3, #4
 8002f86:	6713      	str	r3, [r2, #112]	; 0x70
 8002f88:	4b74      	ldr	r3, [pc, #464]	; (800315c <HAL_RCC_OscConfig+0x4d8>)
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	4a73      	ldr	r2, [pc, #460]	; (800315c <HAL_RCC_OscConfig+0x4d8>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6713      	str	r3, [r2, #112]	; 0x70
 8002f94:	e00b      	b.n	8002fae <HAL_RCC_OscConfig+0x32a>
 8002f96:	4b71      	ldr	r3, [pc, #452]	; (800315c <HAL_RCC_OscConfig+0x4d8>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	4a70      	ldr	r2, [pc, #448]	; (800315c <HAL_RCC_OscConfig+0x4d8>)
 8002f9c:	f023 0301 	bic.w	r3, r3, #1
 8002fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa2:	4b6e      	ldr	r3, [pc, #440]	; (800315c <HAL_RCC_OscConfig+0x4d8>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa6:	4a6d      	ldr	r2, [pc, #436]	; (800315c <HAL_RCC_OscConfig+0x4d8>)
 8002fa8:	f023 0304 	bic.w	r3, r3, #4
 8002fac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d015      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb6:	f7fe fa25 	bl	8001404 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fbc:	e00a      	b.n	8002fd4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fbe:	f7fe fa21 	bl	8001404 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e0bc      	b.n	800314e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd4:	4b61      	ldr	r3, [pc, #388]	; (800315c <HAL_RCC_OscConfig+0x4d8>)
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0ee      	beq.n	8002fbe <HAL_RCC_OscConfig+0x33a>
 8002fe0:	e014      	b.n	800300c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe2:	f7fe fa0f 	bl	8001404 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe8:	e00a      	b.n	8003000 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fe fa0b 	bl	8001404 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e0a6      	b.n	800314e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003000:	4b56      	ldr	r3, [pc, #344]	; (800315c <HAL_RCC_OscConfig+0x4d8>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1ee      	bne.n	8002fea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800300c:	7dfb      	ldrb	r3, [r7, #23]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d105      	bne.n	800301e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003012:	4b52      	ldr	r3, [pc, #328]	; (800315c <HAL_RCC_OscConfig+0x4d8>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	4a51      	ldr	r2, [pc, #324]	; (800315c <HAL_RCC_OscConfig+0x4d8>)
 8003018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800301c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 8092 	beq.w	800314c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003028:	4b4c      	ldr	r3, [pc, #304]	; (800315c <HAL_RCC_OscConfig+0x4d8>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 030c 	and.w	r3, r3, #12
 8003030:	2b08      	cmp	r3, #8
 8003032:	d05c      	beq.n	80030ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d141      	bne.n	80030c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303c:	4b48      	ldr	r3, [pc, #288]	; (8003160 <HAL_RCC_OscConfig+0x4dc>)
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003042:	f7fe f9df 	bl	8001404 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800304a:	f7fe f9db 	bl	8001404 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e078      	b.n	800314e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305c:	4b3f      	ldr	r3, [pc, #252]	; (800315c <HAL_RCC_OscConfig+0x4d8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f0      	bne.n	800304a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	019b      	lsls	r3, r3, #6
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307e:	085b      	lsrs	r3, r3, #1
 8003080:	3b01      	subs	r3, #1
 8003082:	041b      	lsls	r3, r3, #16
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	061b      	lsls	r3, r3, #24
 800308c:	4933      	ldr	r1, [pc, #204]	; (800315c <HAL_RCC_OscConfig+0x4d8>)
 800308e:	4313      	orrs	r3, r2
 8003090:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003092:	4b33      	ldr	r3, [pc, #204]	; (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8003094:	2201      	movs	r2, #1
 8003096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7fe f9b4 	bl	8001404 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a0:	f7fe f9b0 	bl	8001404 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e04d      	b.n	800314e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b2:	4b2a      	ldr	r3, [pc, #168]	; (800315c <HAL_RCC_OscConfig+0x4d8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0x41c>
 80030be:	e045      	b.n	800314c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c0:	4b27      	ldr	r3, [pc, #156]	; (8003160 <HAL_RCC_OscConfig+0x4dc>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c6:	f7fe f99d 	bl	8001404 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ce:	f7fe f999 	bl	8001404 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e036      	b.n	800314e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e0:	4b1e      	ldr	r3, [pc, #120]	; (800315c <HAL_RCC_OscConfig+0x4d8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1f0      	bne.n	80030ce <HAL_RCC_OscConfig+0x44a>
 80030ec:	e02e      	b.n	800314c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e029      	b.n	800314e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030fa:	4b18      	ldr	r3, [pc, #96]	; (800315c <HAL_RCC_OscConfig+0x4d8>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	429a      	cmp	r2, r3
 800310c:	d11c      	bne.n	8003148 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003118:	429a      	cmp	r2, r3
 800311a:	d115      	bne.n	8003148 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003122:	4013      	ands	r3, r2
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003128:	4293      	cmp	r3, r2
 800312a:	d10d      	bne.n	8003148 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003136:	429a      	cmp	r2, r3
 8003138:	d106      	bne.n	8003148 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40007000 	.word	0x40007000
 800315c:	40023800 	.word	0x40023800
 8003160:	42470060 	.word	0x42470060

08003164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0cc      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003178:	4b68      	ldr	r3, [pc, #416]	; (800331c <HAL_RCC_ClockConfig+0x1b8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d90c      	bls.n	80031a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003186:	4b65      	ldr	r3, [pc, #404]	; (800331c <HAL_RCC_ClockConfig+0x1b8>)
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318e:	4b63      	ldr	r3, [pc, #396]	; (800331c <HAL_RCC_ClockConfig+0x1b8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0b8      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d020      	beq.n	80031ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031b8:	4b59      	ldr	r3, [pc, #356]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	4a58      	ldr	r2, [pc, #352]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031d0:	4b53      	ldr	r3, [pc, #332]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4a52      	ldr	r2, [pc, #328]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031dc:	4b50      	ldr	r3, [pc, #320]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	494d      	ldr	r1, [pc, #308]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d044      	beq.n	8003284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d107      	bne.n	8003212 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	4b47      	ldr	r3, [pc, #284]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d119      	bne.n	8003242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e07f      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d003      	beq.n	8003222 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800321e:	2b03      	cmp	r3, #3
 8003220:	d107      	bne.n	8003232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003222:	4b3f      	ldr	r3, [pc, #252]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e06f      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003232:	4b3b      	ldr	r3, [pc, #236]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e067      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003242:	4b37      	ldr	r3, [pc, #220]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f023 0203 	bic.w	r2, r3, #3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	4934      	ldr	r1, [pc, #208]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	4313      	orrs	r3, r2
 8003252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003254:	f7fe f8d6 	bl	8001404 <HAL_GetTick>
 8003258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325a:	e00a      	b.n	8003272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800325c:	f7fe f8d2 	bl	8001404 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	; 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e04f      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	4b2b      	ldr	r3, [pc, #172]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 020c 	and.w	r2, r3, #12
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	429a      	cmp	r2, r3
 8003282:	d1eb      	bne.n	800325c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003284:	4b25      	ldr	r3, [pc, #148]	; (800331c <HAL_RCC_ClockConfig+0x1b8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d20c      	bcs.n	80032ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003292:	4b22      	ldr	r3, [pc, #136]	; (800331c <HAL_RCC_ClockConfig+0x1b8>)
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800329a:	4b20      	ldr	r3, [pc, #128]	; (800331c <HAL_RCC_ClockConfig+0x1b8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d001      	beq.n	80032ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e032      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b8:	4b19      	ldr	r3, [pc, #100]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	4916      	ldr	r1, [pc, #88]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032d6:	4b12      	ldr	r3, [pc, #72]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	490e      	ldr	r1, [pc, #56]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032ea:	f000 f821 	bl	8003330 <HAL_RCC_GetSysClockFreq>
 80032ee:	4601      	mov	r1, r0
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	4a0a      	ldr	r2, [pc, #40]	; (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 80032fc:	5cd3      	ldrb	r3, [r2, r3]
 80032fe:	fa21 f303 	lsr.w	r3, r1, r3
 8003302:	4a09      	ldr	r2, [pc, #36]	; (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003306:	4b09      	ldr	r3, [pc, #36]	; (800332c <HAL_RCC_ClockConfig+0x1c8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7fd ff20 	bl	8001150 <HAL_InitTick>

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40023c00 	.word	0x40023c00
 8003320:	40023800 	.word	0x40023800
 8003324:	0800a344 	.word	0x0800a344
 8003328:	20000010 	.word	0x20000010
 800332c:	20000014 	.word	0x20000014

08003330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	607b      	str	r3, [r7, #4]
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	2300      	movs	r3, #0
 8003340:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003346:	4b50      	ldr	r3, [pc, #320]	; (8003488 <HAL_RCC_GetSysClockFreq+0x158>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	2b04      	cmp	r3, #4
 8003350:	d007      	beq.n	8003362 <HAL_RCC_GetSysClockFreq+0x32>
 8003352:	2b08      	cmp	r3, #8
 8003354:	d008      	beq.n	8003368 <HAL_RCC_GetSysClockFreq+0x38>
 8003356:	2b00      	cmp	r3, #0
 8003358:	f040 808d 	bne.w	8003476 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800335c:	4b4b      	ldr	r3, [pc, #300]	; (800348c <HAL_RCC_GetSysClockFreq+0x15c>)
 800335e:	60bb      	str	r3, [r7, #8]
       break;
 8003360:	e08c      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003362:	4b4b      	ldr	r3, [pc, #300]	; (8003490 <HAL_RCC_GetSysClockFreq+0x160>)
 8003364:	60bb      	str	r3, [r7, #8]
      break;
 8003366:	e089      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003368:	4b47      	ldr	r3, [pc, #284]	; (8003488 <HAL_RCC_GetSysClockFreq+0x158>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003370:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003372:	4b45      	ldr	r3, [pc, #276]	; (8003488 <HAL_RCC_GetSysClockFreq+0x158>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d023      	beq.n	80033c6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800337e:	4b42      	ldr	r3, [pc, #264]	; (8003488 <HAL_RCC_GetSysClockFreq+0x158>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	099b      	lsrs	r3, r3, #6
 8003384:	f04f 0400 	mov.w	r4, #0
 8003388:	f240 11ff 	movw	r1, #511	; 0x1ff
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	ea03 0501 	and.w	r5, r3, r1
 8003394:	ea04 0602 	and.w	r6, r4, r2
 8003398:	4a3d      	ldr	r2, [pc, #244]	; (8003490 <HAL_RCC_GetSysClockFreq+0x160>)
 800339a:	fb02 f106 	mul.w	r1, r2, r6
 800339e:	2200      	movs	r2, #0
 80033a0:	fb02 f205 	mul.w	r2, r2, r5
 80033a4:	440a      	add	r2, r1
 80033a6:	493a      	ldr	r1, [pc, #232]	; (8003490 <HAL_RCC_GetSysClockFreq+0x160>)
 80033a8:	fba5 0101 	umull	r0, r1, r5, r1
 80033ac:	1853      	adds	r3, r2, r1
 80033ae:	4619      	mov	r1, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f04f 0400 	mov.w	r4, #0
 80033b6:	461a      	mov	r2, r3
 80033b8:	4623      	mov	r3, r4
 80033ba:	f7fc ffb1 	bl	8000320 <__aeabi_uldivmod>
 80033be:	4603      	mov	r3, r0
 80033c0:	460c      	mov	r4, r1
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	e049      	b.n	800345a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c6:	4b30      	ldr	r3, [pc, #192]	; (8003488 <HAL_RCC_GetSysClockFreq+0x158>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	099b      	lsrs	r3, r3, #6
 80033cc:	f04f 0400 	mov.w	r4, #0
 80033d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	ea03 0501 	and.w	r5, r3, r1
 80033dc:	ea04 0602 	and.w	r6, r4, r2
 80033e0:	4629      	mov	r1, r5
 80033e2:	4632      	mov	r2, r6
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	f04f 0400 	mov.w	r4, #0
 80033ec:	0154      	lsls	r4, r2, #5
 80033ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033f2:	014b      	lsls	r3, r1, #5
 80033f4:	4619      	mov	r1, r3
 80033f6:	4622      	mov	r2, r4
 80033f8:	1b49      	subs	r1, r1, r5
 80033fa:	eb62 0206 	sbc.w	r2, r2, r6
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	f04f 0400 	mov.w	r4, #0
 8003406:	0194      	lsls	r4, r2, #6
 8003408:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800340c:	018b      	lsls	r3, r1, #6
 800340e:	1a5b      	subs	r3, r3, r1
 8003410:	eb64 0402 	sbc.w	r4, r4, r2
 8003414:	f04f 0100 	mov.w	r1, #0
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	00e2      	lsls	r2, r4, #3
 800341e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003422:	00d9      	lsls	r1, r3, #3
 8003424:	460b      	mov	r3, r1
 8003426:	4614      	mov	r4, r2
 8003428:	195b      	adds	r3, r3, r5
 800342a:	eb44 0406 	adc.w	r4, r4, r6
 800342e:	f04f 0100 	mov.w	r1, #0
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	02a2      	lsls	r2, r4, #10
 8003438:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800343c:	0299      	lsls	r1, r3, #10
 800343e:	460b      	mov	r3, r1
 8003440:	4614      	mov	r4, r2
 8003442:	4618      	mov	r0, r3
 8003444:	4621      	mov	r1, r4
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f04f 0400 	mov.w	r4, #0
 800344c:	461a      	mov	r2, r3
 800344e:	4623      	mov	r3, r4
 8003450:	f7fc ff66 	bl	8000320 <__aeabi_uldivmod>
 8003454:	4603      	mov	r3, r0
 8003456:	460c      	mov	r4, r1
 8003458:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800345a:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HAL_RCC_GetSysClockFreq+0x158>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	0c1b      	lsrs	r3, r3, #16
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	3301      	adds	r3, #1
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003472:	60bb      	str	r3, [r7, #8]
      break;
 8003474:	e002      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003476:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003478:	60bb      	str	r3, [r7, #8]
      break;
 800347a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800347c:	68bb      	ldr	r3, [r7, #8]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003486:	bf00      	nop
 8003488:	40023800 	.word	0x40023800
 800348c:	00f42400 	.word	0x00f42400
 8003490:	017d7840 	.word	0x017d7840

08003494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003498:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20000010 	.word	0x20000010

080034ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034b0:	f7ff fff0 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034b4:	4601      	mov	r1, r0
 80034b6:	4b05      	ldr	r3, [pc, #20]	; (80034cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	0a9b      	lsrs	r3, r3, #10
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	4a03      	ldr	r2, [pc, #12]	; (80034d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034c2:	5cd3      	ldrb	r3, [r2, r3]
 80034c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40023800 	.word	0x40023800
 80034d0:	0800a354 	.word	0x0800a354

080034d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034d8:	f7ff ffdc 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034dc:	4601      	mov	r1, r0
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0b5b      	lsrs	r3, r3, #13
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4a03      	ldr	r2, [pc, #12]	; (80034f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ea:	5cd3      	ldrb	r3, [r2, r3]
 80034ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40023800 	.word	0x40023800
 80034f8:	0800a354 	.word	0x0800a354

080034fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	220f      	movs	r2, #15
 800350a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800350c:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_RCC_GetClockConfig+0x5c>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0203 	and.w	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003518:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <HAL_RCC_GetClockConfig+0x5c>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <HAL_RCC_GetClockConfig+0x5c>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003530:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_RCC_GetClockConfig+0x5c>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	08db      	lsrs	r3, r3, #3
 8003536:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800353e:	4b07      	ldr	r3, [pc, #28]	; (800355c <HAL_RCC_GetClockConfig+0x60>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 020f 	and.w	r2, r3, #15
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	601a      	str	r2, [r3, #0]
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800
 800355c:	40023c00 	.word	0x40023c00

08003560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e01d      	b.n	80035ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f815 	bl	80035b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3304      	adds	r3, #4
 800359c:	4619      	mov	r1, r3
 800359e:	4610      	mov	r0, r2
 80035a0:	f000 fa96 	bl	8003ad0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b085      	sub	sp, #20
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0201 	orr.w	r2, r2, #1
 80035e0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2b06      	cmp	r3, #6
 80035f2:	d007      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e01d      	b.n	8003660 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d106      	bne.n	800363e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7fd fc7f 	bl	8000f3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2202      	movs	r2, #2
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3304      	adds	r3, #4
 800364e:	4619      	mov	r1, r3
 8003650:	4610      	mov	r0, r2
 8003652:	f000 fa3d 	bl	8003ad0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2201      	movs	r2, #1
 8003678:	6839      	ldr	r1, [r7, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fc78 	bl	8003f70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a15      	ldr	r2, [pc, #84]	; (80036dc <HAL_TIM_PWM_Start+0x74>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d004      	beq.n	8003694 <HAL_TIM_PWM_Start+0x2c>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a14      	ldr	r2, [pc, #80]	; (80036e0 <HAL_TIM_PWM_Start+0x78>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d101      	bne.n	8003698 <HAL_TIM_PWM_Start+0x30>
 8003694:	2301      	movs	r3, #1
 8003696:	e000      	b.n	800369a <HAL_TIM_PWM_Start+0x32>
 8003698:	2300      	movs	r3, #0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d007      	beq.n	80036ae <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b06      	cmp	r3, #6
 80036be:	d007      	beq.n	80036d0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40010000 	.word	0x40010000
 80036e0:	40010400 	.word	0x40010400

080036e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d122      	bne.n	8003740 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b02      	cmp	r3, #2
 8003706:	d11b      	bne.n	8003740 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0202 	mvn.w	r2, #2
 8003710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f9b4 	bl	8003a94 <HAL_TIM_IC_CaptureCallback>
 800372c:	e005      	b.n	800373a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f9a6 	bl	8003a80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f9b7 	bl	8003aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b04      	cmp	r3, #4
 800374c:	d122      	bne.n	8003794 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b04      	cmp	r3, #4
 800375a:	d11b      	bne.n	8003794 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0204 	mvn.w	r2, #4
 8003764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2202      	movs	r2, #2
 800376a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f98a 	bl	8003a94 <HAL_TIM_IC_CaptureCallback>
 8003780:	e005      	b.n	800378e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f97c 	bl	8003a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f98d 	bl	8003aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d122      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d11b      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0208 	mvn.w	r2, #8
 80037b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2204      	movs	r2, #4
 80037be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f960 	bl	8003a94 <HAL_TIM_IC_CaptureCallback>
 80037d4:	e005      	b.n	80037e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f952 	bl	8003a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f963 	bl	8003aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b10      	cmp	r3, #16
 80037f4:	d122      	bne.n	800383c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b10      	cmp	r3, #16
 8003802:	d11b      	bne.n	800383c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0210 	mvn.w	r2, #16
 800380c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2208      	movs	r2, #8
 8003812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f936 	bl	8003a94 <HAL_TIM_IC_CaptureCallback>
 8003828:	e005      	b.n	8003836 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f928 	bl	8003a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f939 	bl	8003aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b01      	cmp	r3, #1
 8003848:	d10e      	bne.n	8003868 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d107      	bne.n	8003868 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0201 	mvn.w	r2, #1
 8003860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fd f9f6 	bl	8000c54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003872:	2b80      	cmp	r3, #128	; 0x80
 8003874:	d10e      	bne.n	8003894 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003880:	2b80      	cmp	r3, #128	; 0x80
 8003882:	d107      	bne.n	8003894 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800388c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fc6c 	bl	800416c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389e:	2b40      	cmp	r3, #64	; 0x40
 80038a0:	d10e      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	d107      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f8fe 	bl	8003abc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b20      	cmp	r3, #32
 80038cc:	d10e      	bne.n	80038ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d107      	bne.n	80038ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0220 	mvn.w	r2, #32
 80038e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fc36 	bl	8004158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003906:	2b01      	cmp	r3, #1
 8003908:	d101      	bne.n	800390e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800390a:	2302      	movs	r3, #2
 800390c:	e0b4      	b.n	8003a78 <HAL_TIM_PWM_ConfigChannel+0x184>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2202      	movs	r2, #2
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b0c      	cmp	r3, #12
 8003922:	f200 809f 	bhi.w	8003a64 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003926:	a201      	add	r2, pc, #4	; (adr r2, 800392c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392c:	08003961 	.word	0x08003961
 8003930:	08003a65 	.word	0x08003a65
 8003934:	08003a65 	.word	0x08003a65
 8003938:	08003a65 	.word	0x08003a65
 800393c:	080039a1 	.word	0x080039a1
 8003940:	08003a65 	.word	0x08003a65
 8003944:	08003a65 	.word	0x08003a65
 8003948:	08003a65 	.word	0x08003a65
 800394c:	080039e3 	.word	0x080039e3
 8003950:	08003a65 	.word	0x08003a65
 8003954:	08003a65 	.word	0x08003a65
 8003958:	08003a65 	.word	0x08003a65
 800395c:	08003a23 	.word	0x08003a23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	4618      	mov	r0, r3
 8003968:	f000 f952 	bl	8003c10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0208 	orr.w	r2, r2, #8
 800397a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699a      	ldr	r2, [r3, #24]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0204 	bic.w	r2, r2, #4
 800398a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6999      	ldr	r1, [r3, #24]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	619a      	str	r2, [r3, #24]
      break;
 800399e:	e062      	b.n	8003a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 f9a2 	bl	8003cf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699a      	ldr	r2, [r3, #24]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6999      	ldr	r1, [r3, #24]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	021a      	lsls	r2, r3, #8
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	619a      	str	r2, [r3, #24]
      break;
 80039e0:	e041      	b.n	8003a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68b9      	ldr	r1, [r7, #8]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 f9f7 	bl	8003ddc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69da      	ldr	r2, [r3, #28]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0208 	orr.w	r2, r2, #8
 80039fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69da      	ldr	r2, [r3, #28]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0204 	bic.w	r2, r2, #4
 8003a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69d9      	ldr	r1, [r3, #28]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	691a      	ldr	r2, [r3, #16]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	61da      	str	r2, [r3, #28]
      break;
 8003a20:	e021      	b.n	8003a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68b9      	ldr	r1, [r7, #8]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 fa4b 	bl	8003ec4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69da      	ldr	r2, [r3, #28]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69da      	ldr	r2, [r3, #28]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69d9      	ldr	r1, [r3, #28]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	021a      	lsls	r2, r3, #8
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	61da      	str	r2, [r3, #28]
      break;
 8003a62:	e000      	b.n	8003a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003a64:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a40      	ldr	r2, [pc, #256]	; (8003be4 <TIM_Base_SetConfig+0x114>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d013      	beq.n	8003b10 <TIM_Base_SetConfig+0x40>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aee:	d00f      	beq.n	8003b10 <TIM_Base_SetConfig+0x40>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a3d      	ldr	r2, [pc, #244]	; (8003be8 <TIM_Base_SetConfig+0x118>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00b      	beq.n	8003b10 <TIM_Base_SetConfig+0x40>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a3c      	ldr	r2, [pc, #240]	; (8003bec <TIM_Base_SetConfig+0x11c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d007      	beq.n	8003b10 <TIM_Base_SetConfig+0x40>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a3b      	ldr	r2, [pc, #236]	; (8003bf0 <TIM_Base_SetConfig+0x120>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d003      	beq.n	8003b10 <TIM_Base_SetConfig+0x40>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a3a      	ldr	r2, [pc, #232]	; (8003bf4 <TIM_Base_SetConfig+0x124>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d108      	bne.n	8003b22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a2f      	ldr	r2, [pc, #188]	; (8003be4 <TIM_Base_SetConfig+0x114>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d02b      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b30:	d027      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a2c      	ldr	r2, [pc, #176]	; (8003be8 <TIM_Base_SetConfig+0x118>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d023      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a2b      	ldr	r2, [pc, #172]	; (8003bec <TIM_Base_SetConfig+0x11c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d01f      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a2a      	ldr	r2, [pc, #168]	; (8003bf0 <TIM_Base_SetConfig+0x120>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d01b      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a29      	ldr	r2, [pc, #164]	; (8003bf4 <TIM_Base_SetConfig+0x124>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d017      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a28      	ldr	r2, [pc, #160]	; (8003bf8 <TIM_Base_SetConfig+0x128>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d013      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a27      	ldr	r2, [pc, #156]	; (8003bfc <TIM_Base_SetConfig+0x12c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00f      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a26      	ldr	r2, [pc, #152]	; (8003c00 <TIM_Base_SetConfig+0x130>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00b      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a25      	ldr	r2, [pc, #148]	; (8003c04 <TIM_Base_SetConfig+0x134>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d007      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a24      	ldr	r2, [pc, #144]	; (8003c08 <TIM_Base_SetConfig+0x138>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d003      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a23      	ldr	r2, [pc, #140]	; (8003c0c <TIM_Base_SetConfig+0x13c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d108      	bne.n	8003b94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a0a      	ldr	r2, [pc, #40]	; (8003be4 <TIM_Base_SetConfig+0x114>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <TIM_Base_SetConfig+0xf8>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a0c      	ldr	r2, [pc, #48]	; (8003bf4 <TIM_Base_SetConfig+0x124>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d103      	bne.n	8003bd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	615a      	str	r2, [r3, #20]
}
 8003bd6:	bf00      	nop
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40010000 	.word	0x40010000
 8003be8:	40000400 	.word	0x40000400
 8003bec:	40000800 	.word	0x40000800
 8003bf0:	40000c00 	.word	0x40000c00
 8003bf4:	40010400 	.word	0x40010400
 8003bf8:	40014000 	.word	0x40014000
 8003bfc:	40014400 	.word	0x40014400
 8003c00:	40014800 	.word	0x40014800
 8003c04:	40001800 	.word	0x40001800
 8003c08:	40001c00 	.word	0x40001c00
 8003c0c:	40002000 	.word	0x40002000

08003c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	f023 0201 	bic.w	r2, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0303 	bic.w	r3, r3, #3
 8003c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f023 0302 	bic.w	r3, r3, #2
 8003c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a20      	ldr	r2, [pc, #128]	; (8003ce8 <TIM_OC1_SetConfig+0xd8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d003      	beq.n	8003c74 <TIM_OC1_SetConfig+0x64>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a1f      	ldr	r2, [pc, #124]	; (8003cec <TIM_OC1_SetConfig+0xdc>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d10c      	bne.n	8003c8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f023 0308 	bic.w	r3, r3, #8
 8003c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f023 0304 	bic.w	r3, r3, #4
 8003c8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a15      	ldr	r2, [pc, #84]	; (8003ce8 <TIM_OC1_SetConfig+0xd8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d003      	beq.n	8003c9e <TIM_OC1_SetConfig+0x8e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a14      	ldr	r2, [pc, #80]	; (8003cec <TIM_OC1_SetConfig+0xdc>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d111      	bne.n	8003cc2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	621a      	str	r2, [r3, #32]
}
 8003cdc:	bf00      	nop
 8003cde:	371c      	adds	r7, #28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	40010000 	.word	0x40010000
 8003cec:	40010400 	.word	0x40010400

08003cf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	f023 0210 	bic.w	r2, r3, #16
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	021b      	lsls	r3, r3, #8
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f023 0320 	bic.w	r3, r3, #32
 8003d3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a22      	ldr	r2, [pc, #136]	; (8003dd4 <TIM_OC2_SetConfig+0xe4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d003      	beq.n	8003d58 <TIM_OC2_SetConfig+0x68>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a21      	ldr	r2, [pc, #132]	; (8003dd8 <TIM_OC2_SetConfig+0xe8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d10d      	bne.n	8003d74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a17      	ldr	r2, [pc, #92]	; (8003dd4 <TIM_OC2_SetConfig+0xe4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d003      	beq.n	8003d84 <TIM_OC2_SetConfig+0x94>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a16      	ldr	r2, [pc, #88]	; (8003dd8 <TIM_OC2_SetConfig+0xe8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d113      	bne.n	8003dac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	621a      	str	r2, [r3, #32]
}
 8003dc6:	bf00      	nop
 8003dc8:	371c      	adds	r7, #28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40010000 	.word	0x40010000
 8003dd8:	40010400 	.word	0x40010400

08003ddc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0303 	bic.w	r3, r3, #3
 8003e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a21      	ldr	r2, [pc, #132]	; (8003ebc <TIM_OC3_SetConfig+0xe0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d003      	beq.n	8003e42 <TIM_OC3_SetConfig+0x66>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a20      	ldr	r2, [pc, #128]	; (8003ec0 <TIM_OC3_SetConfig+0xe4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d10d      	bne.n	8003e5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	021b      	lsls	r3, r3, #8
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a16      	ldr	r2, [pc, #88]	; (8003ebc <TIM_OC3_SetConfig+0xe0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d003      	beq.n	8003e6e <TIM_OC3_SetConfig+0x92>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <TIM_OC3_SetConfig+0xe4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d113      	bne.n	8003e96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	621a      	str	r2, [r3, #32]
}
 8003eb0:	bf00      	nop
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	40010000 	.word	0x40010000
 8003ec0:	40010400 	.word	0x40010400

08003ec4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	031b      	lsls	r3, r3, #12
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a12      	ldr	r2, [pc, #72]	; (8003f68 <TIM_OC4_SetConfig+0xa4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d003      	beq.n	8003f2c <TIM_OC4_SetConfig+0x68>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a11      	ldr	r2, [pc, #68]	; (8003f6c <TIM_OC4_SetConfig+0xa8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d109      	bne.n	8003f40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	019b      	lsls	r3, r3, #6
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	621a      	str	r2, [r3, #32]
}
 8003f5a:	bf00      	nop
 8003f5c:	371c      	adds	r7, #28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40010000 	.word	0x40010000
 8003f6c:	40010400 	.word	0x40010400

08003f70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	2201      	movs	r2, #1
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a1a      	ldr	r2, [r3, #32]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	401a      	ands	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a1a      	ldr	r2, [r3, #32]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	621a      	str	r2, [r3, #32]
}
 8003fae:	bf00      	nop
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
	...

08003fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e05a      	b.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a21      	ldr	r2, [pc, #132]	; (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d022      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004020:	d01d      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1d      	ldr	r2, [pc, #116]	; (800409c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d018      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a1b      	ldr	r2, [pc, #108]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a1a      	ldr	r2, [pc, #104]	; (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00e      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a18      	ldr	r2, [pc, #96]	; (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d009      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a17      	ldr	r2, [pc, #92]	; (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d004      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a15      	ldr	r2, [pc, #84]	; (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d10c      	bne.n	8004078 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004064:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	4313      	orrs	r3, r2
 800406e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40010000 	.word	0x40010000
 800409c:	40000400 	.word	0x40000400
 80040a0:	40000800 	.word	0x40000800
 80040a4:	40000c00 	.word	0x40000c00
 80040a8:	40010400 	.word	0x40010400
 80040ac:	40014000 	.word	0x40014000
 80040b0:	40001800 	.word	0x40001800

080040b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e03d      	b.n	800414c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4313      	orrs	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e03f      	b.n	8004212 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fc ff24 	bl	8000ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2224      	movs	r2, #36	; 0x24
 80041b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 fa69 	bl	800469c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695a      	ldr	r2, [r3, #20]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b088      	sub	sp, #32
 800421e:	af02      	add	r7, sp, #8
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	603b      	str	r3, [r7, #0]
 8004226:	4613      	mov	r3, r2
 8004228:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b20      	cmp	r3, #32
 8004238:	f040 8083 	bne.w	8004342 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <HAL_UART_Transmit+0x2e>
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e07b      	b.n	8004344 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <HAL_UART_Transmit+0x40>
 8004256:	2302      	movs	r3, #2
 8004258:	e074      	b.n	8004344 <HAL_UART_Transmit+0x12a>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2221      	movs	r2, #33	; 0x21
 800426c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004270:	f7fd f8c8 	bl	8001404 <HAL_GetTick>
 8004274:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	88fa      	ldrh	r2, [r7, #6]
 800427a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	88fa      	ldrh	r2, [r7, #6]
 8004280:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800428a:	e042      	b.n	8004312 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a2:	d122      	bne.n	80042ea <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2200      	movs	r2, #0
 80042ac:	2180      	movs	r1, #128	; 0x80
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 f976 	bl	80045a0 <UART_WaitOnFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e042      	b.n	8004344 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042d0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d103      	bne.n	80042e2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	3302      	adds	r3, #2
 80042de:	60bb      	str	r3, [r7, #8]
 80042e0:	e017      	b.n	8004312 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	3301      	adds	r3, #1
 80042e6:	60bb      	str	r3, [r7, #8]
 80042e8:	e013      	b.n	8004312 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2200      	movs	r2, #0
 80042f2:	2180      	movs	r1, #128	; 0x80
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 f953 	bl	80045a0 <UART_WaitOnFlagUntilTimeout>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e01f      	b.n	8004344 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	60ba      	str	r2, [r7, #8]
 800430a:	781a      	ldrb	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004316:	b29b      	uxth	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1b7      	bne.n	800428c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2200      	movs	r2, #0
 8004324:	2140      	movs	r1, #64	; 0x40
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 f93a 	bl	80045a0 <UART_WaitOnFlagUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e006      	b.n	8004344 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	e000      	b.n	8004344 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004342:	2302      	movs	r3, #2
  }
}
 8004344:	4618      	mov	r0, r3
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	4613      	mov	r3, r2
 8004358:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b20      	cmp	r3, #32
 8004364:	d166      	bne.n	8004434 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d002      	beq.n	8004372 <HAL_UART_Receive_DMA+0x26>
 800436c:	88fb      	ldrh	r3, [r7, #6]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e05f      	b.n	8004436 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_UART_Receive_DMA+0x38>
 8004380:	2302      	movs	r3, #2
 8004382:	e058      	b.n	8004436 <HAL_UART_Receive_DMA+0xea>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	88fa      	ldrh	r2, [r7, #6]
 8004396:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2222      	movs	r2, #34	; 0x22
 80043a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043aa:	4a25      	ldr	r2, [pc, #148]	; (8004440 <HAL_UART_Receive_DMA+0xf4>)
 80043ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b2:	4a24      	ldr	r2, [pc, #144]	; (8004444 <HAL_UART_Receive_DMA+0xf8>)
 80043b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ba:	4a23      	ldr	r2, [pc, #140]	; (8004448 <HAL_UART_Receive_DMA+0xfc>)
 80043bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c2:	2200      	movs	r2, #0
 80043c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80043c6:	f107 0308 	add.w	r3, r7, #8
 80043ca:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3304      	adds	r3, #4
 80043d6:	4619      	mov	r1, r3
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	f7fd f9ad 	bl	800173c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80043e2:	2300      	movs	r3, #0
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800440e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695a      	ldr	r2, [r3, #20]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800442e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	e000      	b.n	8004436 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004434:	2302      	movs	r3, #2
  }
}
 8004436:	4618      	mov	r0, r3
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	08004489 	.word	0x08004489
 8004444:	080044f1 	.word	0x080044f1
 8004448:	0800450d 	.word	0x0800450d

0800444c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d11e      	bne.n	80044e2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044b8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695a      	ldr	r2, [r3, #20]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0201 	bic.w	r2, r2, #1
 80044c8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695a      	ldr	r2, [r3, #20]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f7ff ffb2 	bl	800444c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f7ff ffae 	bl	8004460 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004504:	bf00      	nop
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004514:	2300      	movs	r3, #0
 8004516:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004528:	2b80      	cmp	r3, #128	; 0x80
 800452a:	bf0c      	ite	eq
 800452c:	2301      	moveq	r3, #1
 800452e:	2300      	movne	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b21      	cmp	r3, #33	; 0x21
 800453e:	d108      	bne.n	8004552 <UART_DMAError+0x46>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2200      	movs	r2, #0
 800454a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800454c:	68b8      	ldr	r0, [r7, #8]
 800454e:	f000 f871 	bl	8004634 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455c:	2b40      	cmp	r3, #64	; 0x40
 800455e:	bf0c      	ite	eq
 8004560:	2301      	moveq	r3, #1
 8004562:	2300      	movne	r3, #0
 8004564:	b2db      	uxtb	r3, r3
 8004566:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b22      	cmp	r3, #34	; 0x22
 8004572:	d108      	bne.n	8004586 <UART_DMAError+0x7a>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d005      	beq.n	8004586 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2200      	movs	r2, #0
 800457e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004580:	68b8      	ldr	r0, [r7, #8]
 8004582:	f000 f86d 	bl	8004660 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458a:	f043 0210 	orr.w	r2, r3, #16
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004592:	68b8      	ldr	r0, [r7, #8]
 8004594:	f7ff ff6e 	bl	8004474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004598:	bf00      	nop
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	4613      	mov	r3, r2
 80045ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b0:	e02c      	b.n	800460c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d028      	beq.n	800460c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d007      	beq.n	80045d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80045c0:	f7fc ff20 	bl	8001404 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d21d      	bcs.n	800460c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045de:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695a      	ldr	r2, [r3, #20]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0201 	bic.w	r2, r2, #1
 80045ee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e00f      	b.n	800462c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	4013      	ands	r3, r2
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	429a      	cmp	r2, r3
 800461a:	bf0c      	ite	eq
 800461c:	2301      	moveq	r3, #1
 800461e:	2300      	movne	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	79fb      	ldrb	r3, [r7, #7]
 8004626:	429a      	cmp	r2, r3
 8004628:	d0c3      	beq.n	80045b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800464a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004676:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695a      	ldr	r2, [r3, #20]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0201 	bic.w	r2, r2, #1
 8004686:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800469c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a0:	b085      	sub	sp, #20
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80046de:	f023 030c 	bic.w	r3, r3, #12
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6812      	ldr	r2, [r2, #0]
 80046e6:	68f9      	ldr	r1, [r7, #12]
 80046e8:	430b      	orrs	r3, r1
 80046ea:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800470a:	f040 818b 	bne.w	8004a24 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4ac1      	ldr	r2, [pc, #772]	; (8004a18 <UART_SetConfig+0x37c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d005      	beq.n	8004724 <UART_SetConfig+0x88>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4abf      	ldr	r2, [pc, #764]	; (8004a1c <UART_SetConfig+0x380>)
 800471e:	4293      	cmp	r3, r2
 8004720:	f040 80bd 	bne.w	800489e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004724:	f7fe fed6 	bl	80034d4 <HAL_RCC_GetPCLK2Freq>
 8004728:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	461d      	mov	r5, r3
 800472e:	f04f 0600 	mov.w	r6, #0
 8004732:	46a8      	mov	r8, r5
 8004734:	46b1      	mov	r9, r6
 8004736:	eb18 0308 	adds.w	r3, r8, r8
 800473a:	eb49 0409 	adc.w	r4, r9, r9
 800473e:	4698      	mov	r8, r3
 8004740:	46a1      	mov	r9, r4
 8004742:	eb18 0805 	adds.w	r8, r8, r5
 8004746:	eb49 0906 	adc.w	r9, r9, r6
 800474a:	f04f 0100 	mov.w	r1, #0
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004756:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800475a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800475e:	4688      	mov	r8, r1
 8004760:	4691      	mov	r9, r2
 8004762:	eb18 0005 	adds.w	r0, r8, r5
 8004766:	eb49 0106 	adc.w	r1, r9, r6
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	461d      	mov	r5, r3
 8004770:	f04f 0600 	mov.w	r6, #0
 8004774:	196b      	adds	r3, r5, r5
 8004776:	eb46 0406 	adc.w	r4, r6, r6
 800477a:	461a      	mov	r2, r3
 800477c:	4623      	mov	r3, r4
 800477e:	f7fb fdcf 	bl	8000320 <__aeabi_uldivmod>
 8004782:	4603      	mov	r3, r0
 8004784:	460c      	mov	r4, r1
 8004786:	461a      	mov	r2, r3
 8004788:	4ba5      	ldr	r3, [pc, #660]	; (8004a20 <UART_SetConfig+0x384>)
 800478a:	fba3 2302 	umull	r2, r3, r3, r2
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	461d      	mov	r5, r3
 8004798:	f04f 0600 	mov.w	r6, #0
 800479c:	46a9      	mov	r9, r5
 800479e:	46b2      	mov	sl, r6
 80047a0:	eb19 0309 	adds.w	r3, r9, r9
 80047a4:	eb4a 040a 	adc.w	r4, sl, sl
 80047a8:	4699      	mov	r9, r3
 80047aa:	46a2      	mov	sl, r4
 80047ac:	eb19 0905 	adds.w	r9, r9, r5
 80047b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80047b4:	f04f 0100 	mov.w	r1, #0
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047c8:	4689      	mov	r9, r1
 80047ca:	4692      	mov	sl, r2
 80047cc:	eb19 0005 	adds.w	r0, r9, r5
 80047d0:	eb4a 0106 	adc.w	r1, sl, r6
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	461d      	mov	r5, r3
 80047da:	f04f 0600 	mov.w	r6, #0
 80047de:	196b      	adds	r3, r5, r5
 80047e0:	eb46 0406 	adc.w	r4, r6, r6
 80047e4:	461a      	mov	r2, r3
 80047e6:	4623      	mov	r3, r4
 80047e8:	f7fb fd9a 	bl	8000320 <__aeabi_uldivmod>
 80047ec:	4603      	mov	r3, r0
 80047ee:	460c      	mov	r4, r1
 80047f0:	461a      	mov	r2, r3
 80047f2:	4b8b      	ldr	r3, [pc, #556]	; (8004a20 <UART_SetConfig+0x384>)
 80047f4:	fba3 1302 	umull	r1, r3, r3, r2
 80047f8:	095b      	lsrs	r3, r3, #5
 80047fa:	2164      	movs	r1, #100	; 0x64
 80047fc:	fb01 f303 	mul.w	r3, r1, r3
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	3332      	adds	r3, #50	; 0x32
 8004806:	4a86      	ldr	r2, [pc, #536]	; (8004a20 <UART_SetConfig+0x384>)
 8004808:	fba2 2303 	umull	r2, r3, r2, r3
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004814:	4498      	add	r8, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	461d      	mov	r5, r3
 800481a:	f04f 0600 	mov.w	r6, #0
 800481e:	46a9      	mov	r9, r5
 8004820:	46b2      	mov	sl, r6
 8004822:	eb19 0309 	adds.w	r3, r9, r9
 8004826:	eb4a 040a 	adc.w	r4, sl, sl
 800482a:	4699      	mov	r9, r3
 800482c:	46a2      	mov	sl, r4
 800482e:	eb19 0905 	adds.w	r9, r9, r5
 8004832:	eb4a 0a06 	adc.w	sl, sl, r6
 8004836:	f04f 0100 	mov.w	r1, #0
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004842:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004846:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800484a:	4689      	mov	r9, r1
 800484c:	4692      	mov	sl, r2
 800484e:	eb19 0005 	adds.w	r0, r9, r5
 8004852:	eb4a 0106 	adc.w	r1, sl, r6
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	461d      	mov	r5, r3
 800485c:	f04f 0600 	mov.w	r6, #0
 8004860:	196b      	adds	r3, r5, r5
 8004862:	eb46 0406 	adc.w	r4, r6, r6
 8004866:	461a      	mov	r2, r3
 8004868:	4623      	mov	r3, r4
 800486a:	f7fb fd59 	bl	8000320 <__aeabi_uldivmod>
 800486e:	4603      	mov	r3, r0
 8004870:	460c      	mov	r4, r1
 8004872:	461a      	mov	r2, r3
 8004874:	4b6a      	ldr	r3, [pc, #424]	; (8004a20 <UART_SetConfig+0x384>)
 8004876:	fba3 1302 	umull	r1, r3, r3, r2
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	2164      	movs	r1, #100	; 0x64
 800487e:	fb01 f303 	mul.w	r3, r1, r3
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	3332      	adds	r3, #50	; 0x32
 8004888:	4a65      	ldr	r2, [pc, #404]	; (8004a20 <UART_SetConfig+0x384>)
 800488a:	fba2 2303 	umull	r2, r3, r2, r3
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	f003 0207 	and.w	r2, r3, #7
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4442      	add	r2, r8
 800489a:	609a      	str	r2, [r3, #8]
 800489c:	e26f      	b.n	8004d7e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800489e:	f7fe fe05 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 80048a2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	461d      	mov	r5, r3
 80048a8:	f04f 0600 	mov.w	r6, #0
 80048ac:	46a8      	mov	r8, r5
 80048ae:	46b1      	mov	r9, r6
 80048b0:	eb18 0308 	adds.w	r3, r8, r8
 80048b4:	eb49 0409 	adc.w	r4, r9, r9
 80048b8:	4698      	mov	r8, r3
 80048ba:	46a1      	mov	r9, r4
 80048bc:	eb18 0805 	adds.w	r8, r8, r5
 80048c0:	eb49 0906 	adc.w	r9, r9, r6
 80048c4:	f04f 0100 	mov.w	r1, #0
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80048d0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80048d4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80048d8:	4688      	mov	r8, r1
 80048da:	4691      	mov	r9, r2
 80048dc:	eb18 0005 	adds.w	r0, r8, r5
 80048e0:	eb49 0106 	adc.w	r1, r9, r6
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	461d      	mov	r5, r3
 80048ea:	f04f 0600 	mov.w	r6, #0
 80048ee:	196b      	adds	r3, r5, r5
 80048f0:	eb46 0406 	adc.w	r4, r6, r6
 80048f4:	461a      	mov	r2, r3
 80048f6:	4623      	mov	r3, r4
 80048f8:	f7fb fd12 	bl	8000320 <__aeabi_uldivmod>
 80048fc:	4603      	mov	r3, r0
 80048fe:	460c      	mov	r4, r1
 8004900:	461a      	mov	r2, r3
 8004902:	4b47      	ldr	r3, [pc, #284]	; (8004a20 <UART_SetConfig+0x384>)
 8004904:	fba3 2302 	umull	r2, r3, r3, r2
 8004908:	095b      	lsrs	r3, r3, #5
 800490a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	461d      	mov	r5, r3
 8004912:	f04f 0600 	mov.w	r6, #0
 8004916:	46a9      	mov	r9, r5
 8004918:	46b2      	mov	sl, r6
 800491a:	eb19 0309 	adds.w	r3, r9, r9
 800491e:	eb4a 040a 	adc.w	r4, sl, sl
 8004922:	4699      	mov	r9, r3
 8004924:	46a2      	mov	sl, r4
 8004926:	eb19 0905 	adds.w	r9, r9, r5
 800492a:	eb4a 0a06 	adc.w	sl, sl, r6
 800492e:	f04f 0100 	mov.w	r1, #0
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800493a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800493e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004942:	4689      	mov	r9, r1
 8004944:	4692      	mov	sl, r2
 8004946:	eb19 0005 	adds.w	r0, r9, r5
 800494a:	eb4a 0106 	adc.w	r1, sl, r6
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	461d      	mov	r5, r3
 8004954:	f04f 0600 	mov.w	r6, #0
 8004958:	196b      	adds	r3, r5, r5
 800495a:	eb46 0406 	adc.w	r4, r6, r6
 800495e:	461a      	mov	r2, r3
 8004960:	4623      	mov	r3, r4
 8004962:	f7fb fcdd 	bl	8000320 <__aeabi_uldivmod>
 8004966:	4603      	mov	r3, r0
 8004968:	460c      	mov	r4, r1
 800496a:	461a      	mov	r2, r3
 800496c:	4b2c      	ldr	r3, [pc, #176]	; (8004a20 <UART_SetConfig+0x384>)
 800496e:	fba3 1302 	umull	r1, r3, r3, r2
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	2164      	movs	r1, #100	; 0x64
 8004976:	fb01 f303 	mul.w	r3, r1, r3
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	3332      	adds	r3, #50	; 0x32
 8004980:	4a27      	ldr	r2, [pc, #156]	; (8004a20 <UART_SetConfig+0x384>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800498e:	4498      	add	r8, r3
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	461d      	mov	r5, r3
 8004994:	f04f 0600 	mov.w	r6, #0
 8004998:	46a9      	mov	r9, r5
 800499a:	46b2      	mov	sl, r6
 800499c:	eb19 0309 	adds.w	r3, r9, r9
 80049a0:	eb4a 040a 	adc.w	r4, sl, sl
 80049a4:	4699      	mov	r9, r3
 80049a6:	46a2      	mov	sl, r4
 80049a8:	eb19 0905 	adds.w	r9, r9, r5
 80049ac:	eb4a 0a06 	adc.w	sl, sl, r6
 80049b0:	f04f 0100 	mov.w	r1, #0
 80049b4:	f04f 0200 	mov.w	r2, #0
 80049b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049c4:	4689      	mov	r9, r1
 80049c6:	4692      	mov	sl, r2
 80049c8:	eb19 0005 	adds.w	r0, r9, r5
 80049cc:	eb4a 0106 	adc.w	r1, sl, r6
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	461d      	mov	r5, r3
 80049d6:	f04f 0600 	mov.w	r6, #0
 80049da:	196b      	adds	r3, r5, r5
 80049dc:	eb46 0406 	adc.w	r4, r6, r6
 80049e0:	461a      	mov	r2, r3
 80049e2:	4623      	mov	r3, r4
 80049e4:	f7fb fc9c 	bl	8000320 <__aeabi_uldivmod>
 80049e8:	4603      	mov	r3, r0
 80049ea:	460c      	mov	r4, r1
 80049ec:	461a      	mov	r2, r3
 80049ee:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <UART_SetConfig+0x384>)
 80049f0:	fba3 1302 	umull	r1, r3, r3, r2
 80049f4:	095b      	lsrs	r3, r3, #5
 80049f6:	2164      	movs	r1, #100	; 0x64
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	3332      	adds	r3, #50	; 0x32
 8004a02:	4a07      	ldr	r2, [pc, #28]	; (8004a20 <UART_SetConfig+0x384>)
 8004a04:	fba2 2303 	umull	r2, r3, r2, r3
 8004a08:	095b      	lsrs	r3, r3, #5
 8004a0a:	f003 0207 	and.w	r2, r3, #7
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4442      	add	r2, r8
 8004a14:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004a16:	e1b2      	b.n	8004d7e <UART_SetConfig+0x6e2>
 8004a18:	40011000 	.word	0x40011000
 8004a1c:	40011400 	.word	0x40011400
 8004a20:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4ad7      	ldr	r2, [pc, #860]	; (8004d88 <UART_SetConfig+0x6ec>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d005      	beq.n	8004a3a <UART_SetConfig+0x39e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4ad6      	ldr	r2, [pc, #856]	; (8004d8c <UART_SetConfig+0x6f0>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	f040 80d1 	bne.w	8004bdc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a3a:	f7fe fd4b 	bl	80034d4 <HAL_RCC_GetPCLK2Freq>
 8004a3e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	469a      	mov	sl, r3
 8004a44:	f04f 0b00 	mov.w	fp, #0
 8004a48:	46d0      	mov	r8, sl
 8004a4a:	46d9      	mov	r9, fp
 8004a4c:	eb18 0308 	adds.w	r3, r8, r8
 8004a50:	eb49 0409 	adc.w	r4, r9, r9
 8004a54:	4698      	mov	r8, r3
 8004a56:	46a1      	mov	r9, r4
 8004a58:	eb18 080a 	adds.w	r8, r8, sl
 8004a5c:	eb49 090b 	adc.w	r9, r9, fp
 8004a60:	f04f 0100 	mov.w	r1, #0
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a6c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a70:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a74:	4688      	mov	r8, r1
 8004a76:	4691      	mov	r9, r2
 8004a78:	eb1a 0508 	adds.w	r5, sl, r8
 8004a7c:	eb4b 0609 	adc.w	r6, fp, r9
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	4619      	mov	r1, r3
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	f04f 0400 	mov.w	r4, #0
 8004a92:	0094      	lsls	r4, r2, #2
 8004a94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a98:	008b      	lsls	r3, r1, #2
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	4623      	mov	r3, r4
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	4631      	mov	r1, r6
 8004aa2:	f7fb fc3d 	bl	8000320 <__aeabi_uldivmod>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	460c      	mov	r4, r1
 8004aaa:	461a      	mov	r2, r3
 8004aac:	4bb8      	ldr	r3, [pc, #736]	; (8004d90 <UART_SetConfig+0x6f4>)
 8004aae:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	469b      	mov	fp, r3
 8004abc:	f04f 0c00 	mov.w	ip, #0
 8004ac0:	46d9      	mov	r9, fp
 8004ac2:	46e2      	mov	sl, ip
 8004ac4:	eb19 0309 	adds.w	r3, r9, r9
 8004ac8:	eb4a 040a 	adc.w	r4, sl, sl
 8004acc:	4699      	mov	r9, r3
 8004ace:	46a2      	mov	sl, r4
 8004ad0:	eb19 090b 	adds.w	r9, r9, fp
 8004ad4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ad8:	f04f 0100 	mov.w	r1, #0
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ae4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ae8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004aec:	4689      	mov	r9, r1
 8004aee:	4692      	mov	sl, r2
 8004af0:	eb1b 0509 	adds.w	r5, fp, r9
 8004af4:	eb4c 060a 	adc.w	r6, ip, sl
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	4619      	mov	r1, r3
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	f04f 0400 	mov.w	r4, #0
 8004b0a:	0094      	lsls	r4, r2, #2
 8004b0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b10:	008b      	lsls	r3, r1, #2
 8004b12:	461a      	mov	r2, r3
 8004b14:	4623      	mov	r3, r4
 8004b16:	4628      	mov	r0, r5
 8004b18:	4631      	mov	r1, r6
 8004b1a:	f7fb fc01 	bl	8000320 <__aeabi_uldivmod>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	460c      	mov	r4, r1
 8004b22:	461a      	mov	r2, r3
 8004b24:	4b9a      	ldr	r3, [pc, #616]	; (8004d90 <UART_SetConfig+0x6f4>)
 8004b26:	fba3 1302 	umull	r1, r3, r3, r2
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	2164      	movs	r1, #100	; 0x64
 8004b2e:	fb01 f303 	mul.w	r3, r1, r3
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	3332      	adds	r3, #50	; 0x32
 8004b38:	4a95      	ldr	r2, [pc, #596]	; (8004d90 <UART_SetConfig+0x6f4>)
 8004b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b44:	4498      	add	r8, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	469b      	mov	fp, r3
 8004b4a:	f04f 0c00 	mov.w	ip, #0
 8004b4e:	46d9      	mov	r9, fp
 8004b50:	46e2      	mov	sl, ip
 8004b52:	eb19 0309 	adds.w	r3, r9, r9
 8004b56:	eb4a 040a 	adc.w	r4, sl, sl
 8004b5a:	4699      	mov	r9, r3
 8004b5c:	46a2      	mov	sl, r4
 8004b5e:	eb19 090b 	adds.w	r9, r9, fp
 8004b62:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b66:	f04f 0100 	mov.w	r1, #0
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b7a:	4689      	mov	r9, r1
 8004b7c:	4692      	mov	sl, r2
 8004b7e:	eb1b 0509 	adds.w	r5, fp, r9
 8004b82:	eb4c 060a 	adc.w	r6, ip, sl
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	f04f 0400 	mov.w	r4, #0
 8004b98:	0094      	lsls	r4, r2, #2
 8004b9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b9e:	008b      	lsls	r3, r1, #2
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	4623      	mov	r3, r4
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	4631      	mov	r1, r6
 8004ba8:	f7fb fbba 	bl	8000320 <__aeabi_uldivmod>
 8004bac:	4603      	mov	r3, r0
 8004bae:	460c      	mov	r4, r1
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4b77      	ldr	r3, [pc, #476]	; (8004d90 <UART_SetConfig+0x6f4>)
 8004bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	2164      	movs	r1, #100	; 0x64
 8004bbc:	fb01 f303 	mul.w	r3, r1, r3
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	3332      	adds	r3, #50	; 0x32
 8004bc6:	4a72      	ldr	r2, [pc, #456]	; (8004d90 <UART_SetConfig+0x6f4>)
 8004bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bcc:	095b      	lsrs	r3, r3, #5
 8004bce:	f003 020f 	and.w	r2, r3, #15
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4442      	add	r2, r8
 8004bd8:	609a      	str	r2, [r3, #8]
 8004bda:	e0d0      	b.n	8004d7e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bdc:	f7fe fc66 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 8004be0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	469a      	mov	sl, r3
 8004be6:	f04f 0b00 	mov.w	fp, #0
 8004bea:	46d0      	mov	r8, sl
 8004bec:	46d9      	mov	r9, fp
 8004bee:	eb18 0308 	adds.w	r3, r8, r8
 8004bf2:	eb49 0409 	adc.w	r4, r9, r9
 8004bf6:	4698      	mov	r8, r3
 8004bf8:	46a1      	mov	r9, r4
 8004bfa:	eb18 080a 	adds.w	r8, r8, sl
 8004bfe:	eb49 090b 	adc.w	r9, r9, fp
 8004c02:	f04f 0100 	mov.w	r1, #0
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c0e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c12:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c16:	4688      	mov	r8, r1
 8004c18:	4691      	mov	r9, r2
 8004c1a:	eb1a 0508 	adds.w	r5, sl, r8
 8004c1e:	eb4b 0609 	adc.w	r6, fp, r9
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	4619      	mov	r1, r3
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	f04f 0400 	mov.w	r4, #0
 8004c34:	0094      	lsls	r4, r2, #2
 8004c36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c3a:	008b      	lsls	r3, r1, #2
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4623      	mov	r3, r4
 8004c40:	4628      	mov	r0, r5
 8004c42:	4631      	mov	r1, r6
 8004c44:	f7fb fb6c 	bl	8000320 <__aeabi_uldivmod>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	460c      	mov	r4, r1
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	4b50      	ldr	r3, [pc, #320]	; (8004d90 <UART_SetConfig+0x6f4>)
 8004c50:	fba3 2302 	umull	r2, r3, r3, r2
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	469b      	mov	fp, r3
 8004c5e:	f04f 0c00 	mov.w	ip, #0
 8004c62:	46d9      	mov	r9, fp
 8004c64:	46e2      	mov	sl, ip
 8004c66:	eb19 0309 	adds.w	r3, r9, r9
 8004c6a:	eb4a 040a 	adc.w	r4, sl, sl
 8004c6e:	4699      	mov	r9, r3
 8004c70:	46a2      	mov	sl, r4
 8004c72:	eb19 090b 	adds.w	r9, r9, fp
 8004c76:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c7a:	f04f 0100 	mov.w	r1, #0
 8004c7e:	f04f 0200 	mov.w	r2, #0
 8004c82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c8e:	4689      	mov	r9, r1
 8004c90:	4692      	mov	sl, r2
 8004c92:	eb1b 0509 	adds.w	r5, fp, r9
 8004c96:	eb4c 060a 	adc.w	r6, ip, sl
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	f04f 0400 	mov.w	r4, #0
 8004cac:	0094      	lsls	r4, r2, #2
 8004cae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cb2:	008b      	lsls	r3, r1, #2
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	4623      	mov	r3, r4
 8004cb8:	4628      	mov	r0, r5
 8004cba:	4631      	mov	r1, r6
 8004cbc:	f7fb fb30 	bl	8000320 <__aeabi_uldivmod>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	4b32      	ldr	r3, [pc, #200]	; (8004d90 <UART_SetConfig+0x6f4>)
 8004cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8004ccc:	095b      	lsrs	r3, r3, #5
 8004cce:	2164      	movs	r1, #100	; 0x64
 8004cd0:	fb01 f303 	mul.w	r3, r1, r3
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	3332      	adds	r3, #50	; 0x32
 8004cda:	4a2d      	ldr	r2, [pc, #180]	; (8004d90 <UART_SetConfig+0x6f4>)
 8004cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce0:	095b      	lsrs	r3, r3, #5
 8004ce2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ce6:	4498      	add	r8, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	469b      	mov	fp, r3
 8004cec:	f04f 0c00 	mov.w	ip, #0
 8004cf0:	46d9      	mov	r9, fp
 8004cf2:	46e2      	mov	sl, ip
 8004cf4:	eb19 0309 	adds.w	r3, r9, r9
 8004cf8:	eb4a 040a 	adc.w	r4, sl, sl
 8004cfc:	4699      	mov	r9, r3
 8004cfe:	46a2      	mov	sl, r4
 8004d00:	eb19 090b 	adds.w	r9, r9, fp
 8004d04:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d08:	f04f 0100 	mov.w	r1, #0
 8004d0c:	f04f 0200 	mov.w	r2, #0
 8004d10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d1c:	4689      	mov	r9, r1
 8004d1e:	4692      	mov	sl, r2
 8004d20:	eb1b 0509 	adds.w	r5, fp, r9
 8004d24:	eb4c 060a 	adc.w	r6, ip, sl
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	f04f 0300 	mov.w	r3, #0
 8004d36:	f04f 0400 	mov.w	r4, #0
 8004d3a:	0094      	lsls	r4, r2, #2
 8004d3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d40:	008b      	lsls	r3, r1, #2
 8004d42:	461a      	mov	r2, r3
 8004d44:	4623      	mov	r3, r4
 8004d46:	4628      	mov	r0, r5
 8004d48:	4631      	mov	r1, r6
 8004d4a:	f7fb fae9 	bl	8000320 <__aeabi_uldivmod>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	460c      	mov	r4, r1
 8004d52:	461a      	mov	r2, r3
 8004d54:	4b0e      	ldr	r3, [pc, #56]	; (8004d90 <UART_SetConfig+0x6f4>)
 8004d56:	fba3 1302 	umull	r1, r3, r3, r2
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	2164      	movs	r1, #100	; 0x64
 8004d5e:	fb01 f303 	mul.w	r3, r1, r3
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	011b      	lsls	r3, r3, #4
 8004d66:	3332      	adds	r3, #50	; 0x32
 8004d68:	4a09      	ldr	r2, [pc, #36]	; (8004d90 <UART_SetConfig+0x6f4>)
 8004d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6e:	095b      	lsrs	r3, r3, #5
 8004d70:	f003 020f 	and.w	r2, r3, #15
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4442      	add	r2, r8
 8004d7a:	609a      	str	r2, [r3, #8]
}
 8004d7c:	e7ff      	b.n	8004d7e <UART_SetConfig+0x6e2>
 8004d7e:	bf00      	nop
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d88:	40011000 	.word	0x40011000
 8004d8c:	40011400 	.word	0x40011400
 8004d90:	51eb851f 	.word	0x51eb851f

08004d94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004d98:	bf00      	nop
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
	...

08004da4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004daa:	f3ef 8305 	mrs	r3, IPSR
 8004dae:	60bb      	str	r3, [r7, #8]
  return(result);
 8004db0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10f      	bne.n	8004dd6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004db6:	f3ef 8310 	mrs	r3, PRIMASK
 8004dba:	607b      	str	r3, [r7, #4]
  return(result);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d105      	bne.n	8004dce <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004dc2:	f3ef 8311 	mrs	r3, BASEPRI
 8004dc6:	603b      	str	r3, [r7, #0]
  return(result);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d007      	beq.n	8004dde <osKernelInitialize+0x3a>
 8004dce:	4b0e      	ldr	r3, [pc, #56]	; (8004e08 <osKernelInitialize+0x64>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d103      	bne.n	8004dde <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004dd6:	f06f 0305 	mvn.w	r3, #5
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	e00c      	b.n	8004df8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004dde:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <osKernelInitialize+0x64>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d105      	bne.n	8004df2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004de6:	4b08      	ldr	r3, [pc, #32]	; (8004e08 <osKernelInitialize+0x64>)
 8004de8:	2201      	movs	r2, #1
 8004dea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	e002      	b.n	8004df8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004df2:	f04f 33ff 	mov.w	r3, #4294967295
 8004df6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004df8:	68fb      	ldr	r3, [r7, #12]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	200001bc 	.word	0x200001bc

08004e0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e12:	f3ef 8305 	mrs	r3, IPSR
 8004e16:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10f      	bne.n	8004e3e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e22:	607b      	str	r3, [r7, #4]
  return(result);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d105      	bne.n	8004e36 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e2a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e2e:	603b      	str	r3, [r7, #0]
  return(result);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d007      	beq.n	8004e46 <osKernelStart+0x3a>
 8004e36:	4b0f      	ldr	r3, [pc, #60]	; (8004e74 <osKernelStart+0x68>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d103      	bne.n	8004e46 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004e3e:	f06f 0305 	mvn.w	r3, #5
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	e010      	b.n	8004e68 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004e46:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <osKernelStart+0x68>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d109      	bne.n	8004e62 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004e4e:	f7ff ffa1 	bl	8004d94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004e52:	4b08      	ldr	r3, [pc, #32]	; (8004e74 <osKernelStart+0x68>)
 8004e54:	2202      	movs	r2, #2
 8004e56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004e58:	f001 fb96 	bl	8006588 <vTaskStartScheduler>
      stat = osOK;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	e002      	b.n	8004e68 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004e62:	f04f 33ff 	mov.w	r3, #4294967295
 8004e66:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004e68:	68fb      	ldr	r3, [r7, #12]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	200001bc 	.word	0x200001bc

08004e78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b090      	sub	sp, #64	; 0x40
 8004e7c:	af04      	add	r7, sp, #16
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e88:	f3ef 8305 	mrs	r3, IPSR
 8004e8c:	61fb      	str	r3, [r7, #28]
  return(result);
 8004e8e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f040 808f 	bne.w	8004fb4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e96:	f3ef 8310 	mrs	r3, PRIMASK
 8004e9a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d105      	bne.n	8004eae <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ea2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ea6:	617b      	str	r3, [r7, #20]
  return(result);
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <osThreadNew+0x3e>
 8004eae:	4b44      	ldr	r3, [pc, #272]	; (8004fc0 <osThreadNew+0x148>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d07e      	beq.n	8004fb4 <osThreadNew+0x13c>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d07b      	beq.n	8004fb4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004ebc:	2380      	movs	r3, #128	; 0x80
 8004ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004ec0:	2318      	movs	r3, #24
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ecc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d045      	beq.n	8004f60 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <osThreadNew+0x6a>
        name = attr->name;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d008      	beq.n	8004f08 <osThreadNew+0x90>
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	2b38      	cmp	r3, #56	; 0x38
 8004efa:	d805      	bhi.n	8004f08 <osThreadNew+0x90>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <osThreadNew+0x94>
        return (NULL);
 8004f08:	2300      	movs	r3, #0
 8004f0a:	e054      	b.n	8004fb6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	089b      	lsrs	r3, r3, #2
 8004f1a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00e      	beq.n	8004f42 <osThreadNew+0xca>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	2b5f      	cmp	r3, #95	; 0x5f
 8004f2a:	d90a      	bls.n	8004f42 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d006      	beq.n	8004f42 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <osThreadNew+0xca>
        mem = 1;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	623b      	str	r3, [r7, #32]
 8004f40:	e010      	b.n	8004f64 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10c      	bne.n	8004f64 <osThreadNew+0xec>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d108      	bne.n	8004f64 <osThreadNew+0xec>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d104      	bne.n	8004f64 <osThreadNew+0xec>
          mem = 0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	623b      	str	r3, [r7, #32]
 8004f5e:	e001      	b.n	8004f64 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004f60:	2300      	movs	r3, #0
 8004f62:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d110      	bne.n	8004f8c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f72:	9202      	str	r2, [sp, #8]
 8004f74:	9301      	str	r3, [sp, #4]
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f001 f90b 	bl	800619c <xTaskCreateStatic>
 8004f86:	4603      	mov	r3, r0
 8004f88:	613b      	str	r3, [r7, #16]
 8004f8a:	e013      	b.n	8004fb4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d110      	bne.n	8004fb4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	f107 0310 	add.w	r3, r7, #16
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f001 f953 	bl	8006250 <xTaskCreate>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d001      	beq.n	8004fb4 <osThreadNew+0x13c>
          hTask = NULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004fb4:	693b      	ldr	r3, [r7, #16]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3730      	adds	r7, #48	; 0x30
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	200001bc 	.word	0x200001bc

08004fc4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fcc:	f3ef 8305 	mrs	r3, IPSR
 8004fd0:	613b      	str	r3, [r7, #16]
  return(result);
 8004fd2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10f      	bne.n	8004ff8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8004fdc:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d105      	bne.n	8004ff0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fe4:	f3ef 8311 	mrs	r3, BASEPRI
 8004fe8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d007      	beq.n	8005000 <osDelay+0x3c>
 8004ff0:	4b0a      	ldr	r3, [pc, #40]	; (800501c <osDelay+0x58>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d103      	bne.n	8005000 <osDelay+0x3c>
    stat = osErrorISR;
 8004ff8:	f06f 0305 	mvn.w	r3, #5
 8004ffc:	617b      	str	r3, [r7, #20]
 8004ffe:	e007      	b.n	8005010 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <osDelay+0x4c>
      vTaskDelay(ticks);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f001 fa84 	bl	8006518 <vTaskDelay>
    }
  }

  return (stat);
 8005010:	697b      	ldr	r3, [r7, #20]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3718      	adds	r7, #24
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	200001bc 	.word	0x200001bc

08005020 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b08a      	sub	sp, #40	; 0x28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005028:	2300      	movs	r3, #0
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800502c:	f3ef 8305 	mrs	r3, IPSR
 8005030:	613b      	str	r3, [r7, #16]
  return(result);
 8005032:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8005034:	2b00      	cmp	r3, #0
 8005036:	f040 8085 	bne.w	8005144 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800503a:	f3ef 8310 	mrs	r3, PRIMASK
 800503e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d105      	bne.n	8005052 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005046:	f3ef 8311 	mrs	r3, BASEPRI
 800504a:	60bb      	str	r3, [r7, #8]
  return(result);
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <osMutexNew+0x3a>
 8005052:	4b3f      	ldr	r3, [pc, #252]	; (8005150 <osMutexNew+0x130>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d074      	beq.n	8005144 <osMutexNew+0x124>
    if (attr != NULL) {
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <osMutexNew+0x48>
      type = attr->attr_bits;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	623b      	str	r3, [r7, #32]
 8005066:	e001      	b.n	800506c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <osMutexNew+0x5c>
      rmtx = 1U;
 8005076:	2301      	movs	r3, #1
 8005078:	61fb      	str	r3, [r7, #28]
 800507a:	e001      	b.n	8005080 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	f003 0308 	and.w	r3, r3, #8
 8005086:	2b00      	cmp	r3, #0
 8005088:	d15c      	bne.n	8005144 <osMutexNew+0x124>
      mem = -1;
 800508a:	f04f 33ff 	mov.w	r3, #4294967295
 800508e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d015      	beq.n	80050c2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d006      	beq.n	80050ac <osMutexNew+0x8c>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	2b4f      	cmp	r3, #79	; 0x4f
 80050a4:	d902      	bls.n	80050ac <osMutexNew+0x8c>
          mem = 1;
 80050a6:	2301      	movs	r3, #1
 80050a8:	61bb      	str	r3, [r7, #24]
 80050aa:	e00c      	b.n	80050c6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d108      	bne.n	80050c6 <osMutexNew+0xa6>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d104      	bne.n	80050c6 <osMutexNew+0xa6>
            mem = 0;
 80050bc:	2300      	movs	r3, #0
 80050be:	61bb      	str	r3, [r7, #24]
 80050c0:	e001      	b.n	80050c6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d112      	bne.n	80050f2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d007      	beq.n	80050e2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	4619      	mov	r1, r3
 80050d8:	2004      	movs	r0, #4
 80050da:	f000 fb36 	bl	800574a <xQueueCreateMutexStatic>
 80050de:	6278      	str	r0, [r7, #36]	; 0x24
 80050e0:	e016      	b.n	8005110 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	4619      	mov	r1, r3
 80050e8:	2001      	movs	r0, #1
 80050ea:	f000 fb2e 	bl	800574a <xQueueCreateMutexStatic>
 80050ee:	6278      	str	r0, [r7, #36]	; 0x24
 80050f0:	e00e      	b.n	8005110 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10b      	bne.n	8005110 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d004      	beq.n	8005108 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80050fe:	2004      	movs	r0, #4
 8005100:	f000 fb0b 	bl	800571a <xQueueCreateMutex>
 8005104:	6278      	str	r0, [r7, #36]	; 0x24
 8005106:	e003      	b.n	8005110 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8005108:	2001      	movs	r0, #1
 800510a:	f000 fb06 	bl	800571a <xQueueCreateMutex>
 800510e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00c      	beq.n	8005130 <osMutexNew+0x110>
        if (attr != NULL) {
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <osMutexNew+0x104>
          name = attr->name;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	e001      	b.n	8005128 <osMutexNew+0x108>
        } else {
          name = NULL;
 8005124:	2300      	movs	r3, #0
 8005126:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8005128:	6979      	ldr	r1, [r7, #20]
 800512a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800512c:	f000 ffa8 	bl	8006080 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	2b00      	cmp	r3, #0
 8005134:	d006      	beq.n	8005144 <osMutexNew+0x124>
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	f043 0301 	orr.w	r3, r3, #1
 8005142:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005146:	4618      	mov	r0, r3
 8005148:	3728      	adds	r7, #40	; 0x28
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	200001bc 	.word	0x200001bc

08005154 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005154:	b580      	push	{r7, lr}
 8005156:	b08c      	sub	sp, #48	; 0x30
 8005158:	af02      	add	r7, sp, #8
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005160:	2300      	movs	r3, #0
 8005162:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005164:	f3ef 8305 	mrs	r3, IPSR
 8005168:	61bb      	str	r3, [r7, #24]
  return(result);
 800516a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800516c:	2b00      	cmp	r3, #0
 800516e:	f040 8087 	bne.w	8005280 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005172:	f3ef 8310 	mrs	r3, PRIMASK
 8005176:	617b      	str	r3, [r7, #20]
  return(result);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d105      	bne.n	800518a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800517e:	f3ef 8311 	mrs	r3, BASEPRI
 8005182:	613b      	str	r3, [r7, #16]
  return(result);
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <osSemaphoreNew+0x3e>
 800518a:	4b40      	ldr	r3, [pc, #256]	; (800528c <osSemaphoreNew+0x138>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b02      	cmp	r3, #2
 8005190:	d076      	beq.n	8005280 <osSemaphoreNew+0x12c>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d073      	beq.n	8005280 <osSemaphoreNew+0x12c>
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	429a      	cmp	r2, r3
 800519e:	d86f      	bhi.n	8005280 <osSemaphoreNew+0x12c>
    mem = -1;
 80051a0:	f04f 33ff 	mov.w	r3, #4294967295
 80051a4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d015      	beq.n	80051d8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d006      	beq.n	80051c2 <osSemaphoreNew+0x6e>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	2b4f      	cmp	r3, #79	; 0x4f
 80051ba:	d902      	bls.n	80051c2 <osSemaphoreNew+0x6e>
        mem = 1;
 80051bc:	2301      	movs	r3, #1
 80051be:	623b      	str	r3, [r7, #32]
 80051c0:	e00c      	b.n	80051dc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d108      	bne.n	80051dc <osSemaphoreNew+0x88>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d104      	bne.n	80051dc <osSemaphoreNew+0x88>
          mem = 0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	623b      	str	r3, [r7, #32]
 80051d6:	e001      	b.n	80051dc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80051d8:	2300      	movs	r3, #0
 80051da:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e2:	d04d      	beq.n	8005280 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d129      	bne.n	800523e <osSemaphoreNew+0xea>
        if (mem == 1) {
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d10b      	bne.n	8005208 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	2303      	movs	r3, #3
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	4613      	mov	r3, r2
 80051fa:	2200      	movs	r2, #0
 80051fc:	2100      	movs	r1, #0
 80051fe:	2001      	movs	r0, #1
 8005200:	f000 f996 	bl	8005530 <xQueueGenericCreateStatic>
 8005204:	6278      	str	r0, [r7, #36]	; 0x24
 8005206:	e005      	b.n	8005214 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005208:	2203      	movs	r2, #3
 800520a:	2100      	movs	r1, #0
 800520c:	2001      	movs	r0, #1
 800520e:	f000 fa02 	bl	8005616 <xQueueGenericCreate>
 8005212:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	2b00      	cmp	r3, #0
 8005218:	d022      	beq.n	8005260 <osSemaphoreNew+0x10c>
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d01f      	beq.n	8005260 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005220:	2300      	movs	r3, #0
 8005222:	2200      	movs	r2, #0
 8005224:	2100      	movs	r1, #0
 8005226:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005228:	f000 fb10 	bl	800584c <xQueueGenericSend>
 800522c:	4603      	mov	r3, r0
 800522e:	2b01      	cmp	r3, #1
 8005230:	d016      	beq.n	8005260 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8005232:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005234:	f000 fde8 	bl	8005e08 <vQueueDelete>
            hSemaphore = NULL;
 8005238:	2300      	movs	r3, #0
 800523a:	627b      	str	r3, [r7, #36]	; 0x24
 800523c:	e010      	b.n	8005260 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d108      	bne.n	8005256 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	461a      	mov	r2, r3
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 fa97 	bl	8005780 <xQueueCreateCountingSemaphoreStatic>
 8005252:	6278      	str	r0, [r7, #36]	; 0x24
 8005254:	e004      	b.n	8005260 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 fac6 	bl	80057ea <xQueueCreateCountingSemaphore>
 800525e:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00c      	beq.n	8005280 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <osSemaphoreNew+0x120>
          name = attr->name;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	61fb      	str	r3, [r7, #28]
 8005272:	e001      	b.n	8005278 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8005274:	2300      	movs	r3, #0
 8005276:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005278:	69f9      	ldr	r1, [r7, #28]
 800527a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800527c:	f000 ff00 	bl	8006080 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005282:	4618      	mov	r0, r3
 8005284:	3728      	adds	r7, #40	; 0x28
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	200001bc 	.word	0x200001bc

08005290 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4a07      	ldr	r2, [pc, #28]	; (80052bc <vApplicationGetIdleTaskMemory+0x2c>)
 80052a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	4a06      	ldr	r2, [pc, #24]	; (80052c0 <vApplicationGetIdleTaskMemory+0x30>)
 80052a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2280      	movs	r2, #128	; 0x80
 80052ac:	601a      	str	r2, [r3, #0]
}
 80052ae:	bf00      	nop
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	200001c0 	.word	0x200001c0
 80052c0:	20000220 	.word	0x20000220

080052c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4a07      	ldr	r2, [pc, #28]	; (80052f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80052d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	4a06      	ldr	r2, [pc, #24]	; (80052f4 <vApplicationGetTimerTaskMemory+0x30>)
 80052da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052e2:	601a      	str	r2, [r3, #0]
}
 80052e4:	bf00      	nop
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	20000420 	.word	0x20000420
 80052f4:	20000480 	.word	0x20000480

080052f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f103 0208 	add.w	r2, r3, #8
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f04f 32ff 	mov.w	r2, #4294967295
 8005310:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f103 0208 	add.w	r2, r3, #8
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f103 0208 	add.w	r2, r3, #8
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005352:	b480      	push	{r7}
 8005354:	b085      	sub	sp, #20
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	601a      	str	r2, [r3, #0]
}
 800538e:	bf00      	nop
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800539a:	b480      	push	{r7}
 800539c:	b085      	sub	sp, #20
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b0:	d103      	bne.n	80053ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	e00c      	b.n	80053d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3308      	adds	r3, #8
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	e002      	b.n	80053c8 <vListInsert+0x2e>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d2f6      	bcs.n	80053c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	683a      	ldr	r2, [r7, #0]
 80053e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	601a      	str	r2, [r3, #0]
}
 8005400:	bf00      	nop
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6892      	ldr	r2, [r2, #8]
 8005422:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6852      	ldr	r2, [r2, #4]
 800542c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	429a      	cmp	r2, r3
 8005436:	d103      	bne.n	8005440 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	1e5a      	subs	r2, r3, #1
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d109      	bne.n	8005488 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	60bb      	str	r3, [r7, #8]
 8005486:	e7fe      	b.n	8005486 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005488:	f002 faa8 	bl	80079dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005494:	68f9      	ldr	r1, [r7, #12]
 8005496:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005498:	fb01 f303 	mul.w	r3, r1, r3
 800549c:	441a      	add	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b8:	3b01      	subs	r3, #1
 80054ba:	68f9      	ldr	r1, [r7, #12]
 80054bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054be:	fb01 f303 	mul.w	r3, r1, r3
 80054c2:	441a      	add	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	22ff      	movs	r2, #255	; 0xff
 80054cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	22ff      	movs	r2, #255	; 0xff
 80054d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d114      	bne.n	8005508 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d01a      	beq.n	800551c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	3310      	adds	r3, #16
 80054ea:	4618      	mov	r0, r3
 80054ec:	f001 fb32 	bl	8006b54 <xTaskRemoveFromEventList>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d012      	beq.n	800551c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80054f6:	4b0d      	ldr	r3, [pc, #52]	; (800552c <xQueueGenericReset+0xcc>)
 80054f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	e009      	b.n	800551c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	3310      	adds	r3, #16
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff fef3 	bl	80052f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	3324      	adds	r3, #36	; 0x24
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff feee 	bl	80052f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800551c:	f002 fa8c 	bl	8007a38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005520:	2301      	movs	r3, #1
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	e000ed04 	.word	0xe000ed04

08005530 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005530:	b580      	push	{r7, lr}
 8005532:	b08e      	sub	sp, #56	; 0x38
 8005534:	af02      	add	r7, sp, #8
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d109      	bne.n	8005558 <xQueueGenericCreateStatic+0x28>
 8005544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	62bb      	str	r3, [r7, #40]	; 0x28
 8005556:	e7fe      	b.n	8005556 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d109      	bne.n	8005572 <xQueueGenericCreateStatic+0x42>
 800555e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
 8005570:	e7fe      	b.n	8005570 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <xQueueGenericCreateStatic+0x4e>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <xQueueGenericCreateStatic+0x52>
 800557e:	2301      	movs	r3, #1
 8005580:	e000      	b.n	8005584 <xQueueGenericCreateStatic+0x54>
 8005582:	2300      	movs	r3, #0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d109      	bne.n	800559c <xQueueGenericCreateStatic+0x6c>
 8005588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558c:	f383 8811 	msr	BASEPRI, r3
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	623b      	str	r3, [r7, #32]
 800559a:	e7fe      	b.n	800559a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d102      	bne.n	80055a8 <xQueueGenericCreateStatic+0x78>
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <xQueueGenericCreateStatic+0x7c>
 80055a8:	2301      	movs	r3, #1
 80055aa:	e000      	b.n	80055ae <xQueueGenericCreateStatic+0x7e>
 80055ac:	2300      	movs	r3, #0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d109      	bne.n	80055c6 <xQueueGenericCreateStatic+0x96>
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	61fb      	str	r3, [r7, #28]
 80055c4:	e7fe      	b.n	80055c4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055c6:	2350      	movs	r3, #80	; 0x50
 80055c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b50      	cmp	r3, #80	; 0x50
 80055ce:	d009      	beq.n	80055e4 <xQueueGenericCreateStatic+0xb4>
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	e7fe      	b.n	80055e2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80055e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80055ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00d      	beq.n	800560c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80055f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055f8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80055fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	4613      	mov	r3, r2
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 f844 	bl	8005694 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800560e:	4618      	mov	r0, r3
 8005610:	3730      	adds	r7, #48	; 0x30
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005616:	b580      	push	{r7, lr}
 8005618:	b08a      	sub	sp, #40	; 0x28
 800561a:	af02      	add	r7, sp, #8
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	4613      	mov	r3, r2
 8005622:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d109      	bne.n	800563e <xQueueGenericCreate+0x28>
 800562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	613b      	str	r3, [r7, #16]
 800563c:	e7fe      	b.n	800563c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d102      	bne.n	800564a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005644:	2300      	movs	r3, #0
 8005646:	61fb      	str	r3, [r7, #28]
 8005648:	e004      	b.n	8005654 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	fb02 f303 	mul.w	r3, r2, r3
 8005652:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	3350      	adds	r3, #80	; 0x50
 8005658:	4618      	mov	r0, r3
 800565a:	f002 fad9 	bl	8007c10 <pvPortMalloc>
 800565e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d011      	beq.n	800568a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	3350      	adds	r3, #80	; 0x50
 800566e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005678:	79fa      	ldrb	r2, [r7, #7]
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	4613      	mov	r3, r2
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	68b9      	ldr	r1, [r7, #8]
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 f805 	bl	8005694 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800568a:	69bb      	ldr	r3, [r7, #24]
	}
 800568c:	4618      	mov	r0, r3
 800568e:	3720      	adds	r7, #32
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d103      	bne.n	80056b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	e002      	b.n	80056b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056c2:	2101      	movs	r1, #1
 80056c4:	69b8      	ldr	r0, [r7, #24]
 80056c6:	f7ff fecb 	bl	8005460 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	78fa      	ldrb	r2, [r7, #3]
 80056ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80056d2:	78fb      	ldrb	r3, [r7, #3]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	68f9      	ldr	r1, [r7, #12]
 80056d8:	2073      	movs	r0, #115	; 0x73
 80056da:	f003 f945 	bl	8008968 <SEGGER_SYSVIEW_RecordU32x3>
}
 80056de:	bf00      	nop
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b082      	sub	sp, #8
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00e      	beq.n	8005712 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005706:	2300      	movs	r3, #0
 8005708:	2200      	movs	r2, #0
 800570a:	2100      	movs	r1, #0
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f89d 	bl	800584c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005712:	bf00      	nop
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800571a:	b580      	push	{r7, lr}
 800571c:	b086      	sub	sp, #24
 800571e:	af00      	add	r7, sp, #0
 8005720:	4603      	mov	r3, r0
 8005722:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005724:	2301      	movs	r3, #1
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	2300      	movs	r3, #0
 800572a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800572c:	79fb      	ldrb	r3, [r7, #7]
 800572e:	461a      	mov	r2, r3
 8005730:	6939      	ldr	r1, [r7, #16]
 8005732:	6978      	ldr	r0, [r7, #20]
 8005734:	f7ff ff6f 	bl	8005616 <xQueueGenericCreate>
 8005738:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f7ff ffd3 	bl	80056e6 <prvInitialiseMutex>

		return xNewQueue;
 8005740:	68fb      	ldr	r3, [r7, #12]
	}
 8005742:	4618      	mov	r0, r3
 8005744:	3718      	adds	r7, #24
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800574a:	b580      	push	{r7, lr}
 800574c:	b088      	sub	sp, #32
 800574e:	af02      	add	r7, sp, #8
 8005750:	4603      	mov	r3, r0
 8005752:	6039      	str	r1, [r7, #0]
 8005754:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005756:	2301      	movs	r3, #1
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	2300      	movs	r3, #0
 800575c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2200      	movs	r2, #0
 8005766:	6939      	ldr	r1, [r7, #16]
 8005768:	6978      	ldr	r0, [r7, #20]
 800576a:	f7ff fee1 	bl	8005530 <xQueueGenericCreateStatic>
 800576e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f7ff ffb8 	bl	80056e6 <prvInitialiseMutex>

		return xNewQueue;
 8005776:	68fb      	ldr	r3, [r7, #12]
	}
 8005778:	4618      	mov	r0, r3
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08a      	sub	sp, #40	; 0x28
 8005784:	af02      	add	r7, sp, #8
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d109      	bne.n	80057a6 <xQueueCreateCountingSemaphoreStatic+0x26>
 8005792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	61bb      	str	r3, [r7, #24]
 80057a4:	e7fe      	b.n	80057a4 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d909      	bls.n	80057c2 <xQueueCreateCountingSemaphoreStatic+0x42>
 80057ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	e7fe      	b.n	80057c0 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80057c2:	2302      	movs	r3, #2
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	2100      	movs	r1, #0
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f7ff feaf 	bl	8005530 <xQueueGenericCreateStatic>
 80057d2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80057e0:	69fb      	ldr	r3, [r7, #28]
	}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3720      	adds	r7, #32
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b086      	sub	sp, #24
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d109      	bne.n	800580e <xQueueCreateCountingSemaphore+0x24>
 80057fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	613b      	str	r3, [r7, #16]
 800580c:	e7fe      	b.n	800580c <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	429a      	cmp	r2, r3
 8005814:	d909      	bls.n	800582a <xQueueCreateCountingSemaphore+0x40>
 8005816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	e7fe      	b.n	8005828 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800582a:	2202      	movs	r2, #2
 800582c:	2100      	movs	r1, #0
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff fef1 	bl	8005616 <xQueueGenericCreate>
 8005834:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005842:	697b      	ldr	r3, [r7, #20]
	}
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b090      	sub	sp, #64	; 0x40
 8005850:	af02      	add	r7, sp, #8
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800585a:	2300      	movs	r3, #0
 800585c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	2b00      	cmp	r3, #0
 8005866:	d109      	bne.n	800587c <xQueueGenericSend+0x30>
 8005868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	62bb      	str	r3, [r7, #40]	; 0x28
 800587a:	e7fe      	b.n	800587a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d103      	bne.n	800588a <xQueueGenericSend+0x3e>
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <xQueueGenericSend+0x42>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <xQueueGenericSend+0x44>
 800588e:	2300      	movs	r3, #0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d109      	bne.n	80058a8 <xQueueGenericSend+0x5c>
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
 80058a6:	e7fe      	b.n	80058a6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d103      	bne.n	80058b6 <xQueueGenericSend+0x6a>
 80058ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d101      	bne.n	80058ba <xQueueGenericSend+0x6e>
 80058b6:	2301      	movs	r3, #1
 80058b8:	e000      	b.n	80058bc <xQueueGenericSend+0x70>
 80058ba:	2300      	movs	r3, #0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d109      	bne.n	80058d4 <xQueueGenericSend+0x88>
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	623b      	str	r3, [r7, #32]
 80058d2:	e7fe      	b.n	80058d2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058d4:	f001 fb30 	bl	8006f38 <xTaskGetSchedulerState>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d102      	bne.n	80058e4 <xQueueGenericSend+0x98>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <xQueueGenericSend+0x9c>
 80058e4:	2301      	movs	r3, #1
 80058e6:	e000      	b.n	80058ea <xQueueGenericSend+0x9e>
 80058e8:	2300      	movs	r3, #0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d109      	bne.n	8005902 <xQueueGenericSend+0xb6>
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	61fb      	str	r3, [r7, #28]
 8005900:	e7fe      	b.n	8005900 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005902:	f002 f86b 	bl	80079dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590e:	429a      	cmp	r2, r3
 8005910:	d302      	bcc.n	8005918 <xQueueGenericSend+0xcc>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b02      	cmp	r3, #2
 8005916:	d136      	bne.n	8005986 <xQueueGenericSend+0x13a>
			{
				traceQUEUE_SEND( pxQueue );
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	4618      	mov	r0, r3
 800591c:	f003 fd32 	bl	8009384 <SEGGER_SYSVIEW_ShrinkId>
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	460b      	mov	r3, r1
 800592a:	4601      	mov	r1, r0
 800592c:	205a      	movs	r0, #90	; 0x5a
 800592e:	f003 f891 	bl	8008a54 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005938:	f000 fa91 	bl	8005e5e <prvCopyDataToQueue>
 800593c:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	2b00      	cmp	r3, #0
 8005944:	d010      	beq.n	8005968 <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	3324      	adds	r3, #36	; 0x24
 800594a:	4618      	mov	r0, r3
 800594c:	f001 f902 	bl	8006b54 <xTaskRemoveFromEventList>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d013      	beq.n	800597e <xQueueGenericSend+0x132>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005956:	4b4d      	ldr	r3, [pc, #308]	; (8005a8c <xQueueGenericSend+0x240>)
 8005958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	e00a      	b.n	800597e <xQueueGenericSend+0x132>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596a:	2b00      	cmp	r3, #0
 800596c:	d007      	beq.n	800597e <xQueueGenericSend+0x132>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800596e:	4b47      	ldr	r3, [pc, #284]	; (8005a8c <xQueueGenericSend+0x240>)
 8005970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800597e:	f002 f85b 	bl	8007a38 <vPortExitCritical>
				return pdPASS;
 8005982:	2301      	movs	r3, #1
 8005984:	e07d      	b.n	8005a82 <xQueueGenericSend+0x236>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d110      	bne.n	80059ae <xQueueGenericSend+0x162>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800598c:	f002 f854 	bl	8007a38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8005990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005992:	4618      	mov	r0, r3
 8005994:	f003 fcf6 	bl	8009384 <SEGGER_SYSVIEW_ShrinkId>
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	460b      	mov	r3, r1
 80059a2:	4601      	mov	r1, r0
 80059a4:	205a      	movs	r0, #90	; 0x5a
 80059a6:	f003 f855 	bl	8008a54 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 80059aa:	2300      	movs	r3, #0
 80059ac:	e069      	b.n	8005a82 <xQueueGenericSend+0x236>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d106      	bne.n	80059c2 <xQueueGenericSend+0x176>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059b4:	f107 0314 	add.w	r3, r7, #20
 80059b8:	4618      	mov	r0, r3
 80059ba:	f001 f931 	bl	8006c20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059be:	2301      	movs	r3, #1
 80059c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059c2:	f002 f839 	bl	8007a38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059c6:	f000 fe5b 	bl	8006680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059ca:	f002 f807 	bl	80079dc <vPortEnterCritical>
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059d4:	b25b      	sxtb	r3, r3
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059da:	d103      	bne.n	80059e4 <xQueueGenericSend+0x198>
 80059dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059ea:	b25b      	sxtb	r3, r3
 80059ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f0:	d103      	bne.n	80059fa <xQueueGenericSend+0x1ae>
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059fa:	f002 f81d 	bl	8007a38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059fe:	1d3a      	adds	r2, r7, #4
 8005a00:	f107 0314 	add.w	r3, r7, #20
 8005a04:	4611      	mov	r1, r2
 8005a06:	4618      	mov	r0, r3
 8005a08:	f001 f920 	bl	8006c4c <xTaskCheckForTimeOut>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d124      	bne.n	8005a5c <xQueueGenericSend+0x210>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a14:	f000 fb1b 	bl	800604e <prvIsQueueFull>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d018      	beq.n	8005a50 <xQueueGenericSend+0x204>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	3310      	adds	r3, #16
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	4611      	mov	r1, r2
 8005a26:	4618      	mov	r0, r3
 8005a28:	f001 f842 	bl	8006ab0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a2e:	f000 faa6 	bl	8005f7e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a32:	f000 fe33 	bl	800669c <xTaskResumeAll>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f47f af62 	bne.w	8005902 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005a3e:	4b13      	ldr	r3, [pc, #76]	; (8005a8c <xQueueGenericSend+0x240>)
 8005a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	e758      	b.n	8005902 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a52:	f000 fa94 	bl	8005f7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a56:	f000 fe21 	bl	800669c <xTaskResumeAll>
 8005a5a:	e752      	b.n	8005902 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a5e:	f000 fa8e 	bl	8005f7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a62:	f000 fe1b 	bl	800669c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f003 fc8b 	bl	8009384 <SEGGER_SYSVIEW_ShrinkId>
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	6879      	ldr	r1, [r7, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	460b      	mov	r3, r1
 8005a78:	4601      	mov	r1, r0
 8005a7a:	205a      	movs	r0, #90	; 0x5a
 8005a7c:	f002 ffea 	bl	8008a54 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8005a80:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3738      	adds	r7, #56	; 0x38
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	e000ed04 	.word	0xe000ed04

08005a90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08e      	sub	sp, #56	; 0x38
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d109      	bne.n	8005abc <xQueueGenericSendFromISR+0x2c>
 8005aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aba:	e7fe      	b.n	8005aba <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d103      	bne.n	8005aca <xQueueGenericSendFromISR+0x3a>
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <xQueueGenericSendFromISR+0x3e>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e000      	b.n	8005ad0 <xQueueGenericSendFromISR+0x40>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d109      	bne.n	8005ae8 <xQueueGenericSendFromISR+0x58>
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	623b      	str	r3, [r7, #32]
 8005ae6:	e7fe      	b.n	8005ae6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d103      	bne.n	8005af6 <xQueueGenericSendFromISR+0x66>
 8005aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d101      	bne.n	8005afa <xQueueGenericSendFromISR+0x6a>
 8005af6:	2301      	movs	r3, #1
 8005af8:	e000      	b.n	8005afc <xQueueGenericSendFromISR+0x6c>
 8005afa:	2300      	movs	r3, #0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d109      	bne.n	8005b14 <xQueueGenericSendFromISR+0x84>
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	61fb      	str	r3, [r7, #28]
 8005b12:	e7fe      	b.n	8005b12 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b14:	f002 f83e 	bl	8007b94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b18:	f3ef 8211 	mrs	r2, BASEPRI
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	61ba      	str	r2, [r7, #24]
 8005b2e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b30:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b32:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d302      	bcc.n	8005b46 <xQueueGenericSendFromISR+0xb6>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d136      	bne.n	8005bb4 <xQueueGenericSendFromISR+0x124>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8005b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b52:	4618      	mov	r0, r3
 8005b54:	f003 fc16 	bl	8009384 <SEGGER_SYSVIEW_ShrinkId>
 8005b58:	4601      	mov	r1, r0
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	2060      	movs	r0, #96	; 0x60
 8005b60:	f002 fea8 	bl	80088b4 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	68b9      	ldr	r1, [r7, #8]
 8005b68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b6a:	f000 f978 	bl	8005e5e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b6e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b76:	d112      	bne.n	8005b9e <xQueueGenericSendFromISR+0x10e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d016      	beq.n	8005bae <xQueueGenericSendFromISR+0x11e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	3324      	adds	r3, #36	; 0x24
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 ffe5 	bl	8006b54 <xTaskRemoveFromEventList>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00e      	beq.n	8005bae <xQueueGenericSendFromISR+0x11e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00b      	beq.n	8005bae <xQueueGenericSendFromISR+0x11e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	e007      	b.n	8005bae <xQueueGenericSendFromISR+0x11e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	b25a      	sxtb	r2, r3
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005baa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005bb2:	e00b      	b.n	8005bcc <xQueueGenericSendFromISR+0x13c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f003 fbe4 	bl	8009384 <SEGGER_SYSVIEW_ShrinkId>
 8005bbc:	4601      	mov	r1, r0
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	2060      	movs	r0, #96	; 0x60
 8005bc4:	f002 fe76 	bl	80088b4 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	637b      	str	r3, [r7, #52]	; 0x34
 8005bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bce:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3738      	adds	r7, #56	; 0x38
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005be0:	b590      	push	{r4, r7, lr}
 8005be2:	b08f      	sub	sp, #60	; 0x3c
 8005be4:	af02      	add	r7, sp, #8
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005bec:	2300      	movs	r3, #0
 8005bee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d109      	bne.n	8005c0e <xQueueReceive+0x2e>
	__asm volatile
 8005bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	623b      	str	r3, [r7, #32]
 8005c0c:	e7fe      	b.n	8005c0c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d103      	bne.n	8005c1c <xQueueReceive+0x3c>
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <xQueueReceive+0x40>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e000      	b.n	8005c22 <xQueueReceive+0x42>
 8005c20:	2300      	movs	r3, #0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <xQueueReceive+0x5a>
 8005c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	61fb      	str	r3, [r7, #28]
 8005c38:	e7fe      	b.n	8005c38 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c3a:	f001 f97d 	bl	8006f38 <xTaskGetSchedulerState>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d102      	bne.n	8005c4a <xQueueReceive+0x6a>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <xQueueReceive+0x6e>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e000      	b.n	8005c50 <xQueueReceive+0x70>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d109      	bne.n	8005c68 <xQueueReceive+0x88>
 8005c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	61bb      	str	r3, [r7, #24]
 8005c66:	e7fe      	b.n	8005c66 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c68:	f001 feb8 	bl	80079dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d031      	beq.n	8005cdc <xQueueReceive+0xfc>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c78:	68b9      	ldr	r1, [r7, #8]
 8005c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c7c:	f000 f959 	bl	8005f32 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8005c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c82:	4618      	mov	r0, r3
 8005c84:	f003 fb7e 	bl	8009384 <SEGGER_SYSVIEW_ShrinkId>
 8005c88:	4604      	mov	r4, r0
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	f003 fb7a 	bl	8009384 <SEGGER_SYSVIEW_ShrinkId>
 8005c90:	4601      	mov	r1, r0
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	2301      	movs	r3, #1
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	460a      	mov	r2, r1
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	205c      	movs	r0, #92	; 0x5c
 8005ca0:	f002 fed8 	bl	8008a54 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	1e5a      	subs	r2, r3, #1
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00f      	beq.n	8005cd4 <xQueueReceive+0xf4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb6:	3310      	adds	r3, #16
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 ff4b 	bl	8006b54 <xTaskRemoveFromEventList>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d007      	beq.n	8005cd4 <xQueueReceive+0xf4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005cc4:	4b4f      	ldr	r3, [pc, #316]	; (8005e04 <xQueueReceive+0x224>)
 8005cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005cd4:	f001 feb0 	bl	8007a38 <vPortExitCritical>
				return pdPASS;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e08e      	b.n	8005dfa <xQueueReceive+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d115      	bne.n	8005d0e <xQueueReceive+0x12e>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ce2:	f001 fea9 	bl	8007a38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f003 fb4b 	bl	8009384 <SEGGER_SYSVIEW_ShrinkId>
 8005cee:	4604      	mov	r4, r0
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	f003 fb47 	bl	8009384 <SEGGER_SYSVIEW_ShrinkId>
 8005cf6:	4601      	mov	r1, r0
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	460a      	mov	r2, r1
 8005d02:	4621      	mov	r1, r4
 8005d04:	205c      	movs	r0, #92	; 0x5c
 8005d06:	f002 fea5 	bl	8008a54 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	e075      	b.n	8005dfa <xQueueReceive+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d106      	bne.n	8005d22 <xQueueReceive+0x142>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d14:	f107 0310 	add.w	r3, r7, #16
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 ff81 	bl	8006c20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d22:	f001 fe89 	bl	8007a38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d26:	f000 fcab 	bl	8006680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d2a:	f001 fe57 	bl	80079dc <vPortEnterCritical>
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d34:	b25b      	sxtb	r3, r3
 8005d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3a:	d103      	bne.n	8005d44 <xQueueReceive+0x164>
 8005d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d4a:	b25b      	sxtb	r3, r3
 8005d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d50:	d103      	bne.n	8005d5a <xQueueReceive+0x17a>
 8005d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d5a:	f001 fe6d 	bl	8007a38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d5e:	1d3a      	adds	r2, r7, #4
 8005d60:	f107 0310 	add.w	r3, r7, #16
 8005d64:	4611      	mov	r1, r2
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 ff70 	bl	8006c4c <xTaskCheckForTimeOut>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d124      	bne.n	8005dbc <xQueueReceive+0x1dc>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d74:	f000 f955 	bl	8006022 <prvIsQueueEmpty>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d018      	beq.n	8005db0 <xQueueReceive+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d80:	3324      	adds	r3, #36	; 0x24
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	4611      	mov	r1, r2
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fe92 	bl	8006ab0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d8e:	f000 f8f6 	bl	8005f7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d92:	f000 fc83 	bl	800669c <xTaskResumeAll>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f47f af65 	bne.w	8005c68 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005d9e:	4b19      	ldr	r3, [pc, #100]	; (8005e04 <xQueueReceive+0x224>)
 8005da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	e75b      	b.n	8005c68 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005db2:	f000 f8e4 	bl	8005f7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005db6:	f000 fc71 	bl	800669c <xTaskResumeAll>
 8005dba:	e755      	b.n	8005c68 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dbe:	f000 f8de 	bl	8005f7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dc2:	f000 fc6b 	bl	800669c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dc8:	f000 f92b 	bl	8006022 <prvIsQueueEmpty>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f43f af4a 	beq.w	8005c68 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f003 fad4 	bl	8009384 <SEGGER_SYSVIEW_ShrinkId>
 8005ddc:	4604      	mov	r4, r0
 8005dde:	2000      	movs	r0, #0
 8005de0:	f003 fad0 	bl	8009384 <SEGGER_SYSVIEW_ShrinkId>
 8005de4:	4601      	mov	r1, r0
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	2301      	movs	r3, #1
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	4613      	mov	r3, r2
 8005dee:	460a      	mov	r2, r1
 8005df0:	4621      	mov	r1, r4
 8005df2:	205c      	movs	r0, #92	; 0x5c
 8005df4:	f002 fe2e 	bl	8008a54 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8005df8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3734      	adds	r7, #52	; 0x34
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd90      	pop	{r4, r7, pc}
 8005e02:	bf00      	nop
 8005e04:	e000ed04 	.word	0xe000ed04

08005e08 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d109      	bne.n	8005e2e <vQueueDelete+0x26>
 8005e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1e:	f383 8811 	msr	BASEPRI, r3
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	60bb      	str	r3, [r7, #8]
 8005e2c:	e7fe      	b.n	8005e2c <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f003 faa7 	bl	8009384 <SEGGER_SYSVIEW_ShrinkId>
 8005e36:	4603      	mov	r3, r0
 8005e38:	4619      	mov	r1, r3
 8005e3a:	205f      	movs	r0, #95	; 0x5f
 8005e3c:	f002 fcfe 	bl	800883c <SEGGER_SYSVIEW_RecordU32>

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 f94d 	bl	80060e0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d102      	bne.n	8005e56 <vQueueDelete+0x4e>
		{
			vPortFree( pxQueue );
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f001 ff9f 	bl	8007d94 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005e56:	bf00      	nop
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b086      	sub	sp, #24
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e72:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10d      	bne.n	8005e98 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d14d      	bne.n	8005f20 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f001 f873 	bl	8006f74 <xTaskPriorityDisinherit>
 8005e8e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	609a      	str	r2, [r3, #8]
 8005e96:	e043      	b.n	8005f20 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d119      	bne.n	8005ed2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6858      	ldr	r0, [r3, #4]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	68b9      	ldr	r1, [r7, #8]
 8005eaa:	f003 fd32 	bl	8009912 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	441a      	add	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d32b      	bcc.n	8005f20 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	605a      	str	r2, [r3, #4]
 8005ed0:	e026      	b.n	8005f20 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	68d8      	ldr	r0, [r3, #12]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	461a      	mov	r2, r3
 8005edc:	68b9      	ldr	r1, [r7, #8]
 8005ede:	f003 fd18 	bl	8009912 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	425b      	negs	r3, r3
 8005eec:	441a      	add	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d207      	bcs.n	8005f0e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	425b      	negs	r3, r3
 8005f08:	441a      	add	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d105      	bne.n	8005f20 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	1c5a      	adds	r2, r3, #1
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f28:	697b      	ldr	r3, [r7, #20]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3718      	adds	r7, #24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b082      	sub	sp, #8
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d018      	beq.n	8005f76 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68da      	ldr	r2, [r3, #12]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4c:	441a      	add	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d303      	bcc.n	8005f66 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68d9      	ldr	r1, [r3, #12]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	461a      	mov	r2, r3
 8005f70:	6838      	ldr	r0, [r7, #0]
 8005f72:	f003 fcce 	bl	8009912 <memcpy>
	}
}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f86:	f001 fd29 	bl	80079dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f90:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f92:	e011      	b.n	8005fb8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d012      	beq.n	8005fc2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3324      	adds	r3, #36	; 0x24
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 fdd7 	bl	8006b54 <xTaskRemoveFromEventList>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fac:	f000 feae 	bl	8006d0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	dce9      	bgt.n	8005f94 <prvUnlockQueue+0x16>
 8005fc0:	e000      	b.n	8005fc4 <prvUnlockQueue+0x46>
					break;
 8005fc2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	22ff      	movs	r2, #255	; 0xff
 8005fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005fcc:	f001 fd34 	bl	8007a38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fd0:	f001 fd04 	bl	80079dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fda:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fdc:	e011      	b.n	8006002 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d012      	beq.n	800600c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3310      	adds	r3, #16
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fdb2 	bl	8006b54 <xTaskRemoveFromEventList>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ff6:	f000 fe89 	bl	8006d0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ffa:	7bbb      	ldrb	r3, [r7, #14]
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006002:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006006:	2b00      	cmp	r3, #0
 8006008:	dce9      	bgt.n	8005fde <prvUnlockQueue+0x60>
 800600a:	e000      	b.n	800600e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800600c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	22ff      	movs	r2, #255	; 0xff
 8006012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006016:	f001 fd0f 	bl	8007a38 <vPortExitCritical>
}
 800601a:	bf00      	nop
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b084      	sub	sp, #16
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800602a:	f001 fcd7 	bl	80079dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006032:	2b00      	cmp	r3, #0
 8006034:	d102      	bne.n	800603c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006036:	2301      	movs	r3, #1
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	e001      	b.n	8006040 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800603c:	2300      	movs	r3, #0
 800603e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006040:	f001 fcfa 	bl	8007a38 <vPortExitCritical>

	return xReturn;
 8006044:	68fb      	ldr	r3, [r7, #12]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006056:	f001 fcc1 	bl	80079dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006062:	429a      	cmp	r2, r3
 8006064:	d102      	bne.n	800606c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006066:	2301      	movs	r3, #1
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	e001      	b.n	8006070 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800606c:	2300      	movs	r3, #0
 800606e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006070:	f001 fce2 	bl	8007a38 <vPortExitCritical>

	return xReturn;
 8006074:	68fb      	ldr	r3, [r7, #12]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800608a:	2300      	movs	r3, #0
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	e01e      	b.n	80060ce <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006090:	4a12      	ldr	r2, [pc, #72]	; (80060dc <vQueueAddToRegistry+0x5c>)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d115      	bne.n	80060c8 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800609c:	490f      	ldr	r1, [pc, #60]	; (80060dc <vQueueAddToRegistry+0x5c>)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060a6:	4a0d      	ldr	r2, [pc, #52]	; (80060dc <vQueueAddToRegistry+0x5c>)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	4413      	add	r3, r2
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f003 f965 	bl	8009384 <SEGGER_SYSVIEW_ShrinkId>
 80060ba:	4601      	mov	r1, r0
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	461a      	mov	r2, r3
 80060c0:	2071      	movs	r0, #113	; 0x71
 80060c2:	f002 fbf7 	bl	80088b4 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 80060c6:	e005      	b.n	80060d4 <vQueueAddToRegistry+0x54>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3301      	adds	r3, #1
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2b07      	cmp	r3, #7
 80060d2:	d9dd      	bls.n	8006090 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060d4:	bf00      	nop
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	200056e0 	.word	0x200056e0

080060e0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	e016      	b.n	800611c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80060ee:	4a10      	ldr	r2, [pc, #64]	; (8006130 <vQueueUnregisterQueue+0x50>)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	4413      	add	r3, r2
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d10b      	bne.n	8006116 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80060fe:	4a0c      	ldr	r2, [pc, #48]	; (8006130 <vQueueUnregisterQueue+0x50>)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2100      	movs	r1, #0
 8006104:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006108:	4a09      	ldr	r2, [pc, #36]	; (8006130 <vQueueUnregisterQueue+0x50>)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	4413      	add	r3, r2
 8006110:	2200      	movs	r2, #0
 8006112:	605a      	str	r2, [r3, #4]
				break;
 8006114:	e005      	b.n	8006122 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3301      	adds	r3, #1
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2b07      	cmp	r3, #7
 8006120:	d9e5      	bls.n	80060ee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006122:	bf00      	nop
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	200056e0 	.word	0x200056e0

08006134 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006144:	f001 fc4a 	bl	80079dc <vPortEnterCritical>
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800614e:	b25b      	sxtb	r3, r3
 8006150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006154:	d103      	bne.n	800615e <vQueueWaitForMessageRestricted+0x2a>
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006164:	b25b      	sxtb	r3, r3
 8006166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616a:	d103      	bne.n	8006174 <vQueueWaitForMessageRestricted+0x40>
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006174:	f001 fc60 	bl	8007a38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617c:	2b00      	cmp	r3, #0
 800617e:	d106      	bne.n	800618e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	3324      	adds	r3, #36	; 0x24
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	68b9      	ldr	r1, [r7, #8]
 8006188:	4618      	mov	r0, r3
 800618a:	f000 fcb5 	bl	8006af8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800618e:	6978      	ldr	r0, [r7, #20]
 8006190:	f7ff fef5 	bl	8005f7e <prvUnlockQueue>
	}
 8006194:	bf00      	nop
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800619c:	b580      	push	{r7, lr}
 800619e:	b08e      	sub	sp, #56	; 0x38
 80061a0:	af04      	add	r7, sp, #16
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80061aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d109      	bne.n	80061c4 <xTaskCreateStatic+0x28>
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	623b      	str	r3, [r7, #32]
 80061c2:	e7fe      	b.n	80061c2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80061c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d109      	bne.n	80061de <xTaskCreateStatic+0x42>
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	61fb      	str	r3, [r7, #28]
 80061dc:	e7fe      	b.n	80061dc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80061de:	2360      	movs	r3, #96	; 0x60
 80061e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	2b60      	cmp	r3, #96	; 0x60
 80061e6:	d009      	beq.n	80061fc <xTaskCreateStatic+0x60>
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	61bb      	str	r3, [r7, #24]
 80061fa:	e7fe      	b.n	80061fa <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80061fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006200:	2b00      	cmp	r3, #0
 8006202:	d01e      	beq.n	8006242 <xTaskCreateStatic+0xa6>
 8006204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006206:	2b00      	cmp	r3, #0
 8006208:	d01b      	beq.n	8006242 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800620a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006212:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	2202      	movs	r2, #2
 8006218:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800621c:	2300      	movs	r3, #0
 800621e:	9303      	str	r3, [sp, #12]
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	9302      	str	r3, [sp, #8]
 8006224:	f107 0314 	add.w	r3, r7, #20
 8006228:	9301      	str	r3, [sp, #4]
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	68b9      	ldr	r1, [r7, #8]
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 f850 	bl	80062da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800623a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800623c:	f000 f8de 	bl	80063fc <prvAddNewTaskToReadyList>
 8006240:	e001      	b.n	8006246 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006242:	2300      	movs	r3, #0
 8006244:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006246:	697b      	ldr	r3, [r7, #20]
	}
 8006248:	4618      	mov	r0, r3
 800624a:	3728      	adds	r7, #40	; 0x28
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08c      	sub	sp, #48	; 0x30
 8006254:	af04      	add	r7, sp, #16
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	603b      	str	r3, [r7, #0]
 800625c:	4613      	mov	r3, r2
 800625e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006260:	88fb      	ldrh	r3, [r7, #6]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4618      	mov	r0, r3
 8006266:	f001 fcd3 	bl	8007c10 <pvPortMalloc>
 800626a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00e      	beq.n	8006290 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006272:	2060      	movs	r0, #96	; 0x60
 8006274:	f001 fccc 	bl	8007c10 <pvPortMalloc>
 8006278:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d003      	beq.n	8006288 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	631a      	str	r2, [r3, #48]	; 0x30
 8006286:	e005      	b.n	8006294 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006288:	6978      	ldr	r0, [r7, #20]
 800628a:	f001 fd83 	bl	8007d94 <vPortFree>
 800628e:	e001      	b.n	8006294 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006290:	2300      	movs	r3, #0
 8006292:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d017      	beq.n	80062ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062a2:	88fa      	ldrh	r2, [r7, #6]
 80062a4:	2300      	movs	r3, #0
 80062a6:	9303      	str	r3, [sp, #12]
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	9302      	str	r3, [sp, #8]
 80062ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ae:	9301      	str	r3, [sp, #4]
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	68b9      	ldr	r1, [r7, #8]
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 f80e 	bl	80062da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062be:	69f8      	ldr	r0, [r7, #28]
 80062c0:	f000 f89c 	bl	80063fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062c4:	2301      	movs	r3, #1
 80062c6:	61bb      	str	r3, [r7, #24]
 80062c8:	e002      	b.n	80062d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062ca:	f04f 33ff 	mov.w	r3, #4294967295
 80062ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062d0:	69bb      	ldr	r3, [r7, #24]
	}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3720      	adds	r7, #32
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b088      	sub	sp, #32
 80062de:	af00      	add	r7, sp, #0
 80062e0:	60f8      	str	r0, [r7, #12]
 80062e2:	60b9      	str	r1, [r7, #8]
 80062e4:	607a      	str	r2, [r7, #4]
 80062e6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80062e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	461a      	mov	r2, r3
 80062f2:	21a5      	movs	r1, #165	; 0xa5
 80062f4:	f003 fb31 	bl	800995a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006302:	3b01      	subs	r3, #1
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	f023 0307 	bic.w	r3, r3, #7
 8006310:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	f003 0307 	and.w	r3, r3, #7
 8006318:	2b00      	cmp	r3, #0
 800631a:	d009      	beq.n	8006330 <prvInitialiseNewTask+0x56>
 800631c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006320:	f383 8811 	msr	BASEPRI, r3
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	617b      	str	r3, [r7, #20]
 800632e:	e7fe      	b.n	800632e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d01f      	beq.n	8006376 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006336:	2300      	movs	r3, #0
 8006338:	61fb      	str	r3, [r7, #28]
 800633a:	e012      	b.n	8006362 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	4413      	add	r3, r2
 8006342:	7819      	ldrb	r1, [r3, #0]
 8006344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	4413      	add	r3, r2
 800634a:	3334      	adds	r3, #52	; 0x34
 800634c:	460a      	mov	r2, r1
 800634e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	4413      	add	r3, r2
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d006      	beq.n	800636a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	3301      	adds	r3, #1
 8006360:	61fb      	str	r3, [r7, #28]
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	2b0f      	cmp	r3, #15
 8006366:	d9e9      	bls.n	800633c <prvInitialiseNewTask+0x62>
 8006368:	e000      	b.n	800636c <prvInitialiseNewTask+0x92>
			{
				break;
 800636a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006374:	e003      	b.n	800637e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	2b37      	cmp	r3, #55	; 0x37
 8006382:	d901      	bls.n	8006388 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006384:	2337      	movs	r3, #55	; 0x37
 8006386:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800638c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006392:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006396:	2200      	movs	r2, #0
 8006398:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	3304      	adds	r3, #4
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fe ffca 	bl	8005338 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80063a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a6:	3318      	adds	r3, #24
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7fe ffc5 	bl	8005338 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80063ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80063ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80063c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c6:	2200      	movs	r2, #0
 80063c8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	2200      	movs	r2, #0
 80063ce:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	68f9      	ldr	r1, [r7, #12]
 80063dc:	69b8      	ldr	r0, [r7, #24]
 80063de:	f001 f9d7 	bl	8007790 <pxPortInitialiseStack>
 80063e2:	4602      	mov	r2, r0
 80063e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063f4:	bf00      	nop
 80063f6:	3720      	adds	r7, #32
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063fc:	b5b0      	push	{r4, r5, r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af02      	add	r7, sp, #8
 8006402:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006404:	f001 faea 	bl	80079dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006408:	4b3c      	ldr	r3, [pc, #240]	; (80064fc <prvAddNewTaskToReadyList+0x100>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3301      	adds	r3, #1
 800640e:	4a3b      	ldr	r2, [pc, #236]	; (80064fc <prvAddNewTaskToReadyList+0x100>)
 8006410:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006412:	4b3b      	ldr	r3, [pc, #236]	; (8006500 <prvAddNewTaskToReadyList+0x104>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d109      	bne.n	800642e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800641a:	4a39      	ldr	r2, [pc, #228]	; (8006500 <prvAddNewTaskToReadyList+0x104>)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006420:	4b36      	ldr	r3, [pc, #216]	; (80064fc <prvAddNewTaskToReadyList+0x100>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d110      	bne.n	800644a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006428:	f000 fc94 	bl	8006d54 <prvInitialiseTaskLists>
 800642c:	e00d      	b.n	800644a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800642e:	4b35      	ldr	r3, [pc, #212]	; (8006504 <prvAddNewTaskToReadyList+0x108>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d109      	bne.n	800644a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006436:	4b32      	ldr	r3, [pc, #200]	; (8006500 <prvAddNewTaskToReadyList+0x104>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006440:	429a      	cmp	r2, r3
 8006442:	d802      	bhi.n	800644a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006444:	4a2e      	ldr	r2, [pc, #184]	; (8006500 <prvAddNewTaskToReadyList+0x104>)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800644a:	4b2f      	ldr	r3, [pc, #188]	; (8006508 <prvAddNewTaskToReadyList+0x10c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3301      	adds	r3, #1
 8006450:	4a2d      	ldr	r2, [pc, #180]	; (8006508 <prvAddNewTaskToReadyList+0x10c>)
 8006452:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006454:	4b2c      	ldr	r3, [pc, #176]	; (8006508 <prvAddNewTaskToReadyList+0x10c>)
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d016      	beq.n	8006490 <prvAddNewTaskToReadyList+0x94>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4618      	mov	r0, r3
 8006466:	f002 fec7 	bl	80091f8 <SEGGER_SYSVIEW_OnTaskCreate>
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647a:	461d      	mov	r5, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	461c      	mov	r4, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006486:	1ae3      	subs	r3, r4, r3
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	462b      	mov	r3, r5
 800648c:	f003 f97e 	bl	800978c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4618      	mov	r0, r3
 8006494:	f002 ff34 	bl	8009300 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649c:	4b1b      	ldr	r3, [pc, #108]	; (800650c <prvAddNewTaskToReadyList+0x110>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d903      	bls.n	80064ac <prvAddNewTaskToReadyList+0xb0>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a8:	4a18      	ldr	r2, [pc, #96]	; (800650c <prvAddNewTaskToReadyList+0x110>)
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b0:	4613      	mov	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4a15      	ldr	r2, [pc, #84]	; (8006510 <prvAddNewTaskToReadyList+0x114>)
 80064ba:	441a      	add	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3304      	adds	r3, #4
 80064c0:	4619      	mov	r1, r3
 80064c2:	4610      	mov	r0, r2
 80064c4:	f7fe ff45 	bl	8005352 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80064c8:	f001 fab6 	bl	8007a38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80064cc:	4b0d      	ldr	r3, [pc, #52]	; (8006504 <prvAddNewTaskToReadyList+0x108>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00e      	beq.n	80064f2 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064d4:	4b0a      	ldr	r3, [pc, #40]	; (8006500 <prvAddNewTaskToReadyList+0x104>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064de:	429a      	cmp	r2, r3
 80064e0:	d207      	bcs.n	80064f2 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064e2:	4b0c      	ldr	r3, [pc, #48]	; (8006514 <prvAddNewTaskToReadyList+0x118>)
 80064e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064f2:	bf00      	nop
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bdb0      	pop	{r4, r5, r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20000d54 	.word	0x20000d54
 8006500:	20000880 	.word	0x20000880
 8006504:	20000d60 	.word	0x20000d60
 8006508:	20000d70 	.word	0x20000d70
 800650c:	20000d5c 	.word	0x20000d5c
 8006510:	20000884 	.word	0x20000884
 8006514:	e000ed04 	.word	0xe000ed04

08006518 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006520:	2300      	movs	r3, #0
 8006522:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d01a      	beq.n	8006560 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800652a:	4b15      	ldr	r3, [pc, #84]	; (8006580 <vTaskDelay+0x68>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d009      	beq.n	8006546 <vTaskDelay+0x2e>
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	60bb      	str	r3, [r7, #8]
 8006544:	e7fe      	b.n	8006544 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006546:	f000 f89b 	bl	8006680 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	2023      	movs	r0, #35	; 0x23
 800654e:	f002 f975 	bl	800883c <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006552:	2100      	movs	r1, #0
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fd81 	bl	800705c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800655a:	f000 f89f 	bl	800669c <xTaskResumeAll>
 800655e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d107      	bne.n	8006576 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006566:	4b07      	ldr	r3, [pc, #28]	; (8006584 <vTaskDelay+0x6c>)
 8006568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006576:	bf00      	nop
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20000d7c 	.word	0x20000d7c
 8006584:	e000ed04 	.word	0xe000ed04

08006588 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08a      	sub	sp, #40	; 0x28
 800658c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800658e:	2300      	movs	r3, #0
 8006590:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006592:	2300      	movs	r3, #0
 8006594:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006596:	463a      	mov	r2, r7
 8006598:	1d39      	adds	r1, r7, #4
 800659a:	f107 0308 	add.w	r3, r7, #8
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe fe76 	bl	8005290 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	9202      	str	r2, [sp, #8]
 80065ac:	9301      	str	r3, [sp, #4]
 80065ae:	2300      	movs	r3, #0
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	2300      	movs	r3, #0
 80065b4:	460a      	mov	r2, r1
 80065b6:	492b      	ldr	r1, [pc, #172]	; (8006664 <vTaskStartScheduler+0xdc>)
 80065b8:	482b      	ldr	r0, [pc, #172]	; (8006668 <vTaskStartScheduler+0xe0>)
 80065ba:	f7ff fdef 	bl	800619c <xTaskCreateStatic>
 80065be:	4602      	mov	r2, r0
 80065c0:	4b2a      	ldr	r3, [pc, #168]	; (800666c <vTaskStartScheduler+0xe4>)
 80065c2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80065c4:	4b29      	ldr	r3, [pc, #164]	; (800666c <vTaskStartScheduler+0xe4>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80065cc:	2301      	movs	r3, #1
 80065ce:	617b      	str	r3, [r7, #20]
 80065d0:	e001      	b.n	80065d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80065d2:	2300      	movs	r3, #0
 80065d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d102      	bne.n	80065e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80065dc:	f000 fd92 	bl	8007104 <xTimerCreateTimerTask>
 80065e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d12a      	bne.n	800663e <vTaskStartScheduler+0xb6>
 80065e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065fa:	4b1d      	ldr	r3, [pc, #116]	; (8006670 <vTaskStartScheduler+0xe8>)
 80065fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006600:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006602:	4b1c      	ldr	r3, [pc, #112]	; (8006674 <vTaskStartScheduler+0xec>)
 8006604:	2201      	movs	r2, #1
 8006606:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006608:	4b1b      	ldr	r3, [pc, #108]	; (8006678 <vTaskStartScheduler+0xf0>)
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800660e:	f7fa f807 	bl	8000620 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();
 8006612:	4b1a      	ldr	r3, [pc, #104]	; (800667c <vTaskStartScheduler+0xf4>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3334      	adds	r3, #52	; 0x34
 8006618:	2205      	movs	r2, #5
 800661a:	4912      	ldr	r1, [pc, #72]	; (8006664 <vTaskStartScheduler+0xdc>)
 800661c:	4618      	mov	r0, r3
 800661e:	f003 f969 	bl	80098f4 <memcmp>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <vTaskStartScheduler+0xac>
 8006628:	4b14      	ldr	r3, [pc, #80]	; (800667c <vTaskStartScheduler+0xf4>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4618      	mov	r0, r3
 800662e:	f002 fe25 	bl	800927c <SEGGER_SYSVIEW_OnTaskStartExec>
 8006632:	e001      	b.n	8006638 <vTaskStartScheduler+0xb0>
 8006634:	f002 fdc4 	bl	80091c0 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006638:	f001 f932 	bl	80078a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800663c:	e00d      	b.n	800665a <vTaskStartScheduler+0xd2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006644:	d109      	bne.n	800665a <vTaskStartScheduler+0xd2>
 8006646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	e7fe      	b.n	8006658 <vTaskStartScheduler+0xd0>
}
 800665a:	bf00      	nop
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	0800a1d0 	.word	0x0800a1d0
 8006668:	08006d25 	.word	0x08006d25
 800666c:	20000d78 	.word	0x20000d78
 8006670:	20000d74 	.word	0x20000d74
 8006674:	20000d60 	.word	0x20000d60
 8006678:	20000d58 	.word	0x20000d58
 800667c:	20000880 	.word	0x20000880

08006680 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006684:	4b04      	ldr	r3, [pc, #16]	; (8006698 <vTaskSuspendAll+0x18>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3301      	adds	r3, #1
 800668a:	4a03      	ldr	r2, [pc, #12]	; (8006698 <vTaskSuspendAll+0x18>)
 800668c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800668e:	bf00      	nop
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	20000d7c 	.word	0x20000d7c

0800669c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80066a2:	2300      	movs	r3, #0
 80066a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80066a6:	2300      	movs	r3, #0
 80066a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80066aa:	4b43      	ldr	r3, [pc, #268]	; (80067b8 <xTaskResumeAll+0x11c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d109      	bne.n	80066c6 <xTaskResumeAll+0x2a>
 80066b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	603b      	str	r3, [r7, #0]
 80066c4:	e7fe      	b.n	80066c4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80066c6:	f001 f989 	bl	80079dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80066ca:	4b3b      	ldr	r3, [pc, #236]	; (80067b8 <xTaskResumeAll+0x11c>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	4a39      	ldr	r2, [pc, #228]	; (80067b8 <xTaskResumeAll+0x11c>)
 80066d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066d4:	4b38      	ldr	r3, [pc, #224]	; (80067b8 <xTaskResumeAll+0x11c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d166      	bne.n	80067aa <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80066dc:	4b37      	ldr	r3, [pc, #220]	; (80067bc <xTaskResumeAll+0x120>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d062      	beq.n	80067aa <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066e4:	e033      	b.n	800674e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066e6:	4b36      	ldr	r3, [pc, #216]	; (80067c0 <xTaskResumeAll+0x124>)
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	3318      	adds	r3, #24
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fe fe8a 	bl	800540c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	3304      	adds	r3, #4
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7fe fe85 	bl	800540c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4618      	mov	r0, r3
 8006706:	f002 fdfb 	bl	8009300 <SEGGER_SYSVIEW_OnTaskStartReady>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800670e:	4b2d      	ldr	r3, [pc, #180]	; (80067c4 <xTaskResumeAll+0x128>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	429a      	cmp	r2, r3
 8006714:	d903      	bls.n	800671e <xTaskResumeAll+0x82>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671a:	4a2a      	ldr	r2, [pc, #168]	; (80067c4 <xTaskResumeAll+0x128>)
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4a27      	ldr	r2, [pc, #156]	; (80067c8 <xTaskResumeAll+0x12c>)
 800672c:	441a      	add	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	3304      	adds	r3, #4
 8006732:	4619      	mov	r1, r3
 8006734:	4610      	mov	r0, r2
 8006736:	f7fe fe0c 	bl	8005352 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673e:	4b23      	ldr	r3, [pc, #140]	; (80067cc <xTaskResumeAll+0x130>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	429a      	cmp	r2, r3
 8006746:	d302      	bcc.n	800674e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006748:	4b21      	ldr	r3, [pc, #132]	; (80067d0 <xTaskResumeAll+0x134>)
 800674a:	2201      	movs	r2, #1
 800674c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800674e:	4b1c      	ldr	r3, [pc, #112]	; (80067c0 <xTaskResumeAll+0x124>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1c7      	bne.n	80066e6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d001      	beq.n	8006760 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800675c:	f000 fbcc 	bl	8006ef8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006760:	4b1c      	ldr	r3, [pc, #112]	; (80067d4 <xTaskResumeAll+0x138>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d010      	beq.n	800678e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800676c:	f000 f858 	bl	8006820 <xTaskIncrementTick>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8006776:	4b16      	ldr	r3, [pc, #88]	; (80067d0 <xTaskResumeAll+0x134>)
 8006778:	2201      	movs	r2, #1
 800677a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	3b01      	subs	r3, #1
 8006780:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1f1      	bne.n	800676c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006788:	4b12      	ldr	r3, [pc, #72]	; (80067d4 <xTaskResumeAll+0x138>)
 800678a:	2200      	movs	r2, #0
 800678c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800678e:	4b10      	ldr	r3, [pc, #64]	; (80067d0 <xTaskResumeAll+0x134>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d009      	beq.n	80067aa <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006796:	2301      	movs	r3, #1
 8006798:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800679a:	4b0f      	ldr	r3, [pc, #60]	; (80067d8 <xTaskResumeAll+0x13c>)
 800679c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067aa:	f001 f945 	bl	8007a38 <vPortExitCritical>

	return xAlreadyYielded;
 80067ae:	68bb      	ldr	r3, [r7, #8]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	20000d7c 	.word	0x20000d7c
 80067bc:	20000d54 	.word	0x20000d54
 80067c0:	20000d14 	.word	0x20000d14
 80067c4:	20000d5c 	.word	0x20000d5c
 80067c8:	20000884 	.word	0x20000884
 80067cc:	20000880 	.word	0x20000880
 80067d0:	20000d68 	.word	0x20000d68
 80067d4:	20000d64 	.word	0x20000d64
 80067d8:	e000ed04 	.word	0xe000ed04

080067dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80067e2:	4b05      	ldr	r3, [pc, #20]	; (80067f8 <xTaskGetTickCount+0x1c>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80067e8:	687b      	ldr	r3, [r7, #4]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	20000d58 	.word	0x20000d58

080067fc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006802:	f001 f9c7 	bl	8007b94 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006806:	2300      	movs	r3, #0
 8006808:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800680a:	4b04      	ldr	r3, [pc, #16]	; (800681c <xTaskGetTickCountFromISR+0x20>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006810:	683b      	ldr	r3, [r7, #0]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000d58 	.word	0x20000d58

08006820 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006826:	2300      	movs	r3, #0
 8006828:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800682a:	4b50      	ldr	r3, [pc, #320]	; (800696c <xTaskIncrementTick+0x14c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	f040 808c 	bne.w	800694c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006834:	4b4e      	ldr	r3, [pc, #312]	; (8006970 <xTaskIncrementTick+0x150>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	3301      	adds	r3, #1
 800683a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800683c:	4a4c      	ldr	r2, [pc, #304]	; (8006970 <xTaskIncrementTick+0x150>)
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d11f      	bne.n	8006888 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006848:	4b4a      	ldr	r3, [pc, #296]	; (8006974 <xTaskIncrementTick+0x154>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d009      	beq.n	8006866 <xTaskIncrementTick+0x46>
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	603b      	str	r3, [r7, #0]
 8006864:	e7fe      	b.n	8006864 <xTaskIncrementTick+0x44>
 8006866:	4b43      	ldr	r3, [pc, #268]	; (8006974 <xTaskIncrementTick+0x154>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	4b42      	ldr	r3, [pc, #264]	; (8006978 <xTaskIncrementTick+0x158>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a40      	ldr	r2, [pc, #256]	; (8006974 <xTaskIncrementTick+0x154>)
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	4a40      	ldr	r2, [pc, #256]	; (8006978 <xTaskIncrementTick+0x158>)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	4b40      	ldr	r3, [pc, #256]	; (800697c <xTaskIncrementTick+0x15c>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3301      	adds	r3, #1
 8006880:	4a3e      	ldr	r2, [pc, #248]	; (800697c <xTaskIncrementTick+0x15c>)
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	f000 fb38 	bl	8006ef8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006888:	4b3d      	ldr	r3, [pc, #244]	; (8006980 <xTaskIncrementTick+0x160>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	429a      	cmp	r2, r3
 8006890:	d34d      	bcc.n	800692e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006892:	4b38      	ldr	r3, [pc, #224]	; (8006974 <xTaskIncrementTick+0x154>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d104      	bne.n	80068a6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800689c:	4b38      	ldr	r3, [pc, #224]	; (8006980 <xTaskIncrementTick+0x160>)
 800689e:	f04f 32ff 	mov.w	r2, #4294967295
 80068a2:	601a      	str	r2, [r3, #0]
					break;
 80068a4:	e043      	b.n	800692e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068a6:	4b33      	ldr	r3, [pc, #204]	; (8006974 <xTaskIncrementTick+0x154>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d203      	bcs.n	80068c6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80068be:	4a30      	ldr	r2, [pc, #192]	; (8006980 <xTaskIncrementTick+0x160>)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80068c4:	e033      	b.n	800692e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	3304      	adds	r3, #4
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fe fd9e 	bl	800540c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d004      	beq.n	80068e2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	3318      	adds	r3, #24
 80068dc:	4618      	mov	r0, r3
 80068de:	f7fe fd95 	bl	800540c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f002 fd0b 	bl	8009300 <SEGGER_SYSVIEW_OnTaskStartReady>
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ee:	4b25      	ldr	r3, [pc, #148]	; (8006984 <xTaskIncrementTick+0x164>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d903      	bls.n	80068fe <xTaskIncrementTick+0xde>
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fa:	4a22      	ldr	r2, [pc, #136]	; (8006984 <xTaskIncrementTick+0x164>)
 80068fc:	6013      	str	r3, [r2, #0]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006902:	4613      	mov	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4a1f      	ldr	r2, [pc, #124]	; (8006988 <xTaskIncrementTick+0x168>)
 800690c:	441a      	add	r2, r3
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	3304      	adds	r3, #4
 8006912:	4619      	mov	r1, r3
 8006914:	4610      	mov	r0, r2
 8006916:	f7fe fd1c 	bl	8005352 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691e:	4b1b      	ldr	r3, [pc, #108]	; (800698c <xTaskIncrementTick+0x16c>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006924:	429a      	cmp	r2, r3
 8006926:	d3b4      	bcc.n	8006892 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006928:	2301      	movs	r3, #1
 800692a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800692c:	e7b1      	b.n	8006892 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800692e:	4b17      	ldr	r3, [pc, #92]	; (800698c <xTaskIncrementTick+0x16c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006934:	4914      	ldr	r1, [pc, #80]	; (8006988 <xTaskIncrementTick+0x168>)
 8006936:	4613      	mov	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	440b      	add	r3, r1
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d907      	bls.n	8006956 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006946:	2301      	movs	r3, #1
 8006948:	617b      	str	r3, [r7, #20]
 800694a:	e004      	b.n	8006956 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800694c:	4b10      	ldr	r3, [pc, #64]	; (8006990 <xTaskIncrementTick+0x170>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3301      	adds	r3, #1
 8006952:	4a0f      	ldr	r2, [pc, #60]	; (8006990 <xTaskIncrementTick+0x170>)
 8006954:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006956:	4b0f      	ldr	r3, [pc, #60]	; (8006994 <xTaskIncrementTick+0x174>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800695e:	2301      	movs	r3, #1
 8006960:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006962:	697b      	ldr	r3, [r7, #20]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	20000d7c 	.word	0x20000d7c
 8006970:	20000d58 	.word	0x20000d58
 8006974:	20000d0c 	.word	0x20000d0c
 8006978:	20000d10 	.word	0x20000d10
 800697c:	20000d6c 	.word	0x20000d6c
 8006980:	20000d74 	.word	0x20000d74
 8006984:	20000d5c 	.word	0x20000d5c
 8006988:	20000884 	.word	0x20000884
 800698c:	20000880 	.word	0x20000880
 8006990:	20000d64 	.word	0x20000d64
 8006994:	20000d68 	.word	0x20000d68

08006998 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800699e:	4b3c      	ldr	r3, [pc, #240]	; (8006a90 <vTaskSwitchContext+0xf8>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80069a6:	4b3b      	ldr	r3, [pc, #236]	; (8006a94 <vTaskSwitchContext+0xfc>)
 80069a8:	2201      	movs	r2, #1
 80069aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80069ac:	e06c      	b.n	8006a88 <vTaskSwitchContext+0xf0>
		xYieldPending = pdFALSE;
 80069ae:	4b39      	ldr	r3, [pc, #228]	; (8006a94 <vTaskSwitchContext+0xfc>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80069b4:	f7f9 fe3b 	bl	800062e <getRunTimeCounterValue>
 80069b8:	4602      	mov	r2, r0
 80069ba:	4b37      	ldr	r3, [pc, #220]	; (8006a98 <vTaskSwitchContext+0x100>)
 80069bc:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80069be:	4b36      	ldr	r3, [pc, #216]	; (8006a98 <vTaskSwitchContext+0x100>)
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	4b36      	ldr	r3, [pc, #216]	; (8006a9c <vTaskSwitchContext+0x104>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d909      	bls.n	80069de <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80069ca:	4b35      	ldr	r3, [pc, #212]	; (8006aa0 <vTaskSwitchContext+0x108>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069d0:	4a31      	ldr	r2, [pc, #196]	; (8006a98 <vTaskSwitchContext+0x100>)
 80069d2:	6810      	ldr	r0, [r2, #0]
 80069d4:	4a31      	ldr	r2, [pc, #196]	; (8006a9c <vTaskSwitchContext+0x104>)
 80069d6:	6812      	ldr	r2, [r2, #0]
 80069d8:	1a82      	subs	r2, r0, r2
 80069da:	440a      	add	r2, r1
 80069dc:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80069de:	4b2e      	ldr	r3, [pc, #184]	; (8006a98 <vTaskSwitchContext+0x100>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a2e      	ldr	r2, [pc, #184]	; (8006a9c <vTaskSwitchContext+0x104>)
 80069e4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069e6:	4b2f      	ldr	r3, [pc, #188]	; (8006aa4 <vTaskSwitchContext+0x10c>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	e00f      	b.n	8006a0e <vTaskSwitchContext+0x76>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d109      	bne.n	8006a08 <vTaskSwitchContext+0x70>
 80069f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	607b      	str	r3, [r7, #4]
 8006a06:	e7fe      	b.n	8006a06 <vTaskSwitchContext+0x6e>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	60fb      	str	r3, [r7, #12]
 8006a0e:	4926      	ldr	r1, [pc, #152]	; (8006aa8 <vTaskSwitchContext+0x110>)
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4613      	mov	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	440b      	add	r3, r1
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0e5      	beq.n	80069ee <vTaskSwitchContext+0x56>
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4a1e      	ldr	r2, [pc, #120]	; (8006aa8 <vTaskSwitchContext+0x110>)
 8006a2e:	4413      	add	r3, r2
 8006a30:	60bb      	str	r3, [r7, #8]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	605a      	str	r2, [r3, #4]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	3308      	adds	r3, #8
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d104      	bne.n	8006a52 <vTaskSwitchContext+0xba>
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	605a      	str	r2, [r3, #4]
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	4a11      	ldr	r2, [pc, #68]	; (8006aa0 <vTaskSwitchContext+0x108>)
 8006a5a:	6013      	str	r3, [r2, #0]
 8006a5c:	4a11      	ldr	r2, [pc, #68]	; (8006aa4 <vTaskSwitchContext+0x10c>)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8006a62:	4b0f      	ldr	r3, [pc, #60]	; (8006aa0 <vTaskSwitchContext+0x108>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3334      	adds	r3, #52	; 0x34
 8006a68:	2205      	movs	r2, #5
 8006a6a:	4910      	ldr	r1, [pc, #64]	; (8006aac <vTaskSwitchContext+0x114>)
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f002 ff41 	bl	80098f4 <memcmp>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d005      	beq.n	8006a84 <vTaskSwitchContext+0xec>
 8006a78:	4b09      	ldr	r3, [pc, #36]	; (8006aa0 <vTaskSwitchContext+0x108>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f002 fbfd 	bl	800927c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8006a82:	e001      	b.n	8006a88 <vTaskSwitchContext+0xf0>
		traceTASK_SWITCHED_IN();
 8006a84:	f002 fb9c 	bl	80091c0 <SEGGER_SYSVIEW_OnIdle>
}
 8006a88:	bf00      	nop
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	20000d7c 	.word	0x20000d7c
 8006a94:	20000d68 	.word	0x20000d68
 8006a98:	20000d84 	.word	0x20000d84
 8006a9c:	20000d80 	.word	0x20000d80
 8006aa0:	20000880 	.word	0x20000880
 8006aa4:	20000d5c 	.word	0x20000d5c
 8006aa8:	20000884 	.word	0x20000884
 8006aac:	0800a1d0 	.word	0x0800a1d0

08006ab0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d109      	bne.n	8006ad4 <vTaskPlaceOnEventList+0x24>
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	60fb      	str	r3, [r7, #12]
 8006ad2:	e7fe      	b.n	8006ad2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ad4:	4b07      	ldr	r3, [pc, #28]	; (8006af4 <vTaskPlaceOnEventList+0x44>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3318      	adds	r3, #24
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7fe fc5c 	bl	800539a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	6838      	ldr	r0, [r7, #0]
 8006ae6:	f000 fab9 	bl	800705c <prvAddCurrentTaskToDelayedList>
}
 8006aea:	bf00      	nop
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	20000880 	.word	0x20000880

08006af8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d109      	bne.n	8006b1e <vTaskPlaceOnEventListRestricted+0x26>
 8006b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	e7fe      	b.n	8006b1c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b1e:	4b0c      	ldr	r3, [pc, #48]	; (8006b50 <vTaskPlaceOnEventListRestricted+0x58>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3318      	adds	r3, #24
 8006b24:	4619      	mov	r1, r3
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f7fe fc13 	bl	8005352 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d002      	beq.n	8006b38 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006b32:	f04f 33ff 	mov.w	r3, #4294967295
 8006b36:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8006b38:	2024      	movs	r0, #36	; 0x24
 8006b3a:	f001 fe61 	bl	8008800 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	68b8      	ldr	r0, [r7, #8]
 8006b42:	f000 fa8b 	bl	800705c <prvAddCurrentTaskToDelayedList>
	}
 8006b46:	bf00      	nop
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000880 	.word	0x20000880

08006b54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d109      	bne.n	8006b7e <xTaskRemoveFromEventList+0x2a>
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	60fb      	str	r3, [r7, #12]
 8006b7c:	e7fe      	b.n	8006b7c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	3318      	adds	r3, #24
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fe fc42 	bl	800540c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b88:	4b1f      	ldr	r3, [pc, #124]	; (8006c08 <xTaskRemoveFromEventList+0xb4>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d121      	bne.n	8006bd4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	3304      	adds	r3, #4
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fe fc39 	bl	800540c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f002 fbaf 	bl	8009300 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba6:	4b19      	ldr	r3, [pc, #100]	; (8006c0c <xTaskRemoveFromEventList+0xb8>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d903      	bls.n	8006bb6 <xTaskRemoveFromEventList+0x62>
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb2:	4a16      	ldr	r2, [pc, #88]	; (8006c0c <xTaskRemoveFromEventList+0xb8>)
 8006bb4:	6013      	str	r3, [r2, #0]
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bba:	4613      	mov	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4a13      	ldr	r2, [pc, #76]	; (8006c10 <xTaskRemoveFromEventList+0xbc>)
 8006bc4:	441a      	add	r2, r3
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	3304      	adds	r3, #4
 8006bca:	4619      	mov	r1, r3
 8006bcc:	4610      	mov	r0, r2
 8006bce:	f7fe fbc0 	bl	8005352 <vListInsertEnd>
 8006bd2:	e005      	b.n	8006be0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	3318      	adds	r3, #24
 8006bd8:	4619      	mov	r1, r3
 8006bda:	480e      	ldr	r0, [pc, #56]	; (8006c14 <xTaskRemoveFromEventList+0xc0>)
 8006bdc:	f7fe fbb9 	bl	8005352 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be4:	4b0c      	ldr	r3, [pc, #48]	; (8006c18 <xTaskRemoveFromEventList+0xc4>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d905      	bls.n	8006bfa <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006bf2:	4b0a      	ldr	r3, [pc, #40]	; (8006c1c <xTaskRemoveFromEventList+0xc8>)
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	e001      	b.n	8006bfe <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006bfe:	697b      	ldr	r3, [r7, #20]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3718      	adds	r7, #24
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	20000d7c 	.word	0x20000d7c
 8006c0c:	20000d5c 	.word	0x20000d5c
 8006c10:	20000884 	.word	0x20000884
 8006c14:	20000d14 	.word	0x20000d14
 8006c18:	20000880 	.word	0x20000880
 8006c1c:	20000d68 	.word	0x20000d68

08006c20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c28:	4b06      	ldr	r3, [pc, #24]	; (8006c44 <vTaskInternalSetTimeOutState+0x24>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c30:	4b05      	ldr	r3, [pc, #20]	; (8006c48 <vTaskInternalSetTimeOutState+0x28>)
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	605a      	str	r2, [r3, #4]
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	20000d6c 	.word	0x20000d6c
 8006c48:	20000d58 	.word	0x20000d58

08006c4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d109      	bne.n	8006c70 <xTaskCheckForTimeOut+0x24>
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	613b      	str	r3, [r7, #16]
 8006c6e:	e7fe      	b.n	8006c6e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d109      	bne.n	8006c8a <xTaskCheckForTimeOut+0x3e>
 8006c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	e7fe      	b.n	8006c88 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006c8a:	f000 fea7 	bl	80079dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c8e:	4b1d      	ldr	r3, [pc, #116]	; (8006d04 <xTaskCheckForTimeOut+0xb8>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca6:	d102      	bne.n	8006cae <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	61fb      	str	r3, [r7, #28]
 8006cac:	e023      	b.n	8006cf6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	4b15      	ldr	r3, [pc, #84]	; (8006d08 <xTaskCheckForTimeOut+0xbc>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d007      	beq.n	8006cca <xTaskCheckForTimeOut+0x7e>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d302      	bcc.n	8006cca <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	61fb      	str	r3, [r7, #28]
 8006cc8:	e015      	b.n	8006cf6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d20b      	bcs.n	8006cec <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	1ad2      	subs	r2, r2, r3
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff ff9d 	bl	8006c20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	61fb      	str	r3, [r7, #28]
 8006cea:	e004      	b.n	8006cf6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006cf6:	f000 fe9f 	bl	8007a38 <vPortExitCritical>

	return xReturn;
 8006cfa:	69fb      	ldr	r3, [r7, #28]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3720      	adds	r7, #32
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	20000d58 	.word	0x20000d58
 8006d08:	20000d6c 	.word	0x20000d6c

08006d0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d10:	4b03      	ldr	r3, [pc, #12]	; (8006d20 <vTaskMissedYield+0x14>)
 8006d12:	2201      	movs	r2, #1
 8006d14:	601a      	str	r2, [r3, #0]
}
 8006d16:	bf00      	nop
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	20000d68 	.word	0x20000d68

08006d24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d2c:	f000 f852 	bl	8006dd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d30:	4b06      	ldr	r3, [pc, #24]	; (8006d4c <prvIdleTask+0x28>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d9f9      	bls.n	8006d2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d38:	4b05      	ldr	r3, [pc, #20]	; (8006d50 <prvIdleTask+0x2c>)
 8006d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d48:	e7f0      	b.n	8006d2c <prvIdleTask+0x8>
 8006d4a:	bf00      	nop
 8006d4c:	20000884 	.word	0x20000884
 8006d50:	e000ed04 	.word	0xe000ed04

08006d54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	607b      	str	r3, [r7, #4]
 8006d5e:	e00c      	b.n	8006d7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	4613      	mov	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4a12      	ldr	r2, [pc, #72]	; (8006db4 <prvInitialiseTaskLists+0x60>)
 8006d6c:	4413      	add	r3, r2
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fe fac2 	bl	80052f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3301      	adds	r3, #1
 8006d78:	607b      	str	r3, [r7, #4]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b37      	cmp	r3, #55	; 0x37
 8006d7e:	d9ef      	bls.n	8006d60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d80:	480d      	ldr	r0, [pc, #52]	; (8006db8 <prvInitialiseTaskLists+0x64>)
 8006d82:	f7fe fab9 	bl	80052f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d86:	480d      	ldr	r0, [pc, #52]	; (8006dbc <prvInitialiseTaskLists+0x68>)
 8006d88:	f7fe fab6 	bl	80052f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d8c:	480c      	ldr	r0, [pc, #48]	; (8006dc0 <prvInitialiseTaskLists+0x6c>)
 8006d8e:	f7fe fab3 	bl	80052f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d92:	480c      	ldr	r0, [pc, #48]	; (8006dc4 <prvInitialiseTaskLists+0x70>)
 8006d94:	f7fe fab0 	bl	80052f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d98:	480b      	ldr	r0, [pc, #44]	; (8006dc8 <prvInitialiseTaskLists+0x74>)
 8006d9a:	f7fe faad 	bl	80052f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d9e:	4b0b      	ldr	r3, [pc, #44]	; (8006dcc <prvInitialiseTaskLists+0x78>)
 8006da0:	4a05      	ldr	r2, [pc, #20]	; (8006db8 <prvInitialiseTaskLists+0x64>)
 8006da2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006da4:	4b0a      	ldr	r3, [pc, #40]	; (8006dd0 <prvInitialiseTaskLists+0x7c>)
 8006da6:	4a05      	ldr	r2, [pc, #20]	; (8006dbc <prvInitialiseTaskLists+0x68>)
 8006da8:	601a      	str	r2, [r3, #0]
}
 8006daa:	bf00      	nop
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	20000884 	.word	0x20000884
 8006db8:	20000ce4 	.word	0x20000ce4
 8006dbc:	20000cf8 	.word	0x20000cf8
 8006dc0:	20000d14 	.word	0x20000d14
 8006dc4:	20000d28 	.word	0x20000d28
 8006dc8:	20000d40 	.word	0x20000d40
 8006dcc:	20000d0c 	.word	0x20000d0c
 8006dd0:	20000d10 	.word	0x20000d10

08006dd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dda:	e019      	b.n	8006e10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ddc:	f000 fdfe 	bl	80079dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006de0:	4b0f      	ldr	r3, [pc, #60]	; (8006e20 <prvCheckTasksWaitingTermination+0x4c>)
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3304      	adds	r3, #4
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fe fb0d 	bl	800540c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006df2:	4b0c      	ldr	r3, [pc, #48]	; (8006e24 <prvCheckTasksWaitingTermination+0x50>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	4a0a      	ldr	r2, [pc, #40]	; (8006e24 <prvCheckTasksWaitingTermination+0x50>)
 8006dfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006dfc:	4b0a      	ldr	r3, [pc, #40]	; (8006e28 <prvCheckTasksWaitingTermination+0x54>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	4a09      	ldr	r2, [pc, #36]	; (8006e28 <prvCheckTasksWaitingTermination+0x54>)
 8006e04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e06:	f000 fe17 	bl	8007a38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f846 	bl	8006e9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e10:	4b05      	ldr	r3, [pc, #20]	; (8006e28 <prvCheckTasksWaitingTermination+0x54>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e1      	bne.n	8006ddc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e18:	bf00      	nop
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	20000d28 	.word	0x20000d28
 8006e24:	20000d54 	.word	0x20000d54
 8006e28:	20000d3c 	.word	0x20000d3c

08006e2c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8006e34:	2300      	movs	r3, #0
 8006e36:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006e38:	e005      	b.n	8006e46 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	3301      	adds	r3, #1
 8006e44:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	2ba5      	cmp	r3, #165	; 0xa5
 8006e4c:	d0f5      	beq.n	8006e3a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	089b      	lsrs	r3, r3, #2
 8006e52:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	b29b      	uxth	r3, r3
	}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d102      	bne.n	8006e78 <uxTaskGetStackHighWaterMark+0x14>
 8006e72:	4b09      	ldr	r3, [pc, #36]	; (8006e98 <uxTaskGetStackHighWaterMark+0x34>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	e000      	b.n	8006e7a <uxTaskGetStackHighWaterMark+0x16>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e80:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8006e82:	6938      	ldr	r0, [r7, #16]
 8006e84:	f7ff ffd2 	bl	8006e2c <prvTaskCheckFreeStackSpace>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
	}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	20000880 	.word	0x20000880

08006e9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d108      	bne.n	8006ec0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 ff6e 	bl	8007d94 <vPortFree>
				vPortFree( pxTCB );
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 ff6b 	bl	8007d94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ebe:	e017      	b.n	8006ef0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d103      	bne.n	8006ed2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 ff62 	bl	8007d94 <vPortFree>
	}
 8006ed0:	e00e      	b.n	8006ef0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d009      	beq.n	8006ef0 <prvDeleteTCB+0x54>
 8006edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	60fb      	str	r3, [r7, #12]
 8006eee:	e7fe      	b.n	8006eee <prvDeleteTCB+0x52>
	}
 8006ef0:	bf00      	nop
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006efe:	4b0c      	ldr	r3, [pc, #48]	; (8006f30 <prvResetNextTaskUnblockTime+0x38>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d104      	bne.n	8006f12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f08:	4b0a      	ldr	r3, [pc, #40]	; (8006f34 <prvResetNextTaskUnblockTime+0x3c>)
 8006f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f10:	e008      	b.n	8006f24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f12:	4b07      	ldr	r3, [pc, #28]	; (8006f30 <prvResetNextTaskUnblockTime+0x38>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	4a04      	ldr	r2, [pc, #16]	; (8006f34 <prvResetNextTaskUnblockTime+0x3c>)
 8006f22:	6013      	str	r3, [r2, #0]
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	20000d0c 	.word	0x20000d0c
 8006f34:	20000d74 	.word	0x20000d74

08006f38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f3e:	4b0b      	ldr	r3, [pc, #44]	; (8006f6c <xTaskGetSchedulerState+0x34>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d102      	bne.n	8006f4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f46:	2301      	movs	r3, #1
 8006f48:	607b      	str	r3, [r7, #4]
 8006f4a:	e008      	b.n	8006f5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f4c:	4b08      	ldr	r3, [pc, #32]	; (8006f70 <xTaskGetSchedulerState+0x38>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d102      	bne.n	8006f5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f54:	2302      	movs	r3, #2
 8006f56:	607b      	str	r3, [r7, #4]
 8006f58:	e001      	b.n	8006f5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f5e:	687b      	ldr	r3, [r7, #4]
	}
 8006f60:	4618      	mov	r0, r3
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	20000d60 	.word	0x20000d60
 8006f70:	20000d7c 	.word	0x20000d7c

08006f74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f80:	2300      	movs	r3, #0
 8006f82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d05d      	beq.n	8007046 <xTaskPriorityDisinherit+0xd2>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f8a:	4b31      	ldr	r3, [pc, #196]	; (8007050 <xTaskPriorityDisinherit+0xdc>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d009      	beq.n	8006fa8 <xTaskPriorityDisinherit+0x34>
 8006f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	60fb      	str	r3, [r7, #12]
 8006fa6:	e7fe      	b.n	8006fa6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d109      	bne.n	8006fc4 <xTaskPriorityDisinherit+0x50>
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	60bb      	str	r3, [r7, #8]
 8006fc2:	e7fe      	b.n	8006fc2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc8:	1e5a      	subs	r2, r3, #1
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d035      	beq.n	8007046 <xTaskPriorityDisinherit+0xd2>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d131      	bne.n	8007046 <xTaskPriorityDisinherit+0xd2>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fe fa10 	bl	800540c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4619      	mov	r1, r3
 8006ff0:	204a      	movs	r0, #74	; 0x4a
 8006ff2:	f001 fc23 	bl	800883c <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007002:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	4618      	mov	r0, r3
 800700e:	f002 f977 	bl	8009300 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007016:	4b0f      	ldr	r3, [pc, #60]	; (8007054 <xTaskPriorityDisinherit+0xe0>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	429a      	cmp	r2, r3
 800701c:	d903      	bls.n	8007026 <xTaskPriorityDisinherit+0xb2>
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007022:	4a0c      	ldr	r2, [pc, #48]	; (8007054 <xTaskPriorityDisinherit+0xe0>)
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702a:	4613      	mov	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4a09      	ldr	r2, [pc, #36]	; (8007058 <xTaskPriorityDisinherit+0xe4>)
 8007034:	441a      	add	r2, r3
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	3304      	adds	r3, #4
 800703a:	4619      	mov	r1, r3
 800703c:	4610      	mov	r0, r2
 800703e:	f7fe f988 	bl	8005352 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007042:	2301      	movs	r3, #1
 8007044:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007046:	697b      	ldr	r3, [r7, #20]
	}
 8007048:	4618      	mov	r0, r3
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	20000880 	.word	0x20000880
 8007054:	20000d5c 	.word	0x20000d5c
 8007058:	20000884 	.word	0x20000884

0800705c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007066:	4b21      	ldr	r3, [pc, #132]	; (80070ec <prvAddCurrentTaskToDelayedList+0x90>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800706c:	4b20      	ldr	r3, [pc, #128]	; (80070f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3304      	adds	r3, #4
 8007072:	4618      	mov	r0, r3
 8007074:	f7fe f9ca 	bl	800540c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707e:	d10a      	bne.n	8007096 <prvAddCurrentTaskToDelayedList+0x3a>
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d007      	beq.n	8007096 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007086:	4b1a      	ldr	r3, [pc, #104]	; (80070f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3304      	adds	r3, #4
 800708c:	4619      	mov	r1, r3
 800708e:	4819      	ldr	r0, [pc, #100]	; (80070f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007090:	f7fe f95f 	bl	8005352 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007094:	e026      	b.n	80070e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4413      	add	r3, r2
 800709c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800709e:	4b14      	ldr	r3, [pc, #80]	; (80070f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d209      	bcs.n	80070c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070ae:	4b12      	ldr	r3, [pc, #72]	; (80070f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	4b0f      	ldr	r3, [pc, #60]	; (80070f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3304      	adds	r3, #4
 80070b8:	4619      	mov	r1, r3
 80070ba:	4610      	mov	r0, r2
 80070bc:	f7fe f96d 	bl	800539a <vListInsert>
}
 80070c0:	e010      	b.n	80070e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070c2:	4b0e      	ldr	r3, [pc, #56]	; (80070fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	4b0a      	ldr	r3, [pc, #40]	; (80070f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3304      	adds	r3, #4
 80070cc:	4619      	mov	r1, r3
 80070ce:	4610      	mov	r0, r2
 80070d0:	f7fe f963 	bl	800539a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070d4:	4b0a      	ldr	r3, [pc, #40]	; (8007100 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d202      	bcs.n	80070e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80070de:	4a08      	ldr	r2, [pc, #32]	; (8007100 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	6013      	str	r3, [r2, #0]
}
 80070e4:	bf00      	nop
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	20000d58 	.word	0x20000d58
 80070f0:	20000880 	.word	0x20000880
 80070f4:	20000d40 	.word	0x20000d40
 80070f8:	20000d10 	.word	0x20000d10
 80070fc:	20000d0c 	.word	0x20000d0c
 8007100:	20000d74 	.word	0x20000d74

08007104 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b08a      	sub	sp, #40	; 0x28
 8007108:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800710a:	2300      	movs	r3, #0
 800710c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800710e:	f000 faff 	bl	8007710 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007112:	4b1c      	ldr	r3, [pc, #112]	; (8007184 <xTimerCreateTimerTask+0x80>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d021      	beq.n	800715e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800711a:	2300      	movs	r3, #0
 800711c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800711e:	2300      	movs	r3, #0
 8007120:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007122:	1d3a      	adds	r2, r7, #4
 8007124:	f107 0108 	add.w	r1, r7, #8
 8007128:	f107 030c 	add.w	r3, r7, #12
 800712c:	4618      	mov	r0, r3
 800712e:	f7fe f8c9 	bl	80052c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007132:	6879      	ldr	r1, [r7, #4]
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	9202      	str	r2, [sp, #8]
 800713a:	9301      	str	r3, [sp, #4]
 800713c:	2302      	movs	r3, #2
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	2300      	movs	r3, #0
 8007142:	460a      	mov	r2, r1
 8007144:	4910      	ldr	r1, [pc, #64]	; (8007188 <xTimerCreateTimerTask+0x84>)
 8007146:	4811      	ldr	r0, [pc, #68]	; (800718c <xTimerCreateTimerTask+0x88>)
 8007148:	f7ff f828 	bl	800619c <xTaskCreateStatic>
 800714c:	4602      	mov	r2, r0
 800714e:	4b10      	ldr	r3, [pc, #64]	; (8007190 <xTimerCreateTimerTask+0x8c>)
 8007150:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007152:	4b0f      	ldr	r3, [pc, #60]	; (8007190 <xTimerCreateTimerTask+0x8c>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800715a:	2301      	movs	r3, #1
 800715c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d109      	bne.n	8007178 <xTimerCreateTimerTask+0x74>
 8007164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	613b      	str	r3, [r7, #16]
 8007176:	e7fe      	b.n	8007176 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007178:	697b      	ldr	r3, [r7, #20]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20000db8 	.word	0x20000db8
 8007188:	0800a200 	.word	0x0800a200
 800718c:	080072c5 	.word	0x080072c5
 8007190:	20000dbc 	.word	0x20000dbc

08007194 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b08a      	sub	sp, #40	; 0x28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
 80071a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80071a2:	2300      	movs	r3, #0
 80071a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d109      	bne.n	80071c0 <xTimerGenericCommand+0x2c>
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	623b      	str	r3, [r7, #32]
 80071be:	e7fe      	b.n	80071be <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80071c0:	4b19      	ldr	r3, [pc, #100]	; (8007228 <xTimerGenericCommand+0x94>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d02a      	beq.n	800721e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2b05      	cmp	r3, #5
 80071d8:	dc18      	bgt.n	800720c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80071da:	f7ff fead 	bl	8006f38 <xTaskGetSchedulerState>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d109      	bne.n	80071f8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071e4:	4b10      	ldr	r3, [pc, #64]	; (8007228 <xTimerGenericCommand+0x94>)
 80071e6:	6818      	ldr	r0, [r3, #0]
 80071e8:	f107 0110 	add.w	r1, r7, #16
 80071ec:	2300      	movs	r3, #0
 80071ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071f0:	f7fe fb2c 	bl	800584c <xQueueGenericSend>
 80071f4:	6278      	str	r0, [r7, #36]	; 0x24
 80071f6:	e012      	b.n	800721e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80071f8:	4b0b      	ldr	r3, [pc, #44]	; (8007228 <xTimerGenericCommand+0x94>)
 80071fa:	6818      	ldr	r0, [r3, #0]
 80071fc:	f107 0110 	add.w	r1, r7, #16
 8007200:	2300      	movs	r3, #0
 8007202:	2200      	movs	r2, #0
 8007204:	f7fe fb22 	bl	800584c <xQueueGenericSend>
 8007208:	6278      	str	r0, [r7, #36]	; 0x24
 800720a:	e008      	b.n	800721e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800720c:	4b06      	ldr	r3, [pc, #24]	; (8007228 <xTimerGenericCommand+0x94>)
 800720e:	6818      	ldr	r0, [r3, #0]
 8007210:	f107 0110 	add.w	r1, r7, #16
 8007214:	2300      	movs	r3, #0
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	f7fe fc3a 	bl	8005a90 <xQueueGenericSendFromISR>
 800721c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007220:	4618      	mov	r0, r3
 8007222:	3728      	adds	r7, #40	; 0x28
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	20000db8 	.word	0x20000db8

0800722c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af02      	add	r7, sp, #8
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007236:	4b22      	ldr	r3, [pc, #136]	; (80072c0 <prvProcessExpiredTimer+0x94>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	3304      	adds	r3, #4
 8007244:	4618      	mov	r0, r3
 8007246:	f7fe f8e1 	bl	800540c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007250:	f003 0304 	and.w	r3, r3, #4
 8007254:	2b00      	cmp	r3, #0
 8007256:	d021      	beq.n	800729c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	699a      	ldr	r2, [r3, #24]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	18d1      	adds	r1, r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	6978      	ldr	r0, [r7, #20]
 8007266:	f000 f8d1 	bl	800740c <prvInsertTimerInActiveList>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d01e      	beq.n	80072ae <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007270:	2300      	movs	r3, #0
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	2300      	movs	r3, #0
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	2100      	movs	r1, #0
 800727a:	6978      	ldr	r0, [r7, #20]
 800727c:	f7ff ff8a 	bl	8007194 <xTimerGenericCommand>
 8007280:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d112      	bne.n	80072ae <prvProcessExpiredTimer+0x82>
 8007288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	60fb      	str	r3, [r7, #12]
 800729a:	e7fe      	b.n	800729a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072a2:	f023 0301 	bic.w	r3, r3, #1
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	6a1b      	ldr	r3, [r3, #32]
 80072b2:	6978      	ldr	r0, [r7, #20]
 80072b4:	4798      	blx	r3
}
 80072b6:	bf00      	nop
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	20000db0 	.word	0x20000db0

080072c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072cc:	f107 0308 	add.w	r3, r7, #8
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 f857 	bl	8007384 <prvGetNextExpireTime>
 80072d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	4619      	mov	r1, r3
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f000 f803 	bl	80072e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80072e2:	f000 f8d5 	bl	8007490 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072e6:	e7f1      	b.n	80072cc <prvTimerTask+0x8>

080072e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80072f2:	f7ff f9c5 	bl	8006680 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072f6:	f107 0308 	add.w	r3, r7, #8
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 f866 	bl	80073cc <prvSampleTimeNow>
 8007300:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d130      	bne.n	800736a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10a      	bne.n	8007324 <prvProcessTimerOrBlockTask+0x3c>
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	429a      	cmp	r2, r3
 8007314:	d806      	bhi.n	8007324 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007316:	f7ff f9c1 	bl	800669c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800731a:	68f9      	ldr	r1, [r7, #12]
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f7ff ff85 	bl	800722c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007322:	e024      	b.n	800736e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d008      	beq.n	800733c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800732a:	4b13      	ldr	r3, [pc, #76]	; (8007378 <prvProcessTimerOrBlockTask+0x90>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <prvProcessTimerOrBlockTask+0x50>
 8007334:	2301      	movs	r3, #1
 8007336:	e000      	b.n	800733a <prvProcessTimerOrBlockTask+0x52>
 8007338:	2300      	movs	r3, #0
 800733a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800733c:	4b0f      	ldr	r3, [pc, #60]	; (800737c <prvProcessTimerOrBlockTask+0x94>)
 800733e:	6818      	ldr	r0, [r3, #0]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	4619      	mov	r1, r3
 800734a:	f7fe fef3 	bl	8006134 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800734e:	f7ff f9a5 	bl	800669c <xTaskResumeAll>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10a      	bne.n	800736e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007358:	4b09      	ldr	r3, [pc, #36]	; (8007380 <prvProcessTimerOrBlockTask+0x98>)
 800735a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	f3bf 8f6f 	isb	sy
}
 8007368:	e001      	b.n	800736e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800736a:	f7ff f997 	bl	800669c <xTaskResumeAll>
}
 800736e:	bf00      	nop
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	20000db4 	.word	0x20000db4
 800737c:	20000db8 	.word	0x20000db8
 8007380:	e000ed04 	.word	0xe000ed04

08007384 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800738c:	4b0e      	ldr	r3, [pc, #56]	; (80073c8 <prvGetNextExpireTime+0x44>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <prvGetNextExpireTime+0x16>
 8007396:	2201      	movs	r2, #1
 8007398:	e000      	b.n	800739c <prvGetNextExpireTime+0x18>
 800739a:	2200      	movs	r2, #0
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d105      	bne.n	80073b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073a8:	4b07      	ldr	r3, [pc, #28]	; (80073c8 <prvGetNextExpireTime+0x44>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	60fb      	str	r3, [r7, #12]
 80073b2:	e001      	b.n	80073b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80073b8:	68fb      	ldr	r3, [r7, #12]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	20000db0 	.word	0x20000db0

080073cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80073d4:	f7ff fa02 	bl	80067dc <xTaskGetTickCount>
 80073d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80073da:	4b0b      	ldr	r3, [pc, #44]	; (8007408 <prvSampleTimeNow+0x3c>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d205      	bcs.n	80073f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80073e4:	f000 f930 	bl	8007648 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	e002      	b.n	80073f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80073f6:	4a04      	ldr	r2, [pc, #16]	; (8007408 <prvSampleTimeNow+0x3c>)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80073fc:	68fb      	ldr	r3, [r7, #12]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	20000dc0 	.word	0x20000dc0

0800740c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
 8007418:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800741a:	2300      	movs	r3, #0
 800741c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	429a      	cmp	r2, r3
 8007430:	d812      	bhi.n	8007458 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	1ad2      	subs	r2, r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	429a      	cmp	r2, r3
 800743e:	d302      	bcc.n	8007446 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007440:	2301      	movs	r3, #1
 8007442:	617b      	str	r3, [r7, #20]
 8007444:	e01b      	b.n	800747e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007446:	4b10      	ldr	r3, [pc, #64]	; (8007488 <prvInsertTimerInActiveList+0x7c>)
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3304      	adds	r3, #4
 800744e:	4619      	mov	r1, r3
 8007450:	4610      	mov	r0, r2
 8007452:	f7fd ffa2 	bl	800539a <vListInsert>
 8007456:	e012      	b.n	800747e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	429a      	cmp	r2, r3
 800745e:	d206      	bcs.n	800746e <prvInsertTimerInActiveList+0x62>
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	429a      	cmp	r2, r3
 8007466:	d302      	bcc.n	800746e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007468:	2301      	movs	r3, #1
 800746a:	617b      	str	r3, [r7, #20]
 800746c:	e007      	b.n	800747e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800746e:	4b07      	ldr	r3, [pc, #28]	; (800748c <prvInsertTimerInActiveList+0x80>)
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3304      	adds	r3, #4
 8007476:	4619      	mov	r1, r3
 8007478:	4610      	mov	r0, r2
 800747a:	f7fd ff8e 	bl	800539a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800747e:	697b      	ldr	r3, [r7, #20]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	20000db4 	.word	0x20000db4
 800748c:	20000db0 	.word	0x20000db0

08007490 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b08e      	sub	sp, #56	; 0x38
 8007494:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007496:	e0c6      	b.n	8007626 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	da17      	bge.n	80074ce <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800749e:	1d3b      	adds	r3, r7, #4
 80074a0:	3304      	adds	r3, #4
 80074a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80074a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d109      	bne.n	80074be <prvProcessReceivedCommands+0x2e>
 80074aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	61fb      	str	r3, [r7, #28]
 80074bc:	e7fe      	b.n	80074bc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80074be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074c4:	6850      	ldr	r0, [r2, #4]
 80074c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074c8:	6892      	ldr	r2, [r2, #8]
 80074ca:	4611      	mov	r1, r2
 80074cc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f2c0 80a7 	blt.w	8007624 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d004      	beq.n	80074ec <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e4:	3304      	adds	r3, #4
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fd ff90 	bl	800540c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074ec:	463b      	mov	r3, r7
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7ff ff6c 	bl	80073cc <prvSampleTimeNow>
 80074f4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b09      	cmp	r3, #9
 80074fa:	f200 8094 	bhi.w	8007626 <prvProcessReceivedCommands+0x196>
 80074fe:	a201      	add	r2, pc, #4	; (adr r2, 8007504 <prvProcessReceivedCommands+0x74>)
 8007500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007504:	0800752d 	.word	0x0800752d
 8007508:	0800752d 	.word	0x0800752d
 800750c:	0800752d 	.word	0x0800752d
 8007510:	0800759f 	.word	0x0800759f
 8007514:	080075b3 	.word	0x080075b3
 8007518:	080075fb 	.word	0x080075fb
 800751c:	0800752d 	.word	0x0800752d
 8007520:	0800752d 	.word	0x0800752d
 8007524:	0800759f 	.word	0x0800759f
 8007528:	080075b3 	.word	0x080075b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800752c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007532:	f043 0301 	orr.w	r3, r3, #1
 8007536:	b2da      	uxtb	r2, r3
 8007538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	18d1      	adds	r1, r2, r3
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800754a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800754c:	f7ff ff5e 	bl	800740c <prvInsertTimerInActiveList>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d067      	beq.n	8007626 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800755c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007564:	f003 0304 	and.w	r3, r3, #4
 8007568:	2b00      	cmp	r3, #0
 800756a:	d05c      	beq.n	8007626 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	441a      	add	r2, r3
 8007574:	2300      	movs	r3, #0
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	2300      	movs	r3, #0
 800757a:	2100      	movs	r1, #0
 800757c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800757e:	f7ff fe09 	bl	8007194 <xTimerGenericCommand>
 8007582:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d14d      	bne.n	8007626 <prvProcessReceivedCommands+0x196>
 800758a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	61bb      	str	r3, [r7, #24]
 800759c:	e7fe      	b.n	800759c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800759e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075a4:	f023 0301 	bic.w	r3, r3, #1
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80075b0:	e039      	b.n	8007626 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075b8:	f043 0301 	orr.w	r3, r3, #1
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80075ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d109      	bne.n	80075e6 <prvProcessReceivedCommands+0x156>
 80075d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	617b      	str	r3, [r7, #20]
 80075e4:	e7fe      	b.n	80075e4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e8:	699a      	ldr	r2, [r3, #24]
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	18d1      	adds	r1, r2, r3
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075f4:	f7ff ff0a 	bl	800740c <prvInsertTimerInActiveList>
					break;
 80075f8:	e015      	b.n	8007626 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80075fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007600:	f003 0302 	and.w	r3, r3, #2
 8007604:	2b00      	cmp	r3, #0
 8007606:	d103      	bne.n	8007610 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8007608:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800760a:	f000 fbc3 	bl	8007d94 <vPortFree>
 800760e:	e00a      	b.n	8007626 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007616:	f023 0301 	bic.w	r3, r3, #1
 800761a:	b2da      	uxtb	r2, r3
 800761c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007622:	e000      	b.n	8007626 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007624:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007626:	4b07      	ldr	r3, [pc, #28]	; (8007644 <prvProcessReceivedCommands+0x1b4>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	1d39      	adds	r1, r7, #4
 800762c:	2200      	movs	r2, #0
 800762e:	4618      	mov	r0, r3
 8007630:	f7fe fad6 	bl	8005be0 <xQueueReceive>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	f47f af2e 	bne.w	8007498 <prvProcessReceivedCommands+0x8>
	}
}
 800763c:	bf00      	nop
 800763e:	3730      	adds	r7, #48	; 0x30
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	20000db8 	.word	0x20000db8

08007648 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b088      	sub	sp, #32
 800764c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800764e:	e047      	b.n	80076e0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007650:	4b2d      	ldr	r3, [pc, #180]	; (8007708 <prvSwitchTimerLists+0xc0>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800765a:	4b2b      	ldr	r3, [pc, #172]	; (8007708 <prvSwitchTimerLists+0xc0>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	3304      	adds	r3, #4
 8007668:	4618      	mov	r0, r3
 800766a:	f7fd fecf 	bl	800540c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800767c:	f003 0304 	and.w	r3, r3, #4
 8007680:	2b00      	cmp	r3, #0
 8007682:	d02d      	beq.n	80076e0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	4413      	add	r3, r2
 800768c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	429a      	cmp	r2, r3
 8007694:	d90e      	bls.n	80076b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076a2:	4b19      	ldr	r3, [pc, #100]	; (8007708 <prvSwitchTimerLists+0xc0>)
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3304      	adds	r3, #4
 80076aa:	4619      	mov	r1, r3
 80076ac:	4610      	mov	r0, r2
 80076ae:	f7fd fe74 	bl	800539a <vListInsert>
 80076b2:	e015      	b.n	80076e0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076b4:	2300      	movs	r3, #0
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	2300      	movs	r3, #0
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	2100      	movs	r1, #0
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f7ff fd68 	bl	8007194 <xTimerGenericCommand>
 80076c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d109      	bne.n	80076e0 <prvSwitchTimerLists+0x98>
 80076cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	603b      	str	r3, [r7, #0]
 80076de:	e7fe      	b.n	80076de <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076e0:	4b09      	ldr	r3, [pc, #36]	; (8007708 <prvSwitchTimerLists+0xc0>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1b2      	bne.n	8007650 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076ea:	4b07      	ldr	r3, [pc, #28]	; (8007708 <prvSwitchTimerLists+0xc0>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076f0:	4b06      	ldr	r3, [pc, #24]	; (800770c <prvSwitchTimerLists+0xc4>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a04      	ldr	r2, [pc, #16]	; (8007708 <prvSwitchTimerLists+0xc0>)
 80076f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80076f8:	4a04      	ldr	r2, [pc, #16]	; (800770c <prvSwitchTimerLists+0xc4>)
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	6013      	str	r3, [r2, #0]
}
 80076fe:	bf00      	nop
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20000db0 	.word	0x20000db0
 800770c:	20000db4 	.word	0x20000db4

08007710 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007716:	f000 f961 	bl	80079dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800771a:	4b15      	ldr	r3, [pc, #84]	; (8007770 <prvCheckForValidListAndQueue+0x60>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d120      	bne.n	8007764 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007722:	4814      	ldr	r0, [pc, #80]	; (8007774 <prvCheckForValidListAndQueue+0x64>)
 8007724:	f7fd fde8 	bl	80052f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007728:	4813      	ldr	r0, [pc, #76]	; (8007778 <prvCheckForValidListAndQueue+0x68>)
 800772a:	f7fd fde5 	bl	80052f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800772e:	4b13      	ldr	r3, [pc, #76]	; (800777c <prvCheckForValidListAndQueue+0x6c>)
 8007730:	4a10      	ldr	r2, [pc, #64]	; (8007774 <prvCheckForValidListAndQueue+0x64>)
 8007732:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007734:	4b12      	ldr	r3, [pc, #72]	; (8007780 <prvCheckForValidListAndQueue+0x70>)
 8007736:	4a10      	ldr	r2, [pc, #64]	; (8007778 <prvCheckForValidListAndQueue+0x68>)
 8007738:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800773a:	2300      	movs	r3, #0
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	4b11      	ldr	r3, [pc, #68]	; (8007784 <prvCheckForValidListAndQueue+0x74>)
 8007740:	4a11      	ldr	r2, [pc, #68]	; (8007788 <prvCheckForValidListAndQueue+0x78>)
 8007742:	2110      	movs	r1, #16
 8007744:	200a      	movs	r0, #10
 8007746:	f7fd fef3 	bl	8005530 <xQueueGenericCreateStatic>
 800774a:	4602      	mov	r2, r0
 800774c:	4b08      	ldr	r3, [pc, #32]	; (8007770 <prvCheckForValidListAndQueue+0x60>)
 800774e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007750:	4b07      	ldr	r3, [pc, #28]	; (8007770 <prvCheckForValidListAndQueue+0x60>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d005      	beq.n	8007764 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007758:	4b05      	ldr	r3, [pc, #20]	; (8007770 <prvCheckForValidListAndQueue+0x60>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	490b      	ldr	r1, [pc, #44]	; (800778c <prvCheckForValidListAndQueue+0x7c>)
 800775e:	4618      	mov	r0, r3
 8007760:	f7fe fc8e 	bl	8006080 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007764:	f000 f968 	bl	8007a38 <vPortExitCritical>
}
 8007768:	bf00      	nop
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	20000db8 	.word	0x20000db8
 8007774:	20000d88 	.word	0x20000d88
 8007778:	20000d9c 	.word	0x20000d9c
 800777c:	20000db0 	.word	0x20000db0
 8007780:	20000db4 	.word	0x20000db4
 8007784:	20000e64 	.word	0x20000e64
 8007788:	20000dc4 	.word	0x20000dc4
 800778c:	0800a208 	.word	0x0800a208

08007790 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	3b04      	subs	r3, #4
 80077a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80077a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	3b04      	subs	r3, #4
 80077ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f023 0201 	bic.w	r2, r3, #1
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3b04      	subs	r3, #4
 80077be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077c0:	4a0c      	ldr	r2, [pc, #48]	; (80077f4 <pxPortInitialiseStack+0x64>)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	3b14      	subs	r3, #20
 80077ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	3b04      	subs	r3, #4
 80077d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f06f 0202 	mvn.w	r2, #2
 80077de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	3b20      	subs	r3, #32
 80077e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077e6:	68fb      	ldr	r3, [r7, #12]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr
 80077f4:	080077f9 	.word	0x080077f9

080077f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80077fe:	2300      	movs	r3, #0
 8007800:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007802:	4b11      	ldr	r3, [pc, #68]	; (8007848 <prvTaskExitError+0x50>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800780a:	d009      	beq.n	8007820 <prvTaskExitError+0x28>
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	60fb      	str	r3, [r7, #12]
 800781e:	e7fe      	b.n	800781e <prvTaskExitError+0x26>
 8007820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007824:	f383 8811 	msr	BASEPRI, r3
 8007828:	f3bf 8f6f 	isb	sy
 800782c:	f3bf 8f4f 	dsb	sy
 8007830:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007832:	bf00      	nop
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d0fc      	beq.n	8007834 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800783a:	bf00      	nop
 800783c:	3714      	adds	r7, #20
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	2000001c 	.word	0x2000001c
 800784c:	00000000 	.word	0x00000000

08007850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007850:	4b07      	ldr	r3, [pc, #28]	; (8007870 <pxCurrentTCBConst2>)
 8007852:	6819      	ldr	r1, [r3, #0]
 8007854:	6808      	ldr	r0, [r1, #0]
 8007856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785a:	f380 8809 	msr	PSP, r0
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f04f 0000 	mov.w	r0, #0
 8007866:	f380 8811 	msr	BASEPRI, r0
 800786a:	4770      	bx	lr
 800786c:	f3af 8000 	nop.w

08007870 <pxCurrentTCBConst2>:
 8007870:	20000880 	.word	0x20000880
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007874:	bf00      	nop
 8007876:	bf00      	nop

08007878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007878:	4808      	ldr	r0, [pc, #32]	; (800789c <prvPortStartFirstTask+0x24>)
 800787a:	6800      	ldr	r0, [r0, #0]
 800787c:	6800      	ldr	r0, [r0, #0]
 800787e:	f380 8808 	msr	MSP, r0
 8007882:	f04f 0000 	mov.w	r0, #0
 8007886:	f380 8814 	msr	CONTROL, r0
 800788a:	b662      	cpsie	i
 800788c:	b661      	cpsie	f
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	df00      	svc	0
 8007898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800789a:	bf00      	nop
 800789c:	e000ed08 	.word	0xe000ed08

080078a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078a6:	4b44      	ldr	r3, [pc, #272]	; (80079b8 <xPortStartScheduler+0x118>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a44      	ldr	r2, [pc, #272]	; (80079bc <xPortStartScheduler+0x11c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d109      	bne.n	80078c4 <xPortStartScheduler+0x24>
 80078b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	613b      	str	r3, [r7, #16]
 80078c2:	e7fe      	b.n	80078c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80078c4:	4b3c      	ldr	r3, [pc, #240]	; (80079b8 <xPortStartScheduler+0x118>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a3d      	ldr	r2, [pc, #244]	; (80079c0 <xPortStartScheduler+0x120>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d109      	bne.n	80078e2 <xPortStartScheduler+0x42>
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	e7fe      	b.n	80078e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078e2:	4b38      	ldr	r3, [pc, #224]	; (80079c4 <xPortStartScheduler+0x124>)
 80078e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	22ff      	movs	r2, #255	; 0xff
 80078f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078fc:	78fb      	ldrb	r3, [r7, #3]
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007904:	b2da      	uxtb	r2, r3
 8007906:	4b30      	ldr	r3, [pc, #192]	; (80079c8 <xPortStartScheduler+0x128>)
 8007908:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800790a:	4b30      	ldr	r3, [pc, #192]	; (80079cc <xPortStartScheduler+0x12c>)
 800790c:	2207      	movs	r2, #7
 800790e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007910:	e009      	b.n	8007926 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007912:	4b2e      	ldr	r3, [pc, #184]	; (80079cc <xPortStartScheduler+0x12c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	3b01      	subs	r3, #1
 8007918:	4a2c      	ldr	r2, [pc, #176]	; (80079cc <xPortStartScheduler+0x12c>)
 800791a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800791c:	78fb      	ldrb	r3, [r7, #3]
 800791e:	b2db      	uxtb	r3, r3
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	b2db      	uxtb	r3, r3
 8007924:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007926:	78fb      	ldrb	r3, [r7, #3]
 8007928:	b2db      	uxtb	r3, r3
 800792a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800792e:	2b80      	cmp	r3, #128	; 0x80
 8007930:	d0ef      	beq.n	8007912 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007932:	4b26      	ldr	r3, [pc, #152]	; (80079cc <xPortStartScheduler+0x12c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f1c3 0307 	rsb	r3, r3, #7
 800793a:	2b04      	cmp	r3, #4
 800793c:	d009      	beq.n	8007952 <xPortStartScheduler+0xb2>
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	60bb      	str	r3, [r7, #8]
 8007950:	e7fe      	b.n	8007950 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007952:	4b1e      	ldr	r3, [pc, #120]	; (80079cc <xPortStartScheduler+0x12c>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	021b      	lsls	r3, r3, #8
 8007958:	4a1c      	ldr	r2, [pc, #112]	; (80079cc <xPortStartScheduler+0x12c>)
 800795a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800795c:	4b1b      	ldr	r3, [pc, #108]	; (80079cc <xPortStartScheduler+0x12c>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007964:	4a19      	ldr	r2, [pc, #100]	; (80079cc <xPortStartScheduler+0x12c>)
 8007966:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	b2da      	uxtb	r2, r3
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007970:	4b17      	ldr	r3, [pc, #92]	; (80079d0 <xPortStartScheduler+0x130>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a16      	ldr	r2, [pc, #88]	; (80079d0 <xPortStartScheduler+0x130>)
 8007976:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800797a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800797c:	4b14      	ldr	r3, [pc, #80]	; (80079d0 <xPortStartScheduler+0x130>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a13      	ldr	r2, [pc, #76]	; (80079d0 <xPortStartScheduler+0x130>)
 8007982:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007986:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007988:	f000 f8d6 	bl	8007b38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800798c:	4b11      	ldr	r3, [pc, #68]	; (80079d4 <xPortStartScheduler+0x134>)
 800798e:	2200      	movs	r2, #0
 8007990:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007992:	f000 f8f5 	bl	8007b80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007996:	4b10      	ldr	r3, [pc, #64]	; (80079d8 <xPortStartScheduler+0x138>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a0f      	ldr	r2, [pc, #60]	; (80079d8 <xPortStartScheduler+0x138>)
 800799c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80079a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079a2:	f7ff ff69 	bl	8007878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079a6:	f7fe fff7 	bl	8006998 <vTaskSwitchContext>
	prvTaskExitError();
 80079aa:	f7ff ff25 	bl	80077f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3718      	adds	r7, #24
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	e000ed00 	.word	0xe000ed00
 80079bc:	410fc271 	.word	0x410fc271
 80079c0:	410fc270 	.word	0x410fc270
 80079c4:	e000e400 	.word	0xe000e400
 80079c8:	20000eb4 	.word	0x20000eb4
 80079cc:	20000eb8 	.word	0x20000eb8
 80079d0:	e000ed20 	.word	0xe000ed20
 80079d4:	2000001c 	.word	0x2000001c
 80079d8:	e000ef34 	.word	0xe000ef34

080079dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079f4:	4b0e      	ldr	r3, [pc, #56]	; (8007a30 <vPortEnterCritical+0x54>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	3301      	adds	r3, #1
 80079fa:	4a0d      	ldr	r2, [pc, #52]	; (8007a30 <vPortEnterCritical+0x54>)
 80079fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079fe:	4b0c      	ldr	r3, [pc, #48]	; (8007a30 <vPortEnterCritical+0x54>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d10e      	bne.n	8007a24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a06:	4b0b      	ldr	r3, [pc, #44]	; (8007a34 <vPortEnterCritical+0x58>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d009      	beq.n	8007a24 <vPortEnterCritical+0x48>
 8007a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	603b      	str	r3, [r7, #0]
 8007a22:	e7fe      	b.n	8007a22 <vPortEnterCritical+0x46>
	}
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	2000001c 	.word	0x2000001c
 8007a34:	e000ed04 	.word	0xe000ed04

08007a38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a3e:	4b11      	ldr	r3, [pc, #68]	; (8007a84 <vPortExitCritical+0x4c>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d109      	bne.n	8007a5a <vPortExitCritical+0x22>
 8007a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	607b      	str	r3, [r7, #4]
 8007a58:	e7fe      	b.n	8007a58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007a5a:	4b0a      	ldr	r3, [pc, #40]	; (8007a84 <vPortExitCritical+0x4c>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	4a08      	ldr	r2, [pc, #32]	; (8007a84 <vPortExitCritical+0x4c>)
 8007a62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a64:	4b07      	ldr	r3, [pc, #28]	; (8007a84 <vPortExitCritical+0x4c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d104      	bne.n	8007a76 <vPortExitCritical+0x3e>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a76:	bf00      	nop
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	2000001c 	.word	0x2000001c
	...

08007a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a90:	f3ef 8009 	mrs	r0, PSP
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	4b15      	ldr	r3, [pc, #84]	; (8007af0 <pxCurrentTCBConst>)
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	f01e 0f10 	tst.w	lr, #16
 8007aa0:	bf08      	it	eq
 8007aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aaa:	6010      	str	r0, [r2, #0]
 8007aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ab4:	f380 8811 	msr	BASEPRI, r0
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f7fe ff6a 	bl	8006998 <vTaskSwitchContext>
 8007ac4:	f04f 0000 	mov.w	r0, #0
 8007ac8:	f380 8811 	msr	BASEPRI, r0
 8007acc:	bc09      	pop	{r0, r3}
 8007ace:	6819      	ldr	r1, [r3, #0]
 8007ad0:	6808      	ldr	r0, [r1, #0]
 8007ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad6:	f01e 0f10 	tst.w	lr, #16
 8007ada:	bf08      	it	eq
 8007adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ae0:	f380 8809 	msr	PSP, r0
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	f3af 8000 	nop.w

08007af0 <pxCurrentTCBConst>:
 8007af0:	20000880 	.word	0x20000880
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007af4:	bf00      	nop
 8007af6:	bf00      	nop

08007af8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
	__asm volatile
 8007afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b10:	f7fe fe86 	bl	8006820 <xTaskIncrementTick>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b1a:	4b06      	ldr	r3, [pc, #24]	; (8007b34 <SysTick_Handler+0x3c>)
 8007b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	2300      	movs	r3, #0
 8007b24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b2c:	bf00      	nop
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	e000ed04 	.word	0xe000ed04

08007b38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b38:	b480      	push	{r7}
 8007b3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b3c:	4b0b      	ldr	r3, [pc, #44]	; (8007b6c <vPortSetupTimerInterrupt+0x34>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b42:	4b0b      	ldr	r3, [pc, #44]	; (8007b70 <vPortSetupTimerInterrupt+0x38>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b48:	4b0a      	ldr	r3, [pc, #40]	; (8007b74 <vPortSetupTimerInterrupt+0x3c>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a0a      	ldr	r2, [pc, #40]	; (8007b78 <vPortSetupTimerInterrupt+0x40>)
 8007b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b52:	099b      	lsrs	r3, r3, #6
 8007b54:	4a09      	ldr	r2, [pc, #36]	; (8007b7c <vPortSetupTimerInterrupt+0x44>)
 8007b56:	3b01      	subs	r3, #1
 8007b58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b5a:	4b04      	ldr	r3, [pc, #16]	; (8007b6c <vPortSetupTimerInterrupt+0x34>)
 8007b5c:	2207      	movs	r2, #7
 8007b5e:	601a      	str	r2, [r3, #0]
}
 8007b60:	bf00      	nop
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	e000e010 	.word	0xe000e010
 8007b70:	e000e018 	.word	0xe000e018
 8007b74:	20000010 	.word	0x20000010
 8007b78:	10624dd3 	.word	0x10624dd3
 8007b7c:	e000e014 	.word	0xe000e014

08007b80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b90 <vPortEnableVFP+0x10>
 8007b84:	6801      	ldr	r1, [r0, #0]
 8007b86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b8a:	6001      	str	r1, [r0, #0]
 8007b8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b8e:	bf00      	nop
 8007b90:	e000ed88 	.word	0xe000ed88

08007b94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b9a:	f3ef 8305 	mrs	r3, IPSR
 8007b9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2b0f      	cmp	r3, #15
 8007ba4:	d913      	bls.n	8007bce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007ba6:	4a16      	ldr	r2, [pc, #88]	; (8007c00 <vPortValidateInterruptPriority+0x6c>)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	4413      	add	r3, r2
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007bb0:	4b14      	ldr	r3, [pc, #80]	; (8007c04 <vPortValidateInterruptPriority+0x70>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	7afa      	ldrb	r2, [r7, #11]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d209      	bcs.n	8007bce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	607b      	str	r3, [r7, #4]
 8007bcc:	e7fe      	b.n	8007bcc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007bce:	4b0e      	ldr	r3, [pc, #56]	; (8007c08 <vPortValidateInterruptPriority+0x74>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007bd6:	4b0d      	ldr	r3, [pc, #52]	; (8007c0c <vPortValidateInterruptPriority+0x78>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d909      	bls.n	8007bf2 <vPortValidateInterruptPriority+0x5e>
 8007bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	603b      	str	r3, [r7, #0]
 8007bf0:	e7fe      	b.n	8007bf0 <vPortValidateInterruptPriority+0x5c>
	}
 8007bf2:	bf00      	nop
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	e000e3f0 	.word	0xe000e3f0
 8007c04:	20000eb4 	.word	0x20000eb4
 8007c08:	e000ed0c 	.word	0xe000ed0c
 8007c0c:	20000eb8 	.word	0x20000eb8

08007c10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b08a      	sub	sp, #40	; 0x28
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c1c:	f7fe fd30 	bl	8006680 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c20:	4b57      	ldr	r3, [pc, #348]	; (8007d80 <pvPortMalloc+0x170>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d101      	bne.n	8007c2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c28:	f000 f90c 	bl	8007e44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c2c:	4b55      	ldr	r3, [pc, #340]	; (8007d84 <pvPortMalloc+0x174>)
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4013      	ands	r3, r2
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f040 808c 	bne.w	8007d52 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d01c      	beq.n	8007c7a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007c40:	2208      	movs	r2, #8
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4413      	add	r3, r2
 8007c46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f003 0307 	and.w	r3, r3, #7
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d013      	beq.n	8007c7a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f023 0307 	bic.w	r3, r3, #7
 8007c58:	3308      	adds	r3, #8
 8007c5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f003 0307 	and.w	r3, r3, #7
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d009      	beq.n	8007c7a <pvPortMalloc+0x6a>
 8007c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6a:	f383 8811 	msr	BASEPRI, r3
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f3bf 8f4f 	dsb	sy
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	e7fe      	b.n	8007c78 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d068      	beq.n	8007d52 <pvPortMalloc+0x142>
 8007c80:	4b41      	ldr	r3, [pc, #260]	; (8007d88 <pvPortMalloc+0x178>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d863      	bhi.n	8007d52 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c8a:	4b40      	ldr	r3, [pc, #256]	; (8007d8c <pvPortMalloc+0x17c>)
 8007c8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c8e:	4b3f      	ldr	r3, [pc, #252]	; (8007d8c <pvPortMalloc+0x17c>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c94:	e004      	b.n	8007ca0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d903      	bls.n	8007cb2 <pvPortMalloc+0xa2>
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1f1      	bne.n	8007c96 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007cb2:	4b33      	ldr	r3, [pc, #204]	; (8007d80 <pvPortMalloc+0x170>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d04a      	beq.n	8007d52 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2208      	movs	r2, #8
 8007cc2:	4413      	add	r3, r2
 8007cc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	6a3b      	ldr	r3, [r7, #32]
 8007ccc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	1ad2      	subs	r2, r2, r3
 8007cd6:	2308      	movs	r3, #8
 8007cd8:	005b      	lsls	r3, r3, #1
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d91e      	bls.n	8007d1c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	f003 0307 	and.w	r3, r3, #7
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d009      	beq.n	8007d04 <pvPortMalloc+0xf4>
 8007cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	613b      	str	r3, [r7, #16]
 8007d02:	e7fe      	b.n	8007d02 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	1ad2      	subs	r2, r2, r3
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d16:	69b8      	ldr	r0, [r7, #24]
 8007d18:	f000 f8f6 	bl	8007f08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d1c:	4b1a      	ldr	r3, [pc, #104]	; (8007d88 <pvPortMalloc+0x178>)
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	4a18      	ldr	r2, [pc, #96]	; (8007d88 <pvPortMalloc+0x178>)
 8007d28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d2a:	4b17      	ldr	r3, [pc, #92]	; (8007d88 <pvPortMalloc+0x178>)
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	4b18      	ldr	r3, [pc, #96]	; (8007d90 <pvPortMalloc+0x180>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d203      	bcs.n	8007d3e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d36:	4b14      	ldr	r3, [pc, #80]	; (8007d88 <pvPortMalloc+0x178>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a15      	ldr	r2, [pc, #84]	; (8007d90 <pvPortMalloc+0x180>)
 8007d3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	4b10      	ldr	r3, [pc, #64]	; (8007d84 <pvPortMalloc+0x174>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	431a      	orrs	r2, r3
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d52:	f7fe fca3 	bl	800669c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	f003 0307 	and.w	r3, r3, #7
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d009      	beq.n	8007d74 <pvPortMalloc+0x164>
 8007d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	60fb      	str	r3, [r7, #12]
 8007d72:	e7fe      	b.n	8007d72 <pvPortMalloc+0x162>
	return pvReturn;
 8007d74:	69fb      	ldr	r3, [r7, #28]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3728      	adds	r7, #40	; 0x28
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	20004ac4 	.word	0x20004ac4
 8007d84:	20004ad0 	.word	0x20004ad0
 8007d88:	20004ac8 	.word	0x20004ac8
 8007d8c:	20004abc 	.word	0x20004abc
 8007d90:	20004acc 	.word	0x20004acc

08007d94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d046      	beq.n	8007e34 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007da6:	2308      	movs	r3, #8
 8007da8:	425b      	negs	r3, r3
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	4413      	add	r3, r2
 8007dae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	4b20      	ldr	r3, [pc, #128]	; (8007e3c <vPortFree+0xa8>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d109      	bne.n	8007dd6 <vPortFree+0x42>
 8007dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc6:	f383 8811 	msr	BASEPRI, r3
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	60fb      	str	r3, [r7, #12]
 8007dd4:	e7fe      	b.n	8007dd4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d009      	beq.n	8007df2 <vPortFree+0x5e>
 8007dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	60bb      	str	r3, [r7, #8]
 8007df0:	e7fe      	b.n	8007df0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	4b11      	ldr	r3, [pc, #68]	; (8007e3c <vPortFree+0xa8>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d019      	beq.n	8007e34 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d115      	bne.n	8007e34 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	4b0b      	ldr	r3, [pc, #44]	; (8007e3c <vPortFree+0xa8>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	43db      	mvns	r3, r3
 8007e12:	401a      	ands	r2, r3
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e18:	f7fe fc32 	bl	8006680 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	4b07      	ldr	r3, [pc, #28]	; (8007e40 <vPortFree+0xac>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4413      	add	r3, r2
 8007e26:	4a06      	ldr	r2, [pc, #24]	; (8007e40 <vPortFree+0xac>)
 8007e28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e2a:	6938      	ldr	r0, [r7, #16]
 8007e2c:	f000 f86c 	bl	8007f08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007e30:	f7fe fc34 	bl	800669c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e34:	bf00      	nop
 8007e36:	3718      	adds	r7, #24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	20004ad0 	.word	0x20004ad0
 8007e40:	20004ac8 	.word	0x20004ac8

08007e44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007e4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e50:	4b27      	ldr	r3, [pc, #156]	; (8007ef0 <prvHeapInit+0xac>)
 8007e52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f003 0307 	and.w	r3, r3, #7
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00c      	beq.n	8007e78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	3307      	adds	r3, #7
 8007e62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f023 0307 	bic.w	r3, r3, #7
 8007e6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	4a1f      	ldr	r2, [pc, #124]	; (8007ef0 <prvHeapInit+0xac>)
 8007e74:	4413      	add	r3, r2
 8007e76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e7c:	4a1d      	ldr	r2, [pc, #116]	; (8007ef4 <prvHeapInit+0xb0>)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e82:	4b1c      	ldr	r3, [pc, #112]	; (8007ef4 <prvHeapInit+0xb0>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e90:	2208      	movs	r2, #8
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	1a9b      	subs	r3, r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f023 0307 	bic.w	r3, r3, #7
 8007e9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4a15      	ldr	r2, [pc, #84]	; (8007ef8 <prvHeapInit+0xb4>)
 8007ea4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ea6:	4b14      	ldr	r3, [pc, #80]	; (8007ef8 <prvHeapInit+0xb4>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007eae:	4b12      	ldr	r3, [pc, #72]	; (8007ef8 <prvHeapInit+0xb4>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	1ad2      	subs	r2, r2, r3
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ec4:	4b0c      	ldr	r3, [pc, #48]	; (8007ef8 <prvHeapInit+0xb4>)
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	4a0a      	ldr	r2, [pc, #40]	; (8007efc <prvHeapInit+0xb8>)
 8007ed2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	4a09      	ldr	r2, [pc, #36]	; (8007f00 <prvHeapInit+0xbc>)
 8007eda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007edc:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <prvHeapInit+0xc0>)
 8007ede:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ee2:	601a      	str	r2, [r3, #0]
}
 8007ee4:	bf00      	nop
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	20000ebc 	.word	0x20000ebc
 8007ef4:	20004abc 	.word	0x20004abc
 8007ef8:	20004ac4 	.word	0x20004ac4
 8007efc:	20004acc 	.word	0x20004acc
 8007f00:	20004ac8 	.word	0x20004ac8
 8007f04:	20004ad0 	.word	0x20004ad0

08007f08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f10:	4b28      	ldr	r3, [pc, #160]	; (8007fb4 <prvInsertBlockIntoFreeList+0xac>)
 8007f12:	60fb      	str	r3, [r7, #12]
 8007f14:	e002      	b.n	8007f1c <prvInsertBlockIntoFreeList+0x14>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	60fb      	str	r3, [r7, #12]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d8f7      	bhi.n	8007f16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	4413      	add	r3, r2
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d108      	bne.n	8007f4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	441a      	add	r2, r3
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	441a      	add	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d118      	bne.n	8007f90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	4b15      	ldr	r3, [pc, #84]	; (8007fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d00d      	beq.n	8007f86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	441a      	add	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	e008      	b.n	8007f98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f86:	4b0c      	ldr	r3, [pc, #48]	; (8007fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	601a      	str	r2, [r3, #0]
 8007f8e:	e003      	b.n	8007f98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d002      	beq.n	8007fa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fa6:	bf00      	nop
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	20004abc 	.word	0x20004abc
 8007fb8:	20004ac4 	.word	0x20004ac4

08007fbc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8007fc2:	4b24      	ldr	r3, [pc, #144]	; (8008054 <_DoInit+0x98>)
 8007fc4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2203      	movs	r2, #3
 8007fca:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2203      	movs	r2, #3
 8007fd0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a20      	ldr	r2, [pc, #128]	; (8008058 <_DoInit+0x9c>)
 8007fd6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a20      	ldr	r2, [pc, #128]	; (800805c <_DoInit+0xa0>)
 8007fdc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007fe4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a17      	ldr	r2, [pc, #92]	; (8008058 <_DoInit+0x9c>)
 8007ffc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a17      	ldr	r2, [pc, #92]	; (8008060 <_DoInit+0xa4>)
 8008002:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2210      	movs	r2, #16
 8008008:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	3307      	adds	r3, #7
 8008020:	4a10      	ldr	r2, [pc, #64]	; (8008064 <_DoInit+0xa8>)
 8008022:	6810      	ldr	r0, [r2, #0]
 8008024:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8008026:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a0e      	ldr	r2, [pc, #56]	; (8008068 <_DoInit+0xac>)
 800802e:	6810      	ldr	r0, [r2, #0]
 8008030:	6018      	str	r0, [r3, #0]
 8008032:	8891      	ldrh	r1, [r2, #4]
 8008034:	7992      	ldrb	r2, [r2, #6]
 8008036:	8099      	strh	r1, [r3, #4]
 8008038:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800803a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2220      	movs	r2, #32
 8008042:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8008044:	f3bf 8f5f 	dmb	sy
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr
 8008054:	20005720 	.word	0x20005720
 8008058:	0800a210 	.word	0x0800a210
 800805c:	20004ad4 	.word	0x20004ad4
 8008060:	20004ed4 	.word	0x20004ed4
 8008064:	0800a21c 	.word	0x0800a21c
 8008068:	0800a220 	.word	0x0800a220

0800806c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800806c:	b580      	push	{r7, lr}
 800806e:	b08c      	sub	sp, #48	; 0x30
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8008078:	4b3e      	ldr	r3, [pc, #248]	; (8008174 <SEGGER_RTT_ReadNoLock+0x108>)
 800807a:	623b      	str	r3, [r7, #32]
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <SEGGER_RTT_ReadNoLock+0x1e>
 8008086:	f7ff ff99 	bl	8007fbc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	4613      	mov	r3, r2
 800808e:	005b      	lsls	r3, r3, #1
 8008090:	4413      	add	r3, r2
 8008092:	00db      	lsls	r3, r3, #3
 8008094:	3360      	adds	r3, #96	; 0x60
 8008096:	4a37      	ldr	r2, [pc, #220]	; (8008174 <SEGGER_RTT_ReadNoLock+0x108>)
 8008098:	4413      	add	r3, r2
 800809a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80080ac:	2300      	movs	r3, #0
 80080ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80080b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d92b      	bls.n	8008110 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	689a      	ldr	r2, [r3, #8]
 80080bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4293      	cmp	r3, r2
 80080c8:	bf28      	it	cs
 80080ca:	4613      	movcs	r3, r2
 80080cc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	685a      	ldr	r2, [r3, #4]
 80080d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d4:	4413      	add	r3, r2
 80080d6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	6939      	ldr	r1, [r7, #16]
 80080dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080de:	f001 fc18 	bl	8009912 <memcpy>
    NumBytesRead += NumBytesRem;
 80080e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	4413      	add	r3, r2
 80080e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80080ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	4413      	add	r3, r2
 80080f0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80080fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	4413      	add	r3, r2
 8008100:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008108:	429a      	cmp	r2, r3
 800810a:	d101      	bne.n	8008110 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800810c:	2300      	movs	r3, #0
 800810e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008118:	697a      	ldr	r2, [r7, #20]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4293      	cmp	r3, r2
 800811e:	bf28      	it	cs
 8008120:	4613      	movcs	r3, r2
 8008122:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d019      	beq.n	800815e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	685a      	ldr	r2, [r3, #4]
 800812e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008130:	4413      	add	r3, r2
 8008132:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008134:	697a      	ldr	r2, [r7, #20]
 8008136:	6939      	ldr	r1, [r7, #16]
 8008138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800813a:	f001 fbea 	bl	8009912 <memcpy>
    NumBytesRead += NumBytesRem;
 800813e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	4413      	add	r3, r2
 8008144:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8008146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	4413      	add	r3, r2
 800814c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	4413      	add	r3, r2
 800815c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800815e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008160:	2b00      	cmp	r3, #0
 8008162:	d002      	beq.n	800816a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008168:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800816a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800816c:	4618      	mov	r0, r3
 800816e:	3730      	adds	r7, #48	; 0x30
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	20005720 	.word	0x20005720

08008178 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8008178:	b580      	push	{r7, lr}
 800817a:	b088      	sub	sp, #32
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8008186:	4b3d      	ldr	r3, [pc, #244]	; (800827c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8008188:	61bb      	str	r3, [r7, #24]
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b00      	cmp	r3, #0
 8008192:	d101      	bne.n	8008198 <SEGGER_RTT_AllocUpBuffer+0x20>
 8008194:	f7ff ff12 	bl	8007fbc <_DoInit>
  SEGGER_RTT_LOCK();
 8008198:	f3ef 8311 	mrs	r3, BASEPRI
 800819c:	f04f 0120 	mov.w	r1, #32
 80081a0:	f381 8811 	msr	BASEPRI, r1
 80081a4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80081a6:	4b35      	ldr	r3, [pc, #212]	; (800827c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80081a8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80081aa:	2300      	movs	r3, #0
 80081ac:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80081ae:	6939      	ldr	r1, [r7, #16]
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	4613      	mov	r3, r2
 80081b6:	005b      	lsls	r3, r3, #1
 80081b8:	4413      	add	r3, r2
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	440b      	add	r3, r1
 80081be:	3304      	adds	r3, #4
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d008      	beq.n	80081d8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	3301      	adds	r3, #1
 80081ca:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	69fa      	ldr	r2, [r7, #28]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	dbeb      	blt.n	80081ae <SEGGER_RTT_AllocUpBuffer+0x36>
 80081d6:	e000      	b.n	80081da <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80081d8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	69fa      	ldr	r2, [r7, #28]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	da3f      	bge.n	8008264 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80081e4:	6939      	ldr	r1, [r7, #16]
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	1c5a      	adds	r2, r3, #1
 80081ea:	4613      	mov	r3, r2
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	4413      	add	r3, r2
 80081f0:	00db      	lsls	r3, r3, #3
 80081f2:	440b      	add	r3, r1
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80081f8:	6939      	ldr	r1, [r7, #16]
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	1c5a      	adds	r2, r3, #1
 80081fe:	4613      	mov	r3, r2
 8008200:	005b      	lsls	r3, r3, #1
 8008202:	4413      	add	r3, r2
 8008204:	00db      	lsls	r3, r3, #3
 8008206:	440b      	add	r3, r1
 8008208:	3304      	adds	r3, #4
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800820e:	6939      	ldr	r1, [r7, #16]
 8008210:	69fa      	ldr	r2, [r7, #28]
 8008212:	4613      	mov	r3, r2
 8008214:	005b      	lsls	r3, r3, #1
 8008216:	4413      	add	r3, r2
 8008218:	00db      	lsls	r3, r3, #3
 800821a:	440b      	add	r3, r1
 800821c:	3320      	adds	r3, #32
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8008222:	6939      	ldr	r1, [r7, #16]
 8008224:	69fa      	ldr	r2, [r7, #28]
 8008226:	4613      	mov	r3, r2
 8008228:	005b      	lsls	r3, r3, #1
 800822a:	4413      	add	r3, r2
 800822c:	00db      	lsls	r3, r3, #3
 800822e:	440b      	add	r3, r1
 8008230:	3328      	adds	r3, #40	; 0x28
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8008236:	6939      	ldr	r1, [r7, #16]
 8008238:	69fa      	ldr	r2, [r7, #28]
 800823a:	4613      	mov	r3, r2
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	4413      	add	r3, r2
 8008240:	00db      	lsls	r3, r3, #3
 8008242:	440b      	add	r3, r1
 8008244:	3324      	adds	r3, #36	; 0x24
 8008246:	2200      	movs	r2, #0
 8008248:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800824a:	6939      	ldr	r1, [r7, #16]
 800824c:	69fa      	ldr	r2, [r7, #28]
 800824e:	4613      	mov	r3, r2
 8008250:	005b      	lsls	r3, r3, #1
 8008252:	4413      	add	r3, r2
 8008254:	00db      	lsls	r3, r3, #3
 8008256:	440b      	add	r3, r1
 8008258:	332c      	adds	r3, #44	; 0x2c
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800825e:	f3bf 8f5f 	dmb	sy
 8008262:	e002      	b.n	800826a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8008264:	f04f 33ff 	mov.w	r3, #4294967295
 8008268:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8008270:	69fb      	ldr	r3, [r7, #28]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3720      	adds	r7, #32
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	20005720 	.word	0x20005720

08008280 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8008280:	b580      	push	{r7, lr}
 8008282:	b08a      	sub	sp, #40	; 0x28
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
 800828c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800828e:	4b21      	ldr	r3, [pc, #132]	; (8008314 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8008290:	623b      	str	r3, [r7, #32]
 8008292:	6a3b      	ldr	r3, [r7, #32]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b00      	cmp	r3, #0
 800829a:	d101      	bne.n	80082a0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800829c:	f7ff fe8e 	bl	8007fbc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80082a0:	4b1c      	ldr	r3, [pc, #112]	; (8008314 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80082a2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d82c      	bhi.n	8008304 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80082aa:	f3ef 8311 	mrs	r3, BASEPRI
 80082ae:	f04f 0120 	mov.w	r1, #32
 80082b2:	f381 8811 	msr	BASEPRI, r1
 80082b6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	4613      	mov	r3, r2
 80082bc:	005b      	lsls	r3, r3, #1
 80082be:	4413      	add	r3, r2
 80082c0:	00db      	lsls	r3, r3, #3
 80082c2:	3360      	adds	r3, #96	; 0x60
 80082c4:	69fa      	ldr	r2, [r7, #28]
 80082c6:	4413      	add	r3, r2
 80082c8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00e      	beq.n	80082ee <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2200      	movs	r2, #0
 80082e6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	2200      	movs	r2, #0
 80082ec:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082f2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80082f4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80082fe:	2300      	movs	r3, #0
 8008300:	627b      	str	r3, [r7, #36]	; 0x24
 8008302:	e002      	b.n	800830a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8008304:	f04f 33ff 	mov.w	r3, #4294967295
 8008308:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800830c:	4618      	mov	r0, r3
 800830e:	3728      	adds	r7, #40	; 0x28
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	20005720 	.word	0x20005720

08008318 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8008318:	b480      	push	{r7}
 800831a:	b087      	sub	sp, #28
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8008324:	2300      	movs	r3, #0
 8008326:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00f      	beq.n	800834e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800832e:	e002      	b.n	8008336 <_EncodeStr+0x1e>
      Len++;
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	3301      	adds	r3, #1
 8008334:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	4413      	add	r3, r2
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1f6      	bne.n	8008330 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	429a      	cmp	r2, r3
 8008348:	d901      	bls.n	800834e <_EncodeStr+0x36>
      Len = Limit;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	2bfe      	cmp	r3, #254	; 0xfe
 8008352:	d806      	bhi.n	8008362 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	1c5a      	adds	r2, r3, #1
 8008358:	60fa      	str	r2, [r7, #12]
 800835a:	693a      	ldr	r2, [r7, #16]
 800835c:	b2d2      	uxtb	r2, r2
 800835e:	701a      	strb	r2, [r3, #0]
 8008360:	e011      	b.n	8008386 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	1c5a      	adds	r2, r3, #1
 8008366:	60fa      	str	r2, [r7, #12]
 8008368:	22ff      	movs	r2, #255	; 0xff
 800836a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	1c5a      	adds	r2, r3, #1
 8008370:	60fa      	str	r2, [r7, #12]
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	b2d2      	uxtb	r2, r2
 8008376:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	0a19      	lsrs	r1, r3, #8
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	60fa      	str	r2, [r7, #12]
 8008382:	b2ca      	uxtb	r2, r1
 8008384:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8008386:	2300      	movs	r3, #0
 8008388:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800838a:	e00a      	b.n	80083a2 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	1c53      	adds	r3, r2, #1
 8008390:	60bb      	str	r3, [r7, #8]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	1c59      	adds	r1, r3, #1
 8008396:	60f9      	str	r1, [r7, #12]
 8008398:	7812      	ldrb	r2, [r2, #0]
 800839a:	701a      	strb	r2, [r3, #0]
    n++;
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	3301      	adds	r3, #1
 80083a0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d3f0      	bcc.n	800838c <_EncodeStr+0x74>
  }
  return pPayload;
 80083aa:	68fb      	ldr	r3, [r7, #12]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	371c      	adds	r7, #28
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	3304      	adds	r3, #4
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80083d6:	4b33      	ldr	r3, [pc, #204]	; (80084a4 <_HandleIncomingPacket+0xd4>)
 80083d8:	7e1b      	ldrb	r3, [r3, #24]
 80083da:	4618      	mov	r0, r3
 80083dc:	1cfb      	adds	r3, r7, #3
 80083de:	2201      	movs	r2, #1
 80083e0:	4619      	mov	r1, r3
 80083e2:	f7ff fe43 	bl	800806c <SEGGER_RTT_ReadNoLock>
 80083e6:	4603      	mov	r3, r0
 80083e8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	dd4d      	ble.n	800848c <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 80083f0:	78fb      	ldrb	r3, [r7, #3]
 80083f2:	2b05      	cmp	r3, #5
 80083f4:	d022      	beq.n	800843c <_HandleIncomingPacket+0x6c>
 80083f6:	2b05      	cmp	r3, #5
 80083f8:	dc0b      	bgt.n	8008412 <_HandleIncomingPacket+0x42>
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d015      	beq.n	800842a <_HandleIncomingPacket+0x5a>
 80083fe:	2b02      	cmp	r3, #2
 8008400:	dc02      	bgt.n	8008408 <_HandleIncomingPacket+0x38>
 8008402:	2b01      	cmp	r3, #1
 8008404:	d00e      	beq.n	8008424 <_HandleIncomingPacket+0x54>
 8008406:	e034      	b.n	8008472 <_HandleIncomingPacket+0xa2>
 8008408:	2b03      	cmp	r3, #3
 800840a:	d011      	beq.n	8008430 <_HandleIncomingPacket+0x60>
 800840c:	2b04      	cmp	r3, #4
 800840e:	d012      	beq.n	8008436 <_HandleIncomingPacket+0x66>
 8008410:	e02f      	b.n	8008472 <_HandleIncomingPacket+0xa2>
 8008412:	2b07      	cmp	r3, #7
 8008414:	d018      	beq.n	8008448 <_HandleIncomingPacket+0x78>
 8008416:	2b07      	cmp	r3, #7
 8008418:	db13      	blt.n	8008442 <_HandleIncomingPacket+0x72>
 800841a:	2b7f      	cmp	r3, #127	; 0x7f
 800841c:	d038      	beq.n	8008490 <_HandleIncomingPacket+0xc0>
 800841e:	2b80      	cmp	r3, #128	; 0x80
 8008420:	d015      	beq.n	800844e <_HandleIncomingPacket+0x7e>
 8008422:	e026      	b.n	8008472 <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8008424:	f000 fba8 	bl	8008b78 <SEGGER_SYSVIEW_Start>
      break;
 8008428:	e037      	b.n	800849a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800842a:	f000 fc5f 	bl	8008cec <SEGGER_SYSVIEW_Stop>
      break;
 800842e:	e034      	b.n	800849a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8008430:	f000 fe38 	bl	80090a4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8008434:	e031      	b.n	800849a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8008436:	f000 fdfd 	bl	8009034 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800843a:	e02e      	b.n	800849a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800843c:	f000 fc7c 	bl	8008d38 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8008440:	e02b      	b.n	800849a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8008442:	f001 f84d 	bl	80094e0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8008446:	e028      	b.n	800849a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8008448:	f001 f82c 	bl	80094a4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800844c:	e025      	b.n	800849a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800844e:	4b15      	ldr	r3, [pc, #84]	; (80084a4 <_HandleIncomingPacket+0xd4>)
 8008450:	7e1b      	ldrb	r3, [r3, #24]
 8008452:	4618      	mov	r0, r3
 8008454:	1cfb      	adds	r3, r7, #3
 8008456:	2201      	movs	r2, #1
 8008458:	4619      	mov	r1, r3
 800845a:	f7ff fe07 	bl	800806c <SEGGER_RTT_ReadNoLock>
 800845e:	4603      	mov	r3, r0
 8008460:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	dd15      	ble.n	8008494 <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8008468:	78fb      	ldrb	r3, [r7, #3]
 800846a:	4618      	mov	r0, r3
 800846c:	f000 ff9a 	bl	80093a4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8008470:	e010      	b.n	8008494 <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8008472:	78fb      	ldrb	r3, [r7, #3]
 8008474:	b25b      	sxtb	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	da0e      	bge.n	8008498 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800847a:	4b0a      	ldr	r3, [pc, #40]	; (80084a4 <_HandleIncomingPacket+0xd4>)
 800847c:	7e1b      	ldrb	r3, [r3, #24]
 800847e:	4618      	mov	r0, r3
 8008480:	1cfb      	adds	r3, r7, #3
 8008482:	2201      	movs	r2, #1
 8008484:	4619      	mov	r1, r3
 8008486:	f7ff fdf1 	bl	800806c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800848a:	e005      	b.n	8008498 <_HandleIncomingPacket+0xc8>
    }
  }
 800848c:	bf00      	nop
 800848e:	e004      	b.n	800849a <_HandleIncomingPacket+0xca>
      break;
 8008490:	bf00      	nop
 8008492:	e002      	b.n	800849a <_HandleIncomingPacket+0xca>
      break;
 8008494:	bf00      	nop
 8008496:	e000      	b.n	800849a <_HandleIncomingPacket+0xca>
      break;
 8008498:	bf00      	nop
}
 800849a:	bf00      	nop
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	200052ec 	.word	0x200052ec

080084a8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b08c      	sub	sp, #48	; 0x30
 80084ac:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80084ae:	2301      	movs	r3, #1
 80084b0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80084b2:	1d3b      	adds	r3, r7, #4
 80084b4:	3301      	adds	r3, #1
 80084b6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084bc:	4b31      	ldr	r3, [pc, #196]	; (8008584 <_TrySendOverflowPacket+0xdc>)
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80084c2:	e00b      	b.n	80084dc <_TrySendOverflowPacket+0x34>
 80084c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c6:	b2da      	uxtb	r2, r3
 80084c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ca:	1c59      	adds	r1, r3, #1
 80084cc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80084ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80084d2:	b2d2      	uxtb	r2, r2
 80084d4:	701a      	strb	r2, [r3, #0]
 80084d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d8:	09db      	lsrs	r3, r3, #7
 80084da:	62bb      	str	r3, [r7, #40]	; 0x28
 80084dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084de:	2b7f      	cmp	r3, #127	; 0x7f
 80084e0:	d8f0      	bhi.n	80084c4 <_TrySendOverflowPacket+0x1c>
 80084e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e4:	1c5a      	adds	r2, r3, #1
 80084e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084ea:	b2d2      	uxtb	r2, r2
 80084ec:	701a      	strb	r2, [r3, #0]
 80084ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80084f2:	4b25      	ldr	r3, [pc, #148]	; (8008588 <_TrySendOverflowPacket+0xe0>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80084f8:	4b22      	ldr	r3, [pc, #136]	; (8008584 <_TrySendOverflowPacket+0xdc>)
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	627b      	str	r3, [r7, #36]	; 0x24
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	623b      	str	r3, [r7, #32]
 800850a:	e00b      	b.n	8008524 <_TrySendOverflowPacket+0x7c>
 800850c:	6a3b      	ldr	r3, [r7, #32]
 800850e:	b2da      	uxtb	r2, r3
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	1c59      	adds	r1, r3, #1
 8008514:	6279      	str	r1, [r7, #36]	; 0x24
 8008516:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800851a:	b2d2      	uxtb	r2, r2
 800851c:	701a      	strb	r2, [r3, #0]
 800851e:	6a3b      	ldr	r3, [r7, #32]
 8008520:	09db      	lsrs	r3, r3, #7
 8008522:	623b      	str	r3, [r7, #32]
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	2b7f      	cmp	r3, #127	; 0x7f
 8008528:	d8f0      	bhi.n	800850c <_TrySendOverflowPacket+0x64>
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	1c5a      	adds	r2, r3, #1
 800852e:	627a      	str	r2, [r7, #36]	; 0x24
 8008530:	6a3a      	ldr	r2, [r7, #32]
 8008532:	b2d2      	uxtb	r2, r2
 8008534:	701a      	strb	r2, [r3, #0]
 8008536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008538:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800853a:	4b12      	ldr	r3, [pc, #72]	; (8008584 <_TrySendOverflowPacket+0xdc>)
 800853c:	785b      	ldrb	r3, [r3, #1]
 800853e:	4618      	mov	r0, r3
 8008540:	69fa      	ldr	r2, [r7, #28]
 8008542:	1d3b      	adds	r3, r7, #4
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	461a      	mov	r2, r3
 8008548:	1d3b      	adds	r3, r7, #4
 800854a:	4619      	mov	r1, r3
 800854c:	f7f7 fe40 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008550:	4603      	mov	r3, r0
 8008552:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d009      	beq.n	800856e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800855a:	4a0a      	ldr	r2, [pc, #40]	; (8008584 <_TrySendOverflowPacket+0xdc>)
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8008560:	4b08      	ldr	r3, [pc, #32]	; (8008584 <_TrySendOverflowPacket+0xdc>)
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	3b01      	subs	r3, #1
 8008566:	b2da      	uxtb	r2, r3
 8008568:	4b06      	ldr	r3, [pc, #24]	; (8008584 <_TrySendOverflowPacket+0xdc>)
 800856a:	701a      	strb	r2, [r3, #0]
 800856c:	e004      	b.n	8008578 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800856e:	4b05      	ldr	r3, [pc, #20]	; (8008584 <_TrySendOverflowPacket+0xdc>)
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	3301      	adds	r3, #1
 8008574:	4a03      	ldr	r2, [pc, #12]	; (8008584 <_TrySendOverflowPacket+0xdc>)
 8008576:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8008578:	693b      	ldr	r3, [r7, #16]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3730      	adds	r7, #48	; 0x30
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	200052ec 	.word	0x200052ec
 8008588:	e0001004 	.word	0xe0001004

0800858c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800858c:	b580      	push	{r7, lr}
 800858e:	b08a      	sub	sp, #40	; 0x28
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8008598:	4b6c      	ldr	r3, [pc, #432]	; (800874c <_SendPacket+0x1c0>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d010      	beq.n	80085c2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80085a0:	4b6a      	ldr	r3, [pc, #424]	; (800874c <_SendPacket+0x1c0>)
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f000 80a3 	beq.w	80086f0 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80085aa:	4b68      	ldr	r3, [pc, #416]	; (800874c <_SendPacket+0x1c0>)
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d109      	bne.n	80085c6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80085b2:	f7ff ff79 	bl	80084a8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80085b6:	4b65      	ldr	r3, [pc, #404]	; (800874c <_SendPacket+0x1c0>)
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	f040 809a 	bne.w	80086f4 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80085c0:	e001      	b.n	80085c6 <_SendPacket+0x3a>
    goto Send;
 80085c2:	bf00      	nop
 80085c4:	e000      	b.n	80085c8 <_SendPacket+0x3c>
Send:
 80085c6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b1f      	cmp	r3, #31
 80085cc:	d809      	bhi.n	80085e2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80085ce:	4b5f      	ldr	r3, [pc, #380]	; (800874c <_SendPacket+0x1c0>)
 80085d0:	69da      	ldr	r2, [r3, #28]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	fa22 f303 	lsr.w	r3, r2, r3
 80085d8:	f003 0301 	and.w	r3, r3, #1
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f040 808b 	bne.w	80086f8 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b17      	cmp	r3, #23
 80085e6:	d807      	bhi.n	80085f8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	60fb      	str	r3, [r7, #12]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	701a      	strb	r2, [r3, #0]
 80085f6:	e03d      	b.n	8008674 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80085f8:	68ba      	ldr	r2, [r7, #8]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	2b7f      	cmp	r3, #127	; 0x7f
 8008604:	d912      	bls.n	800862c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	09da      	lsrs	r2, r3, #7
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3b01      	subs	r3, #1
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	b2d2      	uxtb	r2, r2
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	b2db      	uxtb	r3, r3
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	3a01      	subs	r2, #1
 800861e:	60fa      	str	r2, [r7, #12]
 8008620:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008624:	b2da      	uxtb	r2, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	701a      	strb	r2, [r3, #0]
 800862a:	e006      	b.n	800863a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	3b01      	subs	r3, #1
 8008630:	60fb      	str	r3, [r7, #12]
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	b2da      	uxtb	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2b7f      	cmp	r3, #127	; 0x7f
 800863e:	d912      	bls.n	8008666 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	09da      	lsrs	r2, r3, #7
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	3b01      	subs	r3, #1
 8008648:	60fb      	str	r3, [r7, #12]
 800864a:	b2d2      	uxtb	r2, r2
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	b2db      	uxtb	r3, r3
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	3a01      	subs	r2, #1
 8008658:	60fa      	str	r2, [r7, #12]
 800865a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800865e:	b2da      	uxtb	r2, r3
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	701a      	strb	r2, [r3, #0]
 8008664:	e006      	b.n	8008674 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3b01      	subs	r3, #1
 800866a:	60fb      	str	r3, [r7, #12]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	b2da      	uxtb	r2, r3
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008674:	4b36      	ldr	r3, [pc, #216]	; (8008750 <_SendPacket+0x1c4>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800867a:	4b34      	ldr	r3, [pc, #208]	; (800874c <_SendPacket+0x1c0>)
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	69ba      	ldr	r2, [r7, #24]
 8008680:	1ad3      	subs	r3, r2, r3
 8008682:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	627b      	str	r3, [r7, #36]	; 0x24
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	623b      	str	r3, [r7, #32]
 800868c:	e00b      	b.n	80086a6 <_SendPacket+0x11a>
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	b2da      	uxtb	r2, r3
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	1c59      	adds	r1, r3, #1
 8008696:	6279      	str	r1, [r7, #36]	; 0x24
 8008698:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800869c:	b2d2      	uxtb	r2, r2
 800869e:	701a      	strb	r2, [r3, #0]
 80086a0:	6a3b      	ldr	r3, [r7, #32]
 80086a2:	09db      	lsrs	r3, r3, #7
 80086a4:	623b      	str	r3, [r7, #32]
 80086a6:	6a3b      	ldr	r3, [r7, #32]
 80086a8:	2b7f      	cmp	r3, #127	; 0x7f
 80086aa:	d8f0      	bhi.n	800868e <_SendPacket+0x102>
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	1c5a      	adds	r2, r3, #1
 80086b0:	627a      	str	r2, [r7, #36]	; 0x24
 80086b2:	6a3a      	ldr	r2, [r7, #32]
 80086b4:	b2d2      	uxtb	r2, r2
 80086b6:	701a      	strb	r2, [r3, #0]
 80086b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ba:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80086bc:	4b23      	ldr	r3, [pc, #140]	; (800874c <_SendPacket+0x1c0>)
 80086be:	785b      	ldrb	r3, [r3, #1]
 80086c0:	4618      	mov	r0, r3
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	461a      	mov	r2, r3
 80086ca:	68f9      	ldr	r1, [r7, #12]
 80086cc:	f7f7 fd80 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80086d0:	4603      	mov	r3, r0
 80086d2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80086da:	4a1c      	ldr	r2, [pc, #112]	; (800874c <_SendPacket+0x1c0>)
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	60d3      	str	r3, [r2, #12]
 80086e0:	e00b      	b.n	80086fa <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80086e2:	4b1a      	ldr	r3, [pc, #104]	; (800874c <_SendPacket+0x1c0>)
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	3301      	adds	r3, #1
 80086e8:	b2da      	uxtb	r2, r3
 80086ea:	4b18      	ldr	r3, [pc, #96]	; (800874c <_SendPacket+0x1c0>)
 80086ec:	701a      	strb	r2, [r3, #0]
 80086ee:	e004      	b.n	80086fa <_SendPacket+0x16e>
    goto SendDone;
 80086f0:	bf00      	nop
 80086f2:	e002      	b.n	80086fa <_SendPacket+0x16e>
      goto SendDone;
 80086f4:	bf00      	nop
 80086f6:	e000      	b.n	80086fa <_SendPacket+0x16e>
      goto SendDone;
 80086f8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80086fa:	4b14      	ldr	r3, [pc, #80]	; (800874c <_SendPacket+0x1c0>)
 80086fc:	7e1b      	ldrb	r3, [r3, #24]
 80086fe:	4619      	mov	r1, r3
 8008700:	4a14      	ldr	r2, [pc, #80]	; (8008754 <_SendPacket+0x1c8>)
 8008702:	460b      	mov	r3, r1
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	440b      	add	r3, r1
 8008708:	00db      	lsls	r3, r3, #3
 800870a:	4413      	add	r3, r2
 800870c:	336c      	adds	r3, #108	; 0x6c
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	4b0e      	ldr	r3, [pc, #56]	; (800874c <_SendPacket+0x1c0>)
 8008712:	7e1b      	ldrb	r3, [r3, #24]
 8008714:	4618      	mov	r0, r3
 8008716:	490f      	ldr	r1, [pc, #60]	; (8008754 <_SendPacket+0x1c8>)
 8008718:	4603      	mov	r3, r0
 800871a:	005b      	lsls	r3, r3, #1
 800871c:	4403      	add	r3, r0
 800871e:	00db      	lsls	r3, r3, #3
 8008720:	440b      	add	r3, r1
 8008722:	3370      	adds	r3, #112	; 0x70
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	429a      	cmp	r2, r3
 8008728:	d00b      	beq.n	8008742 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800872a:	4b08      	ldr	r3, [pc, #32]	; (800874c <_SendPacket+0x1c0>)
 800872c:	789b      	ldrb	r3, [r3, #2]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d107      	bne.n	8008742 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8008732:	4b06      	ldr	r3, [pc, #24]	; (800874c <_SendPacket+0x1c0>)
 8008734:	2201      	movs	r2, #1
 8008736:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8008738:	f7ff fe4a 	bl	80083d0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800873c:	4b03      	ldr	r3, [pc, #12]	; (800874c <_SendPacket+0x1c0>)
 800873e:	2200      	movs	r2, #0
 8008740:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8008742:	bf00      	nop
 8008744:	3728      	adds	r7, #40	; 0x28
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	200052ec 	.word	0x200052ec
 8008750:	e0001004 	.word	0xe0001004
 8008754:	20005720 	.word	0x20005720

08008758 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af02      	add	r7, sp, #8
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
 8008764:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8008766:	2300      	movs	r3, #0
 8008768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800876c:	4917      	ldr	r1, [pc, #92]	; (80087cc <SEGGER_SYSVIEW_Init+0x74>)
 800876e:	4818      	ldr	r0, [pc, #96]	; (80087d0 <SEGGER_SYSVIEW_Init+0x78>)
 8008770:	f7ff fd02 	bl	8008178 <SEGGER_RTT_AllocUpBuffer>
 8008774:	4603      	mov	r3, r0
 8008776:	b2da      	uxtb	r2, r3
 8008778:	4b16      	ldr	r3, [pc, #88]	; (80087d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800877a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800877c:	4b15      	ldr	r3, [pc, #84]	; (80087d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800877e:	785a      	ldrb	r2, [r3, #1]
 8008780:	4b14      	ldr	r3, [pc, #80]	; (80087d4 <SEGGER_SYSVIEW_Init+0x7c>)
 8008782:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8008784:	4b13      	ldr	r3, [pc, #76]	; (80087d4 <SEGGER_SYSVIEW_Init+0x7c>)
 8008786:	7e1b      	ldrb	r3, [r3, #24]
 8008788:	4618      	mov	r0, r3
 800878a:	2300      	movs	r3, #0
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	2308      	movs	r3, #8
 8008790:	4a11      	ldr	r2, [pc, #68]	; (80087d8 <SEGGER_SYSVIEW_Init+0x80>)
 8008792:	490f      	ldr	r1, [pc, #60]	; (80087d0 <SEGGER_SYSVIEW_Init+0x78>)
 8008794:	f7ff fd74 	bl	8008280 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8008798:	4b0e      	ldr	r3, [pc, #56]	; (80087d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800879a:	2200      	movs	r2, #0
 800879c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800879e:	4b0f      	ldr	r3, [pc, #60]	; (80087dc <SEGGER_SYSVIEW_Init+0x84>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a0c      	ldr	r2, [pc, #48]	; (80087d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80087a4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80087a6:	4a0b      	ldr	r2, [pc, #44]	; (80087d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80087ac:	4a09      	ldr	r2, [pc, #36]	; (80087d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80087b2:	4a08      	ldr	r2, [pc, #32]	; (80087d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80087b8:	4a06      	ldr	r2, [pc, #24]	; (80087d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80087be:	4b05      	ldr	r3, [pc, #20]	; (80087d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80087c0:	2200      	movs	r2, #0
 80087c2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80087c4:	bf00      	nop
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	20004ee4 	.word	0x20004ee4
 80087d0:	0800a228 	.word	0x0800a228
 80087d4:	200052ec 	.word	0x200052ec
 80087d8:	200052e4 	.word	0x200052e4
 80087dc:	e0001004 	.word	0xe0001004

080087e0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80087e8:	4a04      	ldr	r2, [pc, #16]	; (80087fc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6113      	str	r3, [r2, #16]
}
 80087ee:	bf00      	nop
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	200052ec 	.word	0x200052ec

08008800 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008808:	f3ef 8311 	mrs	r3, BASEPRI
 800880c:	f04f 0120 	mov.w	r1, #32
 8008810:	f381 8811 	msr	BASEPRI, r1
 8008814:	60fb      	str	r3, [r7, #12]
 8008816:	4808      	ldr	r0, [pc, #32]	; (8008838 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8008818:	f7ff fdce 	bl	80083b8 <_PreparePacket>
 800881c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	68b9      	ldr	r1, [r7, #8]
 8008822:	68b8      	ldr	r0, [r7, #8]
 8008824:	f7ff feb2 	bl	800858c <_SendPacket>
  RECORD_END();
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f383 8811 	msr	BASEPRI, r3
}
 800882e:	bf00      	nop
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	2000531c 	.word	0x2000531c

0800883c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800883c:	b580      	push	{r7, lr}
 800883e:	b088      	sub	sp, #32
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008846:	f3ef 8311 	mrs	r3, BASEPRI
 800884a:	f04f 0120 	mov.w	r1, #32
 800884e:	f381 8811 	msr	BASEPRI, r1
 8008852:	617b      	str	r3, [r7, #20]
 8008854:	4816      	ldr	r0, [pc, #88]	; (80088b0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8008856:	f7ff fdaf 	bl	80083b8 <_PreparePacket>
 800885a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	61fb      	str	r3, [r7, #28]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	61bb      	str	r3, [r7, #24]
 8008868:	e00b      	b.n	8008882 <SEGGER_SYSVIEW_RecordU32+0x46>
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	b2da      	uxtb	r2, r3
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	1c59      	adds	r1, r3, #1
 8008872:	61f9      	str	r1, [r7, #28]
 8008874:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008878:	b2d2      	uxtb	r2, r2
 800887a:	701a      	strb	r2, [r3, #0]
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	09db      	lsrs	r3, r3, #7
 8008880:	61bb      	str	r3, [r7, #24]
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	2b7f      	cmp	r3, #127	; 0x7f
 8008886:	d8f0      	bhi.n	800886a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	1c5a      	adds	r2, r3, #1
 800888c:	61fa      	str	r2, [r7, #28]
 800888e:	69ba      	ldr	r2, [r7, #24]
 8008890:	b2d2      	uxtb	r2, r2
 8008892:	701a      	strb	r2, [r3, #0]
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	68f9      	ldr	r1, [r7, #12]
 800889c:	6938      	ldr	r0, [r7, #16]
 800889e:	f7ff fe75 	bl	800858c <_SendPacket>
  RECORD_END();
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	f383 8811 	msr	BASEPRI, r3
}
 80088a8:	bf00      	nop
 80088aa:	3720      	adds	r7, #32
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	2000531c 	.word	0x2000531c

080088b4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b08c      	sub	sp, #48	; 0x30
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80088c0:	f3ef 8311 	mrs	r3, BASEPRI
 80088c4:	f04f 0120 	mov.w	r1, #32
 80088c8:	f381 8811 	msr	BASEPRI, r1
 80088cc:	61fb      	str	r3, [r7, #28]
 80088ce:	4825      	ldr	r0, [pc, #148]	; (8008964 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80088d0:	f7ff fd72 	bl	80083b8 <_PreparePacket>
 80088d4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80088e2:	e00b      	b.n	80088fc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80088e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e6:	b2da      	uxtb	r2, r3
 80088e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ea:	1c59      	adds	r1, r3, #1
 80088ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 80088ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80088f2:	b2d2      	uxtb	r2, r2
 80088f4:	701a      	strb	r2, [r3, #0]
 80088f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f8:	09db      	lsrs	r3, r3, #7
 80088fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80088fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fe:	2b7f      	cmp	r3, #127	; 0x7f
 8008900:	d8f0      	bhi.n	80088e4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8008902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008904:	1c5a      	adds	r2, r3, #1
 8008906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800890a:	b2d2      	uxtb	r2, r2
 800890c:	701a      	strb	r2, [r3, #0]
 800890e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008910:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	627b      	str	r3, [r7, #36]	; 0x24
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	623b      	str	r3, [r7, #32]
 800891a:	e00b      	b.n	8008934 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	b2da      	uxtb	r2, r3
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	1c59      	adds	r1, r3, #1
 8008924:	6279      	str	r1, [r7, #36]	; 0x24
 8008926:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800892a:	b2d2      	uxtb	r2, r2
 800892c:	701a      	strb	r2, [r3, #0]
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	09db      	lsrs	r3, r3, #7
 8008932:	623b      	str	r3, [r7, #32]
 8008934:	6a3b      	ldr	r3, [r7, #32]
 8008936:	2b7f      	cmp	r3, #127	; 0x7f
 8008938:	d8f0      	bhi.n	800891c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	1c5a      	adds	r2, r3, #1
 800893e:	627a      	str	r2, [r7, #36]	; 0x24
 8008940:	6a3a      	ldr	r2, [r7, #32]
 8008942:	b2d2      	uxtb	r2, r2
 8008944:	701a      	strb	r2, [r3, #0]
 8008946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008948:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	6979      	ldr	r1, [r7, #20]
 800894e:	69b8      	ldr	r0, [r7, #24]
 8008950:	f7ff fe1c 	bl	800858c <_SendPacket>
  RECORD_END();
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	f383 8811 	msr	BASEPRI, r3
}
 800895a:	bf00      	nop
 800895c:	3730      	adds	r7, #48	; 0x30
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	2000531c 	.word	0x2000531c

08008968 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8008968:	b580      	push	{r7, lr}
 800896a:	b08e      	sub	sp, #56	; 0x38
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8008976:	f3ef 8311 	mrs	r3, BASEPRI
 800897a:	f04f 0120 	mov.w	r1, #32
 800897e:	f381 8811 	msr	BASEPRI, r1
 8008982:	61fb      	str	r3, [r7, #28]
 8008984:	4832      	ldr	r0, [pc, #200]	; (8008a50 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8008986:	f7ff fd17 	bl	80083b8 <_PreparePacket>
 800898a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	637b      	str	r3, [r7, #52]	; 0x34
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	633b      	str	r3, [r7, #48]	; 0x30
 8008998:	e00b      	b.n	80089b2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899c:	b2da      	uxtb	r2, r3
 800899e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a0:	1c59      	adds	r1, r3, #1
 80089a2:	6379      	str	r1, [r7, #52]	; 0x34
 80089a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80089a8:	b2d2      	uxtb	r2, r2
 80089aa:	701a      	strb	r2, [r3, #0]
 80089ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ae:	09db      	lsrs	r3, r3, #7
 80089b0:	633b      	str	r3, [r7, #48]	; 0x30
 80089b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b4:	2b7f      	cmp	r3, #127	; 0x7f
 80089b6:	d8f0      	bhi.n	800899a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80089b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ba:	1c5a      	adds	r2, r3, #1
 80089bc:	637a      	str	r2, [r7, #52]	; 0x34
 80089be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089c0:	b2d2      	uxtb	r2, r2
 80089c2:	701a      	strb	r2, [r3, #0]
 80089c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80089d0:	e00b      	b.n	80089ea <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80089d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d4:	b2da      	uxtb	r2, r3
 80089d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d8:	1c59      	adds	r1, r3, #1
 80089da:	62f9      	str	r1, [r7, #44]	; 0x2c
 80089dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80089e0:	b2d2      	uxtb	r2, r2
 80089e2:	701a      	strb	r2, [r3, #0]
 80089e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e6:	09db      	lsrs	r3, r3, #7
 80089e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80089ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ec:	2b7f      	cmp	r3, #127	; 0x7f
 80089ee:	d8f0      	bhi.n	80089d2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80089f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f2:	1c5a      	adds	r2, r3, #1
 80089f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089f8:	b2d2      	uxtb	r2, r2
 80089fa:	701a      	strb	r2, [r3, #0]
 80089fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	627b      	str	r3, [r7, #36]	; 0x24
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	623b      	str	r3, [r7, #32]
 8008a08:	e00b      	b.n	8008a22 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	b2da      	uxtb	r2, r3
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	1c59      	adds	r1, r3, #1
 8008a12:	6279      	str	r1, [r7, #36]	; 0x24
 8008a14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a18:	b2d2      	uxtb	r2, r2
 8008a1a:	701a      	strb	r2, [r3, #0]
 8008a1c:	6a3b      	ldr	r3, [r7, #32]
 8008a1e:	09db      	lsrs	r3, r3, #7
 8008a20:	623b      	str	r3, [r7, #32]
 8008a22:	6a3b      	ldr	r3, [r7, #32]
 8008a24:	2b7f      	cmp	r3, #127	; 0x7f
 8008a26:	d8f0      	bhi.n	8008a0a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8008a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2a:	1c5a      	adds	r2, r3, #1
 8008a2c:	627a      	str	r2, [r7, #36]	; 0x24
 8008a2e:	6a3a      	ldr	r2, [r7, #32]
 8008a30:	b2d2      	uxtb	r2, r2
 8008a32:	701a      	strb	r2, [r3, #0]
 8008a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a36:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	6979      	ldr	r1, [r7, #20]
 8008a3c:	69b8      	ldr	r0, [r7, #24]
 8008a3e:	f7ff fda5 	bl	800858c <_SendPacket>
  RECORD_END();
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	f383 8811 	msr	BASEPRI, r3
}
 8008a48:	bf00      	nop
 8008a4a:	3738      	adds	r7, #56	; 0x38
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	2000531c 	.word	0x2000531c

08008a54 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b090      	sub	sp, #64	; 0x40
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
 8008a60:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008a62:	f3ef 8311 	mrs	r3, BASEPRI
 8008a66:	f04f 0120 	mov.w	r1, #32
 8008a6a:	f381 8811 	msr	BASEPRI, r1
 8008a6e:	61fb      	str	r3, [r7, #28]
 8008a70:	4840      	ldr	r0, [pc, #256]	; (8008b74 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8008a72:	f7ff fca1 	bl	80083b8 <_PreparePacket>
 8008a76:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a84:	e00b      	b.n	8008a9e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8008a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a8c:	1c59      	adds	r1, r3, #1
 8008a8e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008a90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a94:	b2d2      	uxtb	r2, r2
 8008a96:	701a      	strb	r2, [r3, #0]
 8008a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9a:	09db      	lsrs	r3, r3, #7
 8008a9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa0:	2b7f      	cmp	r3, #127	; 0x7f
 8008aa2:	d8f0      	bhi.n	8008a86 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8008aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa6:	1c5a      	adds	r2, r3, #1
 8008aa8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008aac:	b2d2      	uxtb	r2, r2
 8008aae:	701a      	strb	r2, [r3, #0]
 8008ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	633b      	str	r3, [r7, #48]	; 0x30
 8008abc:	e00b      	b.n	8008ad6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8008abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac4:	1c59      	adds	r1, r3, #1
 8008ac6:	6379      	str	r1, [r7, #52]	; 0x34
 8008ac8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008acc:	b2d2      	uxtb	r2, r2
 8008ace:	701a      	strb	r2, [r3, #0]
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad2:	09db      	lsrs	r3, r3, #7
 8008ad4:	633b      	str	r3, [r7, #48]	; 0x30
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad8:	2b7f      	cmp	r3, #127	; 0x7f
 8008ada:	d8f0      	bhi.n	8008abe <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8008adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ade:	1c5a      	adds	r2, r3, #1
 8008ae0:	637a      	str	r2, [r7, #52]	; 0x34
 8008ae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ae4:	b2d2      	uxtb	r2, r2
 8008ae6:	701a      	strb	r2, [r3, #0]
 8008ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008af4:	e00b      	b.n	8008b0e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8008af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afc:	1c59      	adds	r1, r3, #1
 8008afe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008b00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b04:	b2d2      	uxtb	r2, r2
 8008b06:	701a      	strb	r2, [r3, #0]
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	09db      	lsrs	r3, r3, #7
 8008b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b10:	2b7f      	cmp	r3, #127	; 0x7f
 8008b12:	d8f0      	bhi.n	8008af6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8008b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b16:	1c5a      	adds	r2, r3, #1
 8008b18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b1c:	b2d2      	uxtb	r2, r2
 8008b1e:	701a      	strb	r2, [r3, #0]
 8008b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	627b      	str	r3, [r7, #36]	; 0x24
 8008b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b2a:	623b      	str	r3, [r7, #32]
 8008b2c:	e00b      	b.n	8008b46 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8008b2e:	6a3b      	ldr	r3, [r7, #32]
 8008b30:	b2da      	uxtb	r2, r3
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	1c59      	adds	r1, r3, #1
 8008b36:	6279      	str	r1, [r7, #36]	; 0x24
 8008b38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b3c:	b2d2      	uxtb	r2, r2
 8008b3e:	701a      	strb	r2, [r3, #0]
 8008b40:	6a3b      	ldr	r3, [r7, #32]
 8008b42:	09db      	lsrs	r3, r3, #7
 8008b44:	623b      	str	r3, [r7, #32]
 8008b46:	6a3b      	ldr	r3, [r7, #32]
 8008b48:	2b7f      	cmp	r3, #127	; 0x7f
 8008b4a:	d8f0      	bhi.n	8008b2e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4e:	1c5a      	adds	r2, r3, #1
 8008b50:	627a      	str	r2, [r7, #36]	; 0x24
 8008b52:	6a3a      	ldr	r2, [r7, #32]
 8008b54:	b2d2      	uxtb	r2, r2
 8008b56:	701a      	strb	r2, [r3, #0]
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	6979      	ldr	r1, [r7, #20]
 8008b60:	69b8      	ldr	r0, [r7, #24]
 8008b62:	f7ff fd13 	bl	800858c <_SendPacket>
  RECORD_END();
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	f383 8811 	msr	BASEPRI, r3
}
 8008b6c:	bf00      	nop
 8008b6e:	3740      	adds	r7, #64	; 0x40
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	2000531c 	.word	0x2000531c

08008b78 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b08c      	sub	sp, #48	; 0x30
 8008b7c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8008b7e:	4b58      	ldr	r3, [pc, #352]	; (8008ce0 <SEGGER_SYSVIEW_Start+0x168>)
 8008b80:	2201      	movs	r2, #1
 8008b82:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8008b84:	f3ef 8311 	mrs	r3, BASEPRI
 8008b88:	f04f 0120 	mov.w	r1, #32
 8008b8c:	f381 8811 	msr	BASEPRI, r1
 8008b90:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8008b92:	4b53      	ldr	r3, [pc, #332]	; (8008ce0 <SEGGER_SYSVIEW_Start+0x168>)
 8008b94:	785b      	ldrb	r3, [r3, #1]
 8008b96:	220a      	movs	r2, #10
 8008b98:	4952      	ldr	r1, [pc, #328]	; (8008ce4 <SEGGER_SYSVIEW_Start+0x16c>)
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7f7 fb18 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8008ba6:	200a      	movs	r0, #10
 8008ba8:	f7ff fe2a 	bl	8008800 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008bac:	f3ef 8311 	mrs	r3, BASEPRI
 8008bb0:	f04f 0120 	mov.w	r1, #32
 8008bb4:	f381 8811 	msr	BASEPRI, r1
 8008bb8:	60bb      	str	r3, [r7, #8]
 8008bba:	484b      	ldr	r0, [pc, #300]	; (8008ce8 <SEGGER_SYSVIEW_Start+0x170>)
 8008bbc:	f7ff fbfc 	bl	80083b8 <_PreparePacket>
 8008bc0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bca:	4b45      	ldr	r3, [pc, #276]	; (8008ce0 <SEGGER_SYSVIEW_Start+0x168>)
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bd0:	e00b      	b.n	8008bea <SEGGER_SYSVIEW_Start+0x72>
 8008bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd8:	1c59      	adds	r1, r3, #1
 8008bda:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008bdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008be0:	b2d2      	uxtb	r2, r2
 8008be2:	701a      	strb	r2, [r3, #0]
 8008be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be6:	09db      	lsrs	r3, r3, #7
 8008be8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bec:	2b7f      	cmp	r3, #127	; 0x7f
 8008bee:	d8f0      	bhi.n	8008bd2 <SEGGER_SYSVIEW_Start+0x5a>
 8008bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf2:	1c5a      	adds	r2, r3, #1
 8008bf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bf8:	b2d2      	uxtb	r2, r2
 8008bfa:	701a      	strb	r2, [r3, #0]
 8008bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	627b      	str	r3, [r7, #36]	; 0x24
 8008c04:	4b36      	ldr	r3, [pc, #216]	; (8008ce0 <SEGGER_SYSVIEW_Start+0x168>)
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	623b      	str	r3, [r7, #32]
 8008c0a:	e00b      	b.n	8008c24 <SEGGER_SYSVIEW_Start+0xac>
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	1c59      	adds	r1, r3, #1
 8008c14:	6279      	str	r1, [r7, #36]	; 0x24
 8008c16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c1a:	b2d2      	uxtb	r2, r2
 8008c1c:	701a      	strb	r2, [r3, #0]
 8008c1e:	6a3b      	ldr	r3, [r7, #32]
 8008c20:	09db      	lsrs	r3, r3, #7
 8008c22:	623b      	str	r3, [r7, #32]
 8008c24:	6a3b      	ldr	r3, [r7, #32]
 8008c26:	2b7f      	cmp	r3, #127	; 0x7f
 8008c28:	d8f0      	bhi.n	8008c0c <SEGGER_SYSVIEW_Start+0x94>
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	627a      	str	r2, [r7, #36]	; 0x24
 8008c30:	6a3a      	ldr	r2, [r7, #32]
 8008c32:	b2d2      	uxtb	r2, r2
 8008c34:	701a      	strb	r2, [r3, #0]
 8008c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c38:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	61fb      	str	r3, [r7, #28]
 8008c3e:	4b28      	ldr	r3, [pc, #160]	; (8008ce0 <SEGGER_SYSVIEW_Start+0x168>)
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	61bb      	str	r3, [r7, #24]
 8008c44:	e00b      	b.n	8008c5e <SEGGER_SYSVIEW_Start+0xe6>
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	b2da      	uxtb	r2, r3
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	1c59      	adds	r1, r3, #1
 8008c4e:	61f9      	str	r1, [r7, #28]
 8008c50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c54:	b2d2      	uxtb	r2, r2
 8008c56:	701a      	strb	r2, [r3, #0]
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	09db      	lsrs	r3, r3, #7
 8008c5c:	61bb      	str	r3, [r7, #24]
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	2b7f      	cmp	r3, #127	; 0x7f
 8008c62:	d8f0      	bhi.n	8008c46 <SEGGER_SYSVIEW_Start+0xce>
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	1c5a      	adds	r2, r3, #1
 8008c68:	61fa      	str	r2, [r7, #28]
 8008c6a:	69ba      	ldr	r2, [r7, #24]
 8008c6c:	b2d2      	uxtb	r2, r2
 8008c6e:	701a      	strb	r2, [r3, #0]
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	617b      	str	r3, [r7, #20]
 8008c78:	2300      	movs	r3, #0
 8008c7a:	613b      	str	r3, [r7, #16]
 8008c7c:	e00b      	b.n	8008c96 <SEGGER_SYSVIEW_Start+0x11e>
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	1c59      	adds	r1, r3, #1
 8008c86:	6179      	str	r1, [r7, #20]
 8008c88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c8c:	b2d2      	uxtb	r2, r2
 8008c8e:	701a      	strb	r2, [r3, #0]
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	09db      	lsrs	r3, r3, #7
 8008c94:	613b      	str	r3, [r7, #16]
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	2b7f      	cmp	r3, #127	; 0x7f
 8008c9a:	d8f0      	bhi.n	8008c7e <SEGGER_SYSVIEW_Start+0x106>
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	1c5a      	adds	r2, r3, #1
 8008ca0:	617a      	str	r2, [r7, #20]
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	b2d2      	uxtb	r2, r2
 8008ca6:	701a      	strb	r2, [r3, #0]
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008cac:	2218      	movs	r2, #24
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7ff fc6b 	bl	800858c <_SendPacket>
      RECORD_END();
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008cbc:	4b08      	ldr	r3, [pc, #32]	; (8008ce0 <SEGGER_SYSVIEW_Start+0x168>)
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8008cc4:	4b06      	ldr	r3, [pc, #24]	; (8008ce0 <SEGGER_SYSVIEW_Start+0x168>)
 8008cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8008cca:	f000 f9eb 	bl	80090a4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8008cce:	f000 f9b1 	bl	8009034 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8008cd2:	f000 fc05 	bl	80094e0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8008cd6:	bf00      	nop
 8008cd8:	3730      	adds	r7, #48	; 0x30
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	200052ec 	.word	0x200052ec
 8008ce4:	0800a364 	.word	0x0800a364
 8008ce8:	2000531c 	.word	0x2000531c

08008cec <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008cf2:	f3ef 8311 	mrs	r3, BASEPRI
 8008cf6:	f04f 0120 	mov.w	r1, #32
 8008cfa:	f381 8811 	msr	BASEPRI, r1
 8008cfe:	607b      	str	r3, [r7, #4]
 8008d00:	480b      	ldr	r0, [pc, #44]	; (8008d30 <SEGGER_SYSVIEW_Stop+0x44>)
 8008d02:	f7ff fb59 	bl	80083b8 <_PreparePacket>
 8008d06:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8008d08:	4b0a      	ldr	r3, [pc, #40]	; (8008d34 <SEGGER_SYSVIEW_Stop+0x48>)
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d007      	beq.n	8008d20 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8008d10:	220b      	movs	r2, #11
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	6838      	ldr	r0, [r7, #0]
 8008d16:	f7ff fc39 	bl	800858c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8008d1a:	4b06      	ldr	r3, [pc, #24]	; (8008d34 <SEGGER_SYSVIEW_Stop+0x48>)
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f383 8811 	msr	BASEPRI, r3
}
 8008d26:	bf00      	nop
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	2000531c 	.word	0x2000531c
 8008d34:	200052ec 	.word	0x200052ec

08008d38 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b08c      	sub	sp, #48	; 0x30
 8008d3c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008d3e:	f3ef 8311 	mrs	r3, BASEPRI
 8008d42:	f04f 0120 	mov.w	r1, #32
 8008d46:	f381 8811 	msr	BASEPRI, r1
 8008d4a:	60fb      	str	r3, [r7, #12]
 8008d4c:	4845      	ldr	r0, [pc, #276]	; (8008e64 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8008d4e:	f7ff fb33 	bl	80083b8 <_PreparePacket>
 8008d52:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d5c:	4b42      	ldr	r3, [pc, #264]	; (8008e68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d62:	e00b      	b.n	8008d7c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8008d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d66:	b2da      	uxtb	r2, r3
 8008d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6a:	1c59      	adds	r1, r3, #1
 8008d6c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008d6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d72:	b2d2      	uxtb	r2, r2
 8008d74:	701a      	strb	r2, [r3, #0]
 8008d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d78:	09db      	lsrs	r3, r3, #7
 8008d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8008d80:	d8f0      	bhi.n	8008d64 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8008d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d84:	1c5a      	adds	r2, r3, #1
 8008d86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d8a:	b2d2      	uxtb	r2, r2
 8008d8c:	701a      	strb	r2, [r3, #0]
 8008d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d90:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	627b      	str	r3, [r7, #36]	; 0x24
 8008d96:	4b34      	ldr	r3, [pc, #208]	; (8008e68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	623b      	str	r3, [r7, #32]
 8008d9c:	e00b      	b.n	8008db6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	b2da      	uxtb	r2, r3
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da4:	1c59      	adds	r1, r3, #1
 8008da6:	6279      	str	r1, [r7, #36]	; 0x24
 8008da8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008dac:	b2d2      	uxtb	r2, r2
 8008dae:	701a      	strb	r2, [r3, #0]
 8008db0:	6a3b      	ldr	r3, [r7, #32]
 8008db2:	09db      	lsrs	r3, r3, #7
 8008db4:	623b      	str	r3, [r7, #32]
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	2b7f      	cmp	r3, #127	; 0x7f
 8008dba:	d8f0      	bhi.n	8008d9e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	1c5a      	adds	r2, r3, #1
 8008dc0:	627a      	str	r2, [r7, #36]	; 0x24
 8008dc2:	6a3a      	ldr	r2, [r7, #32]
 8008dc4:	b2d2      	uxtb	r2, r2
 8008dc6:	701a      	strb	r2, [r3, #0]
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	61fb      	str	r3, [r7, #28]
 8008dd0:	4b25      	ldr	r3, [pc, #148]	; (8008e68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	61bb      	str	r3, [r7, #24]
 8008dd6:	e00b      	b.n	8008df0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	1c59      	adds	r1, r3, #1
 8008de0:	61f9      	str	r1, [r7, #28]
 8008de2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008de6:	b2d2      	uxtb	r2, r2
 8008de8:	701a      	strb	r2, [r3, #0]
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	09db      	lsrs	r3, r3, #7
 8008dee:	61bb      	str	r3, [r7, #24]
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	2b7f      	cmp	r3, #127	; 0x7f
 8008df4:	d8f0      	bhi.n	8008dd8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	1c5a      	adds	r2, r3, #1
 8008dfa:	61fa      	str	r2, [r7, #28]
 8008dfc:	69ba      	ldr	r2, [r7, #24]
 8008dfe:	b2d2      	uxtb	r2, r2
 8008e00:	701a      	strb	r2, [r3, #0]
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	617b      	str	r3, [r7, #20]
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	613b      	str	r3, [r7, #16]
 8008e0e:	e00b      	b.n	8008e28 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	b2da      	uxtb	r2, r3
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	1c59      	adds	r1, r3, #1
 8008e18:	6179      	str	r1, [r7, #20]
 8008e1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e1e:	b2d2      	uxtb	r2, r2
 8008e20:	701a      	strb	r2, [r3, #0]
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	09db      	lsrs	r3, r3, #7
 8008e26:	613b      	str	r3, [r7, #16]
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	2b7f      	cmp	r3, #127	; 0x7f
 8008e2c:	d8f0      	bhi.n	8008e10 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	1c5a      	adds	r2, r3, #1
 8008e32:	617a      	str	r2, [r7, #20]
 8008e34:	693a      	ldr	r2, [r7, #16]
 8008e36:	b2d2      	uxtb	r2, r2
 8008e38:	701a      	strb	r2, [r3, #0]
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008e3e:	2218      	movs	r2, #24
 8008e40:	6879      	ldr	r1, [r7, #4]
 8008e42:	68b8      	ldr	r0, [r7, #8]
 8008e44:	f7ff fba2 	bl	800858c <_SendPacket>
  RECORD_END();
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008e4e:	4b06      	ldr	r3, [pc, #24]	; (8008e68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d002      	beq.n	8008e5c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8008e56:	4b04      	ldr	r3, [pc, #16]	; (8008e68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5a:	4798      	blx	r3
  }
}
 8008e5c:	bf00      	nop
 8008e5e:	3730      	adds	r7, #48	; 0x30
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	2000531c 	.word	0x2000531c
 8008e68:	200052ec 	.word	0x200052ec

08008e6c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b092      	sub	sp, #72	; 0x48
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8008e74:	f3ef 8311 	mrs	r3, BASEPRI
 8008e78:	f04f 0120 	mov.w	r1, #32
 8008e7c:	f381 8811 	msr	BASEPRI, r1
 8008e80:	617b      	str	r3, [r7, #20]
 8008e82:	486a      	ldr	r0, [pc, #424]	; (800902c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8008e84:	f7ff fa98 	bl	80083b8 <_PreparePacket>
 8008e88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	647b      	str	r3, [r7, #68]	; 0x44
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	4b66      	ldr	r3, [pc, #408]	; (8009030 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	643b      	str	r3, [r7, #64]	; 0x40
 8008e9e:	e00b      	b.n	8008eb8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8008ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ea6:	1c59      	adds	r1, r3, #1
 8008ea8:	6479      	str	r1, [r7, #68]	; 0x44
 8008eaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008eae:	b2d2      	uxtb	r2, r2
 8008eb0:	701a      	strb	r2, [r3, #0]
 8008eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eb4:	09db      	lsrs	r3, r3, #7
 8008eb6:	643b      	str	r3, [r7, #64]	; 0x40
 8008eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eba:	2b7f      	cmp	r3, #127	; 0x7f
 8008ebc:	d8f0      	bhi.n	8008ea0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8008ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ec0:	1c5a      	adds	r2, r3, #1
 8008ec2:	647a      	str	r2, [r7, #68]	; 0x44
 8008ec4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ec6:	b2d2      	uxtb	r2, r2
 8008ec8:	701a      	strb	r2, [r3, #0]
 8008eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ecc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ed8:	e00b      	b.n	8008ef2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8008eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ee0:	1c59      	adds	r1, r3, #1
 8008ee2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008ee4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ee8:	b2d2      	uxtb	r2, r2
 8008eea:	701a      	strb	r2, [r3, #0]
 8008eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eee:	09db      	lsrs	r3, r3, #7
 8008ef0:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef4:	2b7f      	cmp	r3, #127	; 0x7f
 8008ef6:	d8f0      	bhi.n	8008eda <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8008ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008efa:	1c5a      	adds	r2, r3, #1
 8008efc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008efe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f00:	b2d2      	uxtb	r2, r2
 8008f02:	701a      	strb	r2, [r3, #0]
 8008f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f06:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	2220      	movs	r2, #32
 8008f0e:	4619      	mov	r1, r3
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f7ff fa01 	bl	8008318 <_EncodeStr>
 8008f16:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8008f18:	2209      	movs	r2, #9
 8008f1a:	68f9      	ldr	r1, [r7, #12]
 8008f1c:	6938      	ldr	r0, [r7, #16]
 8008f1e:	f7ff fb35 	bl	800858c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	637b      	str	r3, [r7, #52]	; 0x34
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	4b40      	ldr	r3, [pc, #256]	; (8009030 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	633b      	str	r3, [r7, #48]	; 0x30
 8008f36:	e00b      	b.n	8008f50 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8008f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3a:	b2da      	uxtb	r2, r3
 8008f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f3e:	1c59      	adds	r1, r3, #1
 8008f40:	6379      	str	r1, [r7, #52]	; 0x34
 8008f42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f46:	b2d2      	uxtb	r2, r2
 8008f48:	701a      	strb	r2, [r3, #0]
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4c:	09db      	lsrs	r3, r3, #7
 8008f4e:	633b      	str	r3, [r7, #48]	; 0x30
 8008f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f52:	2b7f      	cmp	r3, #127	; 0x7f
 8008f54:	d8f0      	bhi.n	8008f38 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8008f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f58:	1c5a      	adds	r2, r3, #1
 8008f5a:	637a      	str	r2, [r7, #52]	; 0x34
 8008f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f5e:	b2d2      	uxtb	r2, r2
 8008f60:	701a      	strb	r2, [r3, #0]
 8008f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f70:	e00b      	b.n	8008f8a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8008f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f78:	1c59      	adds	r1, r3, #1
 8008f7a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008f7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f80:	b2d2      	uxtb	r2, r2
 8008f82:	701a      	strb	r2, [r3, #0]
 8008f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f86:	09db      	lsrs	r3, r3, #7
 8008f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8c:	2b7f      	cmp	r3, #127	; 0x7f
 8008f8e:	d8f0      	bhi.n	8008f72 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8008f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f92:	1c5a      	adds	r2, r3, #1
 8008f94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f98:	b2d2      	uxtb	r2, r2
 8008f9a:	701a      	strb	r2, [r3, #0]
 8008f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	623b      	str	r3, [r7, #32]
 8008faa:	e00b      	b.n	8008fc4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8008fac:	6a3b      	ldr	r3, [r7, #32]
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	1c59      	adds	r1, r3, #1
 8008fb4:	6279      	str	r1, [r7, #36]	; 0x24
 8008fb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008fba:	b2d2      	uxtb	r2, r2
 8008fbc:	701a      	strb	r2, [r3, #0]
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	09db      	lsrs	r3, r3, #7
 8008fc2:	623b      	str	r3, [r7, #32]
 8008fc4:	6a3b      	ldr	r3, [r7, #32]
 8008fc6:	2b7f      	cmp	r3, #127	; 0x7f
 8008fc8:	d8f0      	bhi.n	8008fac <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8008fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fcc:	1c5a      	adds	r2, r3, #1
 8008fce:	627a      	str	r2, [r7, #36]	; 0x24
 8008fd0:	6a3a      	ldr	r2, [r7, #32]
 8008fd2:	b2d2      	uxtb	r2, r2
 8008fd4:	701a      	strb	r2, [r3, #0]
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	61fb      	str	r3, [r7, #28]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	61bb      	str	r3, [r7, #24]
 8008fe2:	e00b      	b.n	8008ffc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	b2da      	uxtb	r2, r3
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	1c59      	adds	r1, r3, #1
 8008fec:	61f9      	str	r1, [r7, #28]
 8008fee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ff2:	b2d2      	uxtb	r2, r2
 8008ff4:	701a      	strb	r2, [r3, #0]
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	09db      	lsrs	r3, r3, #7
 8008ffa:	61bb      	str	r3, [r7, #24]
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	2b7f      	cmp	r3, #127	; 0x7f
 8009000:	d8f0      	bhi.n	8008fe4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	1c5a      	adds	r2, r3, #1
 8009006:	61fa      	str	r2, [r7, #28]
 8009008:	69ba      	ldr	r2, [r7, #24]
 800900a:	b2d2      	uxtb	r2, r2
 800900c:	701a      	strb	r2, [r3, #0]
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8009012:	2215      	movs	r2, #21
 8009014:	68f9      	ldr	r1, [r7, #12]
 8009016:	6938      	ldr	r0, [r7, #16]
 8009018:	f7ff fab8 	bl	800858c <_SendPacket>
  RECORD_END();
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	f383 8811 	msr	BASEPRI, r3
}
 8009022:	bf00      	nop
 8009024:	3748      	adds	r7, #72	; 0x48
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	2000531c 	.word	0x2000531c
 8009030:	200052ec 	.word	0x200052ec

08009034 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8009034:	b580      	push	{r7, lr}
 8009036:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8009038:	4b07      	ldr	r3, [pc, #28]	; (8009058 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800903a:	6a1b      	ldr	r3, [r3, #32]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d008      	beq.n	8009052 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8009040:	4b05      	ldr	r3, [pc, #20]	; (8009058 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009042:	6a1b      	ldr	r3, [r3, #32]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d003      	beq.n	8009052 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800904a:	4b03      	ldr	r3, [pc, #12]	; (8009058 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	4798      	blx	r3
  }
}
 8009052:	bf00      	nop
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	200052ec 	.word	0x200052ec

0800905c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800905c:	b580      	push	{r7, lr}
 800905e:	b086      	sub	sp, #24
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009064:	f3ef 8311 	mrs	r3, BASEPRI
 8009068:	f04f 0120 	mov.w	r1, #32
 800906c:	f381 8811 	msr	BASEPRI, r1
 8009070:	617b      	str	r3, [r7, #20]
 8009072:	480b      	ldr	r0, [pc, #44]	; (80090a0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8009074:	f7ff f9a0 	bl	80083b8 <_PreparePacket>
 8009078:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800907a:	2280      	movs	r2, #128	; 0x80
 800907c:	6879      	ldr	r1, [r7, #4]
 800907e:	6938      	ldr	r0, [r7, #16]
 8009080:	f7ff f94a 	bl	8008318 <_EncodeStr>
 8009084:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8009086:	220e      	movs	r2, #14
 8009088:	68f9      	ldr	r1, [r7, #12]
 800908a:	6938      	ldr	r0, [r7, #16]
 800908c:	f7ff fa7e 	bl	800858c <_SendPacket>
  RECORD_END();
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	f383 8811 	msr	BASEPRI, r3
}
 8009096:	bf00      	nop
 8009098:	3718      	adds	r7, #24
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	2000531c 	.word	0x2000531c

080090a4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80090a4:	b590      	push	{r4, r7, lr}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80090aa:	4b14      	ldr	r3, [pc, #80]	; (80090fc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80090ac:	6a1b      	ldr	r3, [r3, #32]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d019      	beq.n	80090e6 <SEGGER_SYSVIEW_RecordSystime+0x42>
 80090b2:	4b12      	ldr	r3, [pc, #72]	; (80090fc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80090b4:	6a1b      	ldr	r3, [r3, #32]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d014      	beq.n	80090e6 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80090bc:	4b0f      	ldr	r3, [pc, #60]	; (80090fc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80090be:	6a1b      	ldr	r3, [r3, #32]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4798      	blx	r3
 80090c4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80090c8:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80090ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 80090ce:	f04f 0300 	mov.w	r3, #0
 80090d2:	f04f 0400 	mov.w	r4, #0
 80090d6:	0013      	movs	r3, r2
 80090d8:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80090da:	461a      	mov	r2, r3
 80090dc:	4601      	mov	r1, r0
 80090de:	200d      	movs	r0, #13
 80090e0:	f7ff fbe8 	bl	80088b4 <SEGGER_SYSVIEW_RecordU32x2>
 80090e4:	e005      	b.n	80090f2 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80090e6:	4b06      	ldr	r3, [pc, #24]	; (8009100 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4619      	mov	r1, r3
 80090ec:	200c      	movs	r0, #12
 80090ee:	f7ff fba5 	bl	800883c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80090f2:	bf00      	nop
 80090f4:	370c      	adds	r7, #12
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd90      	pop	{r4, r7, pc}
 80090fa:	bf00      	nop
 80090fc:	200052ec 	.word	0x200052ec
 8009100:	e0001004 	.word	0xe0001004

08009104 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800910a:	f3ef 8311 	mrs	r3, BASEPRI
 800910e:	f04f 0120 	mov.w	r1, #32
 8009112:	f381 8811 	msr	BASEPRI, r1
 8009116:	60fb      	str	r3, [r7, #12]
 8009118:	4819      	ldr	r0, [pc, #100]	; (8009180 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800911a:	f7ff f94d 	bl	80083b8 <_PreparePacket>
 800911e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8009124:	4b17      	ldr	r3, [pc, #92]	; (8009184 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800912c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	617b      	str	r3, [r7, #20]
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	613b      	str	r3, [r7, #16]
 8009136:	e00b      	b.n	8009150 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	b2da      	uxtb	r2, r3
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	1c59      	adds	r1, r3, #1
 8009140:	6179      	str	r1, [r7, #20]
 8009142:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009146:	b2d2      	uxtb	r2, r2
 8009148:	701a      	strb	r2, [r3, #0]
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	09db      	lsrs	r3, r3, #7
 800914e:	613b      	str	r3, [r7, #16]
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	2b7f      	cmp	r3, #127	; 0x7f
 8009154:	d8f0      	bhi.n	8009138 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	1c5a      	adds	r2, r3, #1
 800915a:	617a      	str	r2, [r7, #20]
 800915c:	693a      	ldr	r2, [r7, #16]
 800915e:	b2d2      	uxtb	r2, r2
 8009160:	701a      	strb	r2, [r3, #0]
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8009166:	2202      	movs	r2, #2
 8009168:	6879      	ldr	r1, [r7, #4]
 800916a:	68b8      	ldr	r0, [r7, #8]
 800916c:	f7ff fa0e 	bl	800858c <_SendPacket>
  RECORD_END();
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f383 8811 	msr	BASEPRI, r3
}
 8009176:	bf00      	nop
 8009178:	3718      	adds	r7, #24
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	2000531c 	.word	0x2000531c
 8009184:	e000ed04 	.word	0xe000ed04

08009188 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800918e:	f3ef 8311 	mrs	r3, BASEPRI
 8009192:	f04f 0120 	mov.w	r1, #32
 8009196:	f381 8811 	msr	BASEPRI, r1
 800919a:	607b      	str	r3, [r7, #4]
 800919c:	4807      	ldr	r0, [pc, #28]	; (80091bc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800919e:	f7ff f90b 	bl	80083b8 <_PreparePacket>
 80091a2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80091a4:	2203      	movs	r2, #3
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	6838      	ldr	r0, [r7, #0]
 80091aa:	f7ff f9ef 	bl	800858c <_SendPacket>
  RECORD_END();
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f383 8811 	msr	BASEPRI, r3
}
 80091b4:	bf00      	nop
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	2000531c 	.word	0x2000531c

080091c0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80091c6:	f3ef 8311 	mrs	r3, BASEPRI
 80091ca:	f04f 0120 	mov.w	r1, #32
 80091ce:	f381 8811 	msr	BASEPRI, r1
 80091d2:	607b      	str	r3, [r7, #4]
 80091d4:	4807      	ldr	r0, [pc, #28]	; (80091f4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80091d6:	f7ff f8ef 	bl	80083b8 <_PreparePacket>
 80091da:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80091dc:	2211      	movs	r2, #17
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	6838      	ldr	r0, [r7, #0]
 80091e2:	f7ff f9d3 	bl	800858c <_SendPacket>
  RECORD_END();
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f383 8811 	msr	BASEPRI, r3
}
 80091ec:	bf00      	nop
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	2000531c 	.word	0x2000531c

080091f8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b088      	sub	sp, #32
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009200:	f3ef 8311 	mrs	r3, BASEPRI
 8009204:	f04f 0120 	mov.w	r1, #32
 8009208:	f381 8811 	msr	BASEPRI, r1
 800920c:	617b      	str	r3, [r7, #20]
 800920e:	4819      	ldr	r0, [pc, #100]	; (8009274 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8009210:	f7ff f8d2 	bl	80083b8 <_PreparePacket>
 8009214:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800921a:	4b17      	ldr	r3, [pc, #92]	; (8009278 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	1ad3      	subs	r3, r2, r3
 8009222:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	61fb      	str	r3, [r7, #28]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	61bb      	str	r3, [r7, #24]
 800922c:	e00b      	b.n	8009246 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	b2da      	uxtb	r2, r3
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	1c59      	adds	r1, r3, #1
 8009236:	61f9      	str	r1, [r7, #28]
 8009238:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800923c:	b2d2      	uxtb	r2, r2
 800923e:	701a      	strb	r2, [r3, #0]
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	09db      	lsrs	r3, r3, #7
 8009244:	61bb      	str	r3, [r7, #24]
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	2b7f      	cmp	r3, #127	; 0x7f
 800924a:	d8f0      	bhi.n	800922e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	1c5a      	adds	r2, r3, #1
 8009250:	61fa      	str	r2, [r7, #28]
 8009252:	69ba      	ldr	r2, [r7, #24]
 8009254:	b2d2      	uxtb	r2, r2
 8009256:	701a      	strb	r2, [r3, #0]
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800925c:	2208      	movs	r2, #8
 800925e:	68f9      	ldr	r1, [r7, #12]
 8009260:	6938      	ldr	r0, [r7, #16]
 8009262:	f7ff f993 	bl	800858c <_SendPacket>
  RECORD_END();
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	f383 8811 	msr	BASEPRI, r3
}
 800926c:	bf00      	nop
 800926e:	3720      	adds	r7, #32
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	2000531c 	.word	0x2000531c
 8009278:	200052ec 	.word	0x200052ec

0800927c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800927c:	b580      	push	{r7, lr}
 800927e:	b088      	sub	sp, #32
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009284:	f3ef 8311 	mrs	r3, BASEPRI
 8009288:	f04f 0120 	mov.w	r1, #32
 800928c:	f381 8811 	msr	BASEPRI, r1
 8009290:	617b      	str	r3, [r7, #20]
 8009292:	4819      	ldr	r0, [pc, #100]	; (80092f8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8009294:	f7ff f890 	bl	80083b8 <_PreparePacket>
 8009298:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800929e:	4b17      	ldr	r3, [pc, #92]	; (80092fc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	61fb      	str	r3, [r7, #28]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	61bb      	str	r3, [r7, #24]
 80092b0:	e00b      	b.n	80092ca <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	1c59      	adds	r1, r3, #1
 80092ba:	61f9      	str	r1, [r7, #28]
 80092bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80092c0:	b2d2      	uxtb	r2, r2
 80092c2:	701a      	strb	r2, [r3, #0]
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	09db      	lsrs	r3, r3, #7
 80092c8:	61bb      	str	r3, [r7, #24]
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	2b7f      	cmp	r3, #127	; 0x7f
 80092ce:	d8f0      	bhi.n	80092b2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	1c5a      	adds	r2, r3, #1
 80092d4:	61fa      	str	r2, [r7, #28]
 80092d6:	69ba      	ldr	r2, [r7, #24]
 80092d8:	b2d2      	uxtb	r2, r2
 80092da:	701a      	strb	r2, [r3, #0]
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80092e0:	2204      	movs	r2, #4
 80092e2:	68f9      	ldr	r1, [r7, #12]
 80092e4:	6938      	ldr	r0, [r7, #16]
 80092e6:	f7ff f951 	bl	800858c <_SendPacket>
  RECORD_END();
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f383 8811 	msr	BASEPRI, r3
}
 80092f0:	bf00      	nop
 80092f2:	3720      	adds	r7, #32
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	2000531c 	.word	0x2000531c
 80092fc:	200052ec 	.word	0x200052ec

08009300 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8009300:	b580      	push	{r7, lr}
 8009302:	b088      	sub	sp, #32
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009308:	f3ef 8311 	mrs	r3, BASEPRI
 800930c:	f04f 0120 	mov.w	r1, #32
 8009310:	f381 8811 	msr	BASEPRI, r1
 8009314:	617b      	str	r3, [r7, #20]
 8009316:	4819      	ldr	r0, [pc, #100]	; (800937c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8009318:	f7ff f84e 	bl	80083b8 <_PreparePacket>
 800931c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009322:	4b17      	ldr	r3, [pc, #92]	; (8009380 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	61fb      	str	r3, [r7, #28]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	61bb      	str	r3, [r7, #24]
 8009334:	e00b      	b.n	800934e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	b2da      	uxtb	r2, r3
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	1c59      	adds	r1, r3, #1
 800933e:	61f9      	str	r1, [r7, #28]
 8009340:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009344:	b2d2      	uxtb	r2, r2
 8009346:	701a      	strb	r2, [r3, #0]
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	09db      	lsrs	r3, r3, #7
 800934c:	61bb      	str	r3, [r7, #24]
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	2b7f      	cmp	r3, #127	; 0x7f
 8009352:	d8f0      	bhi.n	8009336 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	1c5a      	adds	r2, r3, #1
 8009358:	61fa      	str	r2, [r7, #28]
 800935a:	69ba      	ldr	r2, [r7, #24]
 800935c:	b2d2      	uxtb	r2, r2
 800935e:	701a      	strb	r2, [r3, #0]
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8009364:	2206      	movs	r2, #6
 8009366:	68f9      	ldr	r1, [r7, #12]
 8009368:	6938      	ldr	r0, [r7, #16]
 800936a:	f7ff f90f 	bl	800858c <_SendPacket>
  RECORD_END();
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	f383 8811 	msr	BASEPRI, r3
}
 8009374:	bf00      	nop
 8009376:	3720      	adds	r7, #32
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	2000531c 	.word	0x2000531c
 8009380:	200052ec 	.word	0x200052ec

08009384 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800938c:	4b04      	ldr	r3, [pc, #16]	; (80093a0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	1ad3      	subs	r3, r2, r3
}
 8009394:	4618      	mov	r0, r3
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	200052ec 	.word	0x200052ec

080093a4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b08c      	sub	sp, #48	; 0x30
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	4603      	mov	r3, r0
 80093ac:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80093ae:	4b3b      	ldr	r3, [pc, #236]	; (800949c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d06d      	beq.n	8009492 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80093b6:	4b39      	ldr	r3, [pc, #228]	; (800949c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80093bc:	2300      	movs	r3, #0
 80093be:	62bb      	str	r3, [r7, #40]	; 0x28
 80093c0:	e008      	b.n	80093d4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80093c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80093c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d007      	beq.n	80093de <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	3301      	adds	r3, #1
 80093d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80093d4:	79fb      	ldrb	r3, [r7, #7]
 80093d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093d8:	429a      	cmp	r2, r3
 80093da:	d3f2      	bcc.n	80093c2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80093dc:	e000      	b.n	80093e0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80093de:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80093e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d055      	beq.n	8009492 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80093e6:	f3ef 8311 	mrs	r3, BASEPRI
 80093ea:	f04f 0120 	mov.w	r1, #32
 80093ee:	f381 8811 	msr	BASEPRI, r1
 80093f2:	617b      	str	r3, [r7, #20]
 80093f4:	482a      	ldr	r0, [pc, #168]	; (80094a0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80093f6:	f7fe ffdf 	bl	80083b8 <_PreparePacket>
 80093fa:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	627b      	str	r3, [r7, #36]	; 0x24
 8009404:	79fb      	ldrb	r3, [r7, #7]
 8009406:	623b      	str	r3, [r7, #32]
 8009408:	e00b      	b.n	8009422 <SEGGER_SYSVIEW_SendModule+0x7e>
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	b2da      	uxtb	r2, r3
 800940e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009410:	1c59      	adds	r1, r3, #1
 8009412:	6279      	str	r1, [r7, #36]	; 0x24
 8009414:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009418:	b2d2      	uxtb	r2, r2
 800941a:	701a      	strb	r2, [r3, #0]
 800941c:	6a3b      	ldr	r3, [r7, #32]
 800941e:	09db      	lsrs	r3, r3, #7
 8009420:	623b      	str	r3, [r7, #32]
 8009422:	6a3b      	ldr	r3, [r7, #32]
 8009424:	2b7f      	cmp	r3, #127	; 0x7f
 8009426:	d8f0      	bhi.n	800940a <SEGGER_SYSVIEW_SendModule+0x66>
 8009428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942a:	1c5a      	adds	r2, r3, #1
 800942c:	627a      	str	r2, [r7, #36]	; 0x24
 800942e:	6a3a      	ldr	r2, [r7, #32]
 8009430:	b2d2      	uxtb	r2, r2
 8009432:	701a      	strb	r2, [r3, #0]
 8009434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009436:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	61fb      	str	r3, [r7, #28]
 800943c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	61bb      	str	r3, [r7, #24]
 8009442:	e00b      	b.n	800945c <SEGGER_SYSVIEW_SendModule+0xb8>
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	b2da      	uxtb	r2, r3
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	1c59      	adds	r1, r3, #1
 800944c:	61f9      	str	r1, [r7, #28]
 800944e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009452:	b2d2      	uxtb	r2, r2
 8009454:	701a      	strb	r2, [r3, #0]
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	09db      	lsrs	r3, r3, #7
 800945a:	61bb      	str	r3, [r7, #24]
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	2b7f      	cmp	r3, #127	; 0x7f
 8009460:	d8f0      	bhi.n	8009444 <SEGGER_SYSVIEW_SendModule+0xa0>
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	1c5a      	adds	r2, r3, #1
 8009466:	61fa      	str	r2, [r7, #28]
 8009468:	69ba      	ldr	r2, [r7, #24]
 800946a:	b2d2      	uxtb	r2, r2
 800946c:	701a      	strb	r2, [r3, #0]
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2280      	movs	r2, #128	; 0x80
 8009478:	4619      	mov	r1, r3
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f7fe ff4c 	bl	8008318 <_EncodeStr>
 8009480:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8009482:	2216      	movs	r2, #22
 8009484:	68f9      	ldr	r1, [r7, #12]
 8009486:	6938      	ldr	r0, [r7, #16]
 8009488:	f7ff f880 	bl	800858c <_SendPacket>
      RECORD_END();
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8009492:	bf00      	nop
 8009494:	3730      	adds	r7, #48	; 0x30
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	20005314 	.word	0x20005314
 80094a0:	2000531c 	.word	0x2000531c

080094a4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80094aa:	4b0c      	ldr	r3, [pc, #48]	; (80094dc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00f      	beq.n	80094d2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80094b2:	4b0a      	ldr	r3, [pc, #40]	; (80094dc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d002      	beq.n	80094c6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1f2      	bne.n	80094b8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80094d2:	bf00      	nop
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	20005314 	.word	0x20005314

080094e0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b086      	sub	sp, #24
 80094e4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80094e6:	f3ef 8311 	mrs	r3, BASEPRI
 80094ea:	f04f 0120 	mov.w	r1, #32
 80094ee:	f381 8811 	msr	BASEPRI, r1
 80094f2:	60fb      	str	r3, [r7, #12]
 80094f4:	4817      	ldr	r0, [pc, #92]	; (8009554 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80094f6:	f7fe ff5f 	bl	80083b8 <_PreparePacket>
 80094fa:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	617b      	str	r3, [r7, #20]
 8009504:	4b14      	ldr	r3, [pc, #80]	; (8009558 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	613b      	str	r3, [r7, #16]
 800950a:	e00b      	b.n	8009524 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	b2da      	uxtb	r2, r3
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	1c59      	adds	r1, r3, #1
 8009514:	6179      	str	r1, [r7, #20]
 8009516:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800951a:	b2d2      	uxtb	r2, r2
 800951c:	701a      	strb	r2, [r3, #0]
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	09db      	lsrs	r3, r3, #7
 8009522:	613b      	str	r3, [r7, #16]
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	2b7f      	cmp	r3, #127	; 0x7f
 8009528:	d8f0      	bhi.n	800950c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	1c5a      	adds	r2, r3, #1
 800952e:	617a      	str	r2, [r7, #20]
 8009530:	693a      	ldr	r2, [r7, #16]
 8009532:	b2d2      	uxtb	r2, r2
 8009534:	701a      	strb	r2, [r3, #0]
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800953a:	221b      	movs	r2, #27
 800953c:	6879      	ldr	r1, [r7, #4]
 800953e:	68b8      	ldr	r0, [r7, #8]
 8009540:	f7ff f824 	bl	800858c <_SendPacket>
  RECORD_END();
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f383 8811 	msr	BASEPRI, r3
}
 800954a:	bf00      	nop
 800954c:	3718      	adds	r7, #24
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	2000531c 	.word	0x2000531c
 8009558:	20005318 	.word	0x20005318

0800955c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800955c:	b580      	push	{r7, lr}
 800955e:	b08a      	sub	sp, #40	; 0x28
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009564:	f3ef 8311 	mrs	r3, BASEPRI
 8009568:	f04f 0120 	mov.w	r1, #32
 800956c:	f381 8811 	msr	BASEPRI, r1
 8009570:	617b      	str	r3, [r7, #20]
 8009572:	4827      	ldr	r0, [pc, #156]	; (8009610 <SEGGER_SYSVIEW_Warn+0xb4>)
 8009574:	f7fe ff20 	bl	80083b8 <_PreparePacket>
 8009578:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800957a:	2280      	movs	r2, #128	; 0x80
 800957c:	6879      	ldr	r1, [r7, #4]
 800957e:	6938      	ldr	r0, [r7, #16]
 8009580:	f7fe feca 	bl	8008318 <_EncodeStr>
 8009584:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	627b      	str	r3, [r7, #36]	; 0x24
 800958a:	2301      	movs	r3, #1
 800958c:	623b      	str	r3, [r7, #32]
 800958e:	e00b      	b.n	80095a8 <SEGGER_SYSVIEW_Warn+0x4c>
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	b2da      	uxtb	r2, r3
 8009594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009596:	1c59      	adds	r1, r3, #1
 8009598:	6279      	str	r1, [r7, #36]	; 0x24
 800959a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800959e:	b2d2      	uxtb	r2, r2
 80095a0:	701a      	strb	r2, [r3, #0]
 80095a2:	6a3b      	ldr	r3, [r7, #32]
 80095a4:	09db      	lsrs	r3, r3, #7
 80095a6:	623b      	str	r3, [r7, #32]
 80095a8:	6a3b      	ldr	r3, [r7, #32]
 80095aa:	2b7f      	cmp	r3, #127	; 0x7f
 80095ac:	d8f0      	bhi.n	8009590 <SEGGER_SYSVIEW_Warn+0x34>
 80095ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b0:	1c5a      	adds	r2, r3, #1
 80095b2:	627a      	str	r2, [r7, #36]	; 0x24
 80095b4:	6a3a      	ldr	r2, [r7, #32]
 80095b6:	b2d2      	uxtb	r2, r2
 80095b8:	701a      	strb	r2, [r3, #0]
 80095ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	61fb      	str	r3, [r7, #28]
 80095c2:	2300      	movs	r3, #0
 80095c4:	61bb      	str	r3, [r7, #24]
 80095c6:	e00b      	b.n	80095e0 <SEGGER_SYSVIEW_Warn+0x84>
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	b2da      	uxtb	r2, r3
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	1c59      	adds	r1, r3, #1
 80095d0:	61f9      	str	r1, [r7, #28]
 80095d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80095d6:	b2d2      	uxtb	r2, r2
 80095d8:	701a      	strb	r2, [r3, #0]
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	09db      	lsrs	r3, r3, #7
 80095de:	61bb      	str	r3, [r7, #24]
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	2b7f      	cmp	r3, #127	; 0x7f
 80095e4:	d8f0      	bhi.n	80095c8 <SEGGER_SYSVIEW_Warn+0x6c>
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	1c5a      	adds	r2, r3, #1
 80095ea:	61fa      	str	r2, [r7, #28]
 80095ec:	69ba      	ldr	r2, [r7, #24]
 80095ee:	b2d2      	uxtb	r2, r2
 80095f0:	701a      	strb	r2, [r3, #0]
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80095f6:	221a      	movs	r2, #26
 80095f8:	68f9      	ldr	r1, [r7, #12]
 80095fa:	6938      	ldr	r0, [r7, #16]
 80095fc:	f7fe ffc6 	bl	800858c <_SendPacket>
  RECORD_END();
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	f383 8811 	msr	BASEPRI, r3
}
 8009606:	bf00      	nop
 8009608:	3728      	adds	r7, #40	; 0x28
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	2000531c 	.word	0x2000531c

08009614 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8009614:	b580      	push	{r7, lr}
 8009616:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8009618:	4803      	ldr	r0, [pc, #12]	; (8009628 <_cbSendSystemDesc+0x14>)
 800961a:	f7ff fd1f 	bl	800905c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800961e:	4803      	ldr	r0, [pc, #12]	; (800962c <_cbSendSystemDesc+0x18>)
 8009620:	f7ff fd1c 	bl	800905c <SEGGER_SYSVIEW_SendSysDesc>
}
 8009624:	bf00      	nop
 8009626:	bd80      	pop	{r7, pc}
 8009628:	0800a230 	.word	0x0800a230
 800962c:	0800a264 	.word	0x0800a264

08009630 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8009630:	b580      	push	{r7, lr}
 8009632:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8009634:	4b06      	ldr	r3, [pc, #24]	; (8009650 <SEGGER_SYSVIEW_Conf+0x20>)
 8009636:	6818      	ldr	r0, [r3, #0]
 8009638:	4b05      	ldr	r3, [pc, #20]	; (8009650 <SEGGER_SYSVIEW_Conf+0x20>)
 800963a:	6819      	ldr	r1, [r3, #0]
 800963c:	4b05      	ldr	r3, [pc, #20]	; (8009654 <SEGGER_SYSVIEW_Conf+0x24>)
 800963e:	4a06      	ldr	r2, [pc, #24]	; (8009658 <SEGGER_SYSVIEW_Conf+0x28>)
 8009640:	f7ff f88a 	bl	8008758 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8009644:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8009648:	f7ff f8ca 	bl	80087e0 <SEGGER_SYSVIEW_SetRAMBase>
}
 800964c:	bf00      	nop
 800964e:	bd80      	pop	{r7, pc}
 8009650:	20000010 	.word	0x20000010
 8009654:	08009615 	.word	0x08009615
 8009658:	0800a370 	.word	0x0800a370

0800965c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800965c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800965e:	b085      	sub	sp, #20
 8009660:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8009662:	2300      	movs	r3, #0
 8009664:	607b      	str	r3, [r7, #4]
 8009666:	e048      	b.n	80096fa <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8009668:	4928      	ldr	r1, [pc, #160]	; (800970c <_cbSendTaskList+0xb0>)
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	4613      	mov	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4413      	add	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	440b      	add	r3, r1
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4618      	mov	r0, r3
 800967a:	f7fd fbf3 	bl	8006e64 <uxTaskGetStackHighWaterMark>
 800967e:	4923      	ldr	r1, [pc, #140]	; (800970c <_cbSendTaskList+0xb0>)
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	4613      	mov	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	440b      	add	r3, r1
 800968c:	3310      	adds	r3, #16
 800968e:	6018      	str	r0, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8009690:	491e      	ldr	r1, [pc, #120]	; (800970c <_cbSendTaskList+0xb0>)
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	4613      	mov	r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4413      	add	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	440b      	add	r3, r1
 800969e:	6818      	ldr	r0, [r3, #0]
 80096a0:	491a      	ldr	r1, [pc, #104]	; (800970c <_cbSendTaskList+0xb0>)
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	4613      	mov	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	440b      	add	r3, r1
 80096ae:	3304      	adds	r3, #4
 80096b0:	681c      	ldr	r4, [r3, #0]
 80096b2:	4916      	ldr	r1, [pc, #88]	; (800970c <_cbSendTaskList+0xb0>)
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	4613      	mov	r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	4413      	add	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	440b      	add	r3, r1
 80096c0:	3308      	adds	r3, #8
 80096c2:	681d      	ldr	r5, [r3, #0]
 80096c4:	4911      	ldr	r1, [pc, #68]	; (800970c <_cbSendTaskList+0xb0>)
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	4613      	mov	r3, r2
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	4413      	add	r3, r2
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	440b      	add	r3, r1
 80096d2:	330c      	adds	r3, #12
 80096d4:	681e      	ldr	r6, [r3, #0]
 80096d6:	490d      	ldr	r1, [pc, #52]	; (800970c <_cbSendTaskList+0xb0>)
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	4613      	mov	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	440b      	add	r3, r1
 80096e4:	3310      	adds	r3, #16
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	4633      	mov	r3, r6
 80096ec:	462a      	mov	r2, r5
 80096ee:	4621      	mov	r1, r4
 80096f0:	f000 f8b4 	bl	800985c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	3301      	adds	r3, #1
 80096f8:	607b      	str	r3, [r7, #4]
 80096fa:	4b05      	ldr	r3, [pc, #20]	; (8009710 <_cbSendTaskList+0xb4>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	429a      	cmp	r2, r3
 8009702:	d3b1      	bcc.n	8009668 <_cbSendTaskList+0xc>
  }
}
 8009704:	bf00      	nop
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800970c:	20005400 	.word	0x20005400
 8009710:	200054a0 	.word	0x200054a0

08009714 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8009714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800971a:	f7fd f86f 	bl	80067fc <xTaskGetTickCountFromISR>
 800971e:	4603      	mov	r3, r0
 8009720:	f04f 0400 	mov.w	r4, #0
 8009724:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8009728:	e9d7 5600 	ldrd	r5, r6, [r7]
 800972c:	462b      	mov	r3, r5
 800972e:	4634      	mov	r4, r6
 8009730:	f04f 0100 	mov.w	r1, #0
 8009734:	f04f 0200 	mov.w	r2, #0
 8009738:	0162      	lsls	r2, r4, #5
 800973a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800973e:	0159      	lsls	r1, r3, #5
 8009740:	460b      	mov	r3, r1
 8009742:	4614      	mov	r4, r2
 8009744:	1b5b      	subs	r3, r3, r5
 8009746:	eb64 0406 	sbc.w	r4, r4, r6
 800974a:	f04f 0100 	mov.w	r1, #0
 800974e:	f04f 0200 	mov.w	r2, #0
 8009752:	00a2      	lsls	r2, r4, #2
 8009754:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8009758:	0099      	lsls	r1, r3, #2
 800975a:	460b      	mov	r3, r1
 800975c:	4614      	mov	r4, r2
 800975e:	195b      	adds	r3, r3, r5
 8009760:	eb44 0406 	adc.w	r4, r4, r6
 8009764:	f04f 0100 	mov.w	r1, #0
 8009768:	f04f 0200 	mov.w	r2, #0
 800976c:	00e2      	lsls	r2, r4, #3
 800976e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009772:	00d9      	lsls	r1, r3, #3
 8009774:	460b      	mov	r3, r1
 8009776:	4614      	mov	r4, r2
 8009778:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 800977c:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8009780:	4618      	mov	r0, r3
 8009782:	4621      	mov	r1, r4
 8009784:	370c      	adds	r7, #12
 8009786:	46bd      	mov	sp, r7
 8009788:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800978c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800978c:	b580      	push	{r7, lr}
 800978e:	b086      	sub	sp, #24
 8009790:	af02      	add	r7, sp, #8
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
 8009798:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800979a:	2205      	movs	r2, #5
 800979c:	492b      	ldr	r1, [pc, #172]	; (800984c <SYSVIEW_AddTask+0xc0>)
 800979e:	68b8      	ldr	r0, [r7, #8]
 80097a0:	f000 f8a8 	bl	80098f4 <memcmp>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d04b      	beq.n	8009842 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80097aa:	4b29      	ldr	r3, [pc, #164]	; (8009850 <SYSVIEW_AddTask+0xc4>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b07      	cmp	r3, #7
 80097b0:	d903      	bls.n	80097ba <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80097b2:	4828      	ldr	r0, [pc, #160]	; (8009854 <SYSVIEW_AddTask+0xc8>)
 80097b4:	f7ff fed2 	bl	800955c <SEGGER_SYSVIEW_Warn>
    return;
 80097b8:	e044      	b.n	8009844 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80097ba:	4b25      	ldr	r3, [pc, #148]	; (8009850 <SYSVIEW_AddTask+0xc4>)
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	4926      	ldr	r1, [pc, #152]	; (8009858 <SYSVIEW_AddTask+0xcc>)
 80097c0:	4613      	mov	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4413      	add	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	440b      	add	r3, r1
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80097ce:	4b20      	ldr	r3, [pc, #128]	; (8009850 <SYSVIEW_AddTask+0xc4>)
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	4921      	ldr	r1, [pc, #132]	; (8009858 <SYSVIEW_AddTask+0xcc>)
 80097d4:	4613      	mov	r3, r2
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	4413      	add	r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	440b      	add	r3, r1
 80097de:	3304      	adds	r3, #4
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80097e4:	4b1a      	ldr	r3, [pc, #104]	; (8009850 <SYSVIEW_AddTask+0xc4>)
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	491b      	ldr	r1, [pc, #108]	; (8009858 <SYSVIEW_AddTask+0xcc>)
 80097ea:	4613      	mov	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	440b      	add	r3, r1
 80097f4:	3308      	adds	r3, #8
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80097fa:	4b15      	ldr	r3, [pc, #84]	; (8009850 <SYSVIEW_AddTask+0xc4>)
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	4916      	ldr	r1, [pc, #88]	; (8009858 <SYSVIEW_AddTask+0xcc>)
 8009800:	4613      	mov	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	4413      	add	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	440b      	add	r3, r1
 800980a:	330c      	adds	r3, #12
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8009810:	4b0f      	ldr	r3, [pc, #60]	; (8009850 <SYSVIEW_AddTask+0xc4>)
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	4910      	ldr	r1, [pc, #64]	; (8009858 <SYSVIEW_AddTask+0xcc>)
 8009816:	4613      	mov	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	440b      	add	r3, r1
 8009820:	3310      	adds	r3, #16
 8009822:	69ba      	ldr	r2, [r7, #24]
 8009824:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8009826:	4b0a      	ldr	r3, [pc, #40]	; (8009850 <SYSVIEW_AddTask+0xc4>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	3301      	adds	r3, #1
 800982c:	4a08      	ldr	r2, [pc, #32]	; (8009850 <SYSVIEW_AddTask+0xc4>)
 800982e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	68b9      	ldr	r1, [r7, #8]
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f000 f80e 	bl	800985c <SYSVIEW_SendTaskInfo>
 8009840:	e000      	b.n	8009844 <SYSVIEW_AddTask+0xb8>
    return;
 8009842:	bf00      	nop

}
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	0800a274 	.word	0x0800a274
 8009850:	200054a0 	.word	0x200054a0
 8009854:	0800a27c 	.word	0x0800a27c
 8009858:	20005400 	.word	0x20005400

0800985c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800985c:	b580      	push	{r7, lr}
 800985e:	b08a      	sub	sp, #40	; 0x28
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
 8009868:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800986a:	f107 0314 	add.w	r3, r7, #20
 800986e:	2214      	movs	r2, #20
 8009870:	2100      	movs	r1, #0
 8009872:	4618      	mov	r0, r3
 8009874:	f000 f871 	bl	800995a <memset>
  TaskInfo.TaskID     = TaskID;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8009888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800988c:	f107 0314 	add.w	r3, r7, #20
 8009890:	4618      	mov	r0, r3
 8009892:	f7ff faeb 	bl	8008e6c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8009896:	bf00      	nop
 8009898:	3728      	adds	r7, #40	; 0x28
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
	...

080098a0 <__errno>:
 80098a0:	4b01      	ldr	r3, [pc, #4]	; (80098a8 <__errno+0x8>)
 80098a2:	6818      	ldr	r0, [r3, #0]
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop
 80098a8:	20000020 	.word	0x20000020

080098ac <__libc_init_array>:
 80098ac:	b570      	push	{r4, r5, r6, lr}
 80098ae:	4e0d      	ldr	r6, [pc, #52]	; (80098e4 <__libc_init_array+0x38>)
 80098b0:	4c0d      	ldr	r4, [pc, #52]	; (80098e8 <__libc_init_array+0x3c>)
 80098b2:	1ba4      	subs	r4, r4, r6
 80098b4:	10a4      	asrs	r4, r4, #2
 80098b6:	2500      	movs	r5, #0
 80098b8:	42a5      	cmp	r5, r4
 80098ba:	d109      	bne.n	80098d0 <__libc_init_array+0x24>
 80098bc:	4e0b      	ldr	r6, [pc, #44]	; (80098ec <__libc_init_array+0x40>)
 80098be:	4c0c      	ldr	r4, [pc, #48]	; (80098f0 <__libc_init_array+0x44>)
 80098c0:	f000 fc36 	bl	800a130 <_init>
 80098c4:	1ba4      	subs	r4, r4, r6
 80098c6:	10a4      	asrs	r4, r4, #2
 80098c8:	2500      	movs	r5, #0
 80098ca:	42a5      	cmp	r5, r4
 80098cc:	d105      	bne.n	80098da <__libc_init_array+0x2e>
 80098ce:	bd70      	pop	{r4, r5, r6, pc}
 80098d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098d4:	4798      	blx	r3
 80098d6:	3501      	adds	r5, #1
 80098d8:	e7ee      	b.n	80098b8 <__libc_init_array+0xc>
 80098da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098de:	4798      	blx	r3
 80098e0:	3501      	adds	r5, #1
 80098e2:	e7f2      	b.n	80098ca <__libc_init_array+0x1e>
 80098e4:	0800a3b4 	.word	0x0800a3b4
 80098e8:	0800a3b4 	.word	0x0800a3b4
 80098ec:	0800a3b4 	.word	0x0800a3b4
 80098f0:	0800a3b8 	.word	0x0800a3b8

080098f4 <memcmp>:
 80098f4:	b530      	push	{r4, r5, lr}
 80098f6:	2400      	movs	r4, #0
 80098f8:	42a2      	cmp	r2, r4
 80098fa:	d101      	bne.n	8009900 <memcmp+0xc>
 80098fc:	2000      	movs	r0, #0
 80098fe:	e007      	b.n	8009910 <memcmp+0x1c>
 8009900:	5d03      	ldrb	r3, [r0, r4]
 8009902:	3401      	adds	r4, #1
 8009904:	190d      	adds	r5, r1, r4
 8009906:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800990a:	42ab      	cmp	r3, r5
 800990c:	d0f4      	beq.n	80098f8 <memcmp+0x4>
 800990e:	1b58      	subs	r0, r3, r5
 8009910:	bd30      	pop	{r4, r5, pc}

08009912 <memcpy>:
 8009912:	b510      	push	{r4, lr}
 8009914:	1e43      	subs	r3, r0, #1
 8009916:	440a      	add	r2, r1
 8009918:	4291      	cmp	r1, r2
 800991a:	d100      	bne.n	800991e <memcpy+0xc>
 800991c:	bd10      	pop	{r4, pc}
 800991e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009922:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009926:	e7f7      	b.n	8009918 <memcpy+0x6>

08009928 <memmove>:
 8009928:	4288      	cmp	r0, r1
 800992a:	b510      	push	{r4, lr}
 800992c:	eb01 0302 	add.w	r3, r1, r2
 8009930:	d807      	bhi.n	8009942 <memmove+0x1a>
 8009932:	1e42      	subs	r2, r0, #1
 8009934:	4299      	cmp	r1, r3
 8009936:	d00a      	beq.n	800994e <memmove+0x26>
 8009938:	f811 4b01 	ldrb.w	r4, [r1], #1
 800993c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009940:	e7f8      	b.n	8009934 <memmove+0xc>
 8009942:	4283      	cmp	r3, r0
 8009944:	d9f5      	bls.n	8009932 <memmove+0xa>
 8009946:	1881      	adds	r1, r0, r2
 8009948:	1ad2      	subs	r2, r2, r3
 800994a:	42d3      	cmn	r3, r2
 800994c:	d100      	bne.n	8009950 <memmove+0x28>
 800994e:	bd10      	pop	{r4, pc}
 8009950:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009954:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009958:	e7f7      	b.n	800994a <memmove+0x22>

0800995a <memset>:
 800995a:	4402      	add	r2, r0
 800995c:	4603      	mov	r3, r0
 800995e:	4293      	cmp	r3, r2
 8009960:	d100      	bne.n	8009964 <memset+0xa>
 8009962:	4770      	bx	lr
 8009964:	f803 1b01 	strb.w	r1, [r3], #1
 8009968:	e7f9      	b.n	800995e <memset+0x4>
	...

0800996c <siprintf>:
 800996c:	b40e      	push	{r1, r2, r3}
 800996e:	b500      	push	{lr}
 8009970:	b09c      	sub	sp, #112	; 0x70
 8009972:	ab1d      	add	r3, sp, #116	; 0x74
 8009974:	9002      	str	r0, [sp, #8]
 8009976:	9006      	str	r0, [sp, #24]
 8009978:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800997c:	4809      	ldr	r0, [pc, #36]	; (80099a4 <siprintf+0x38>)
 800997e:	9107      	str	r1, [sp, #28]
 8009980:	9104      	str	r1, [sp, #16]
 8009982:	4909      	ldr	r1, [pc, #36]	; (80099a8 <siprintf+0x3c>)
 8009984:	f853 2b04 	ldr.w	r2, [r3], #4
 8009988:	9105      	str	r1, [sp, #20]
 800998a:	6800      	ldr	r0, [r0, #0]
 800998c:	9301      	str	r3, [sp, #4]
 800998e:	a902      	add	r1, sp, #8
 8009990:	f000 f866 	bl	8009a60 <_svfiprintf_r>
 8009994:	9b02      	ldr	r3, [sp, #8]
 8009996:	2200      	movs	r2, #0
 8009998:	701a      	strb	r2, [r3, #0]
 800999a:	b01c      	add	sp, #112	; 0x70
 800999c:	f85d eb04 	ldr.w	lr, [sp], #4
 80099a0:	b003      	add	sp, #12
 80099a2:	4770      	bx	lr
 80099a4:	20000020 	.word	0x20000020
 80099a8:	ffff0208 	.word	0xffff0208

080099ac <__ssputs_r>:
 80099ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099b0:	688e      	ldr	r6, [r1, #8]
 80099b2:	429e      	cmp	r6, r3
 80099b4:	4682      	mov	sl, r0
 80099b6:	460c      	mov	r4, r1
 80099b8:	4690      	mov	r8, r2
 80099ba:	4699      	mov	r9, r3
 80099bc:	d837      	bhi.n	8009a2e <__ssputs_r+0x82>
 80099be:	898a      	ldrh	r2, [r1, #12]
 80099c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099c4:	d031      	beq.n	8009a2a <__ssputs_r+0x7e>
 80099c6:	6825      	ldr	r5, [r4, #0]
 80099c8:	6909      	ldr	r1, [r1, #16]
 80099ca:	1a6f      	subs	r7, r5, r1
 80099cc:	6965      	ldr	r5, [r4, #20]
 80099ce:	2302      	movs	r3, #2
 80099d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80099d8:	f109 0301 	add.w	r3, r9, #1
 80099dc:	443b      	add	r3, r7
 80099de:	429d      	cmp	r5, r3
 80099e0:	bf38      	it	cc
 80099e2:	461d      	movcc	r5, r3
 80099e4:	0553      	lsls	r3, r2, #21
 80099e6:	d530      	bpl.n	8009a4a <__ssputs_r+0x9e>
 80099e8:	4629      	mov	r1, r5
 80099ea:	f000 fb07 	bl	8009ffc <_malloc_r>
 80099ee:	4606      	mov	r6, r0
 80099f0:	b950      	cbnz	r0, 8009a08 <__ssputs_r+0x5c>
 80099f2:	230c      	movs	r3, #12
 80099f4:	f8ca 3000 	str.w	r3, [sl]
 80099f8:	89a3      	ldrh	r3, [r4, #12]
 80099fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099fe:	81a3      	strh	r3, [r4, #12]
 8009a00:	f04f 30ff 	mov.w	r0, #4294967295
 8009a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a08:	463a      	mov	r2, r7
 8009a0a:	6921      	ldr	r1, [r4, #16]
 8009a0c:	f7ff ff81 	bl	8009912 <memcpy>
 8009a10:	89a3      	ldrh	r3, [r4, #12]
 8009a12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a1a:	81a3      	strh	r3, [r4, #12]
 8009a1c:	6126      	str	r6, [r4, #16]
 8009a1e:	6165      	str	r5, [r4, #20]
 8009a20:	443e      	add	r6, r7
 8009a22:	1bed      	subs	r5, r5, r7
 8009a24:	6026      	str	r6, [r4, #0]
 8009a26:	60a5      	str	r5, [r4, #8]
 8009a28:	464e      	mov	r6, r9
 8009a2a:	454e      	cmp	r6, r9
 8009a2c:	d900      	bls.n	8009a30 <__ssputs_r+0x84>
 8009a2e:	464e      	mov	r6, r9
 8009a30:	4632      	mov	r2, r6
 8009a32:	4641      	mov	r1, r8
 8009a34:	6820      	ldr	r0, [r4, #0]
 8009a36:	f7ff ff77 	bl	8009928 <memmove>
 8009a3a:	68a3      	ldr	r3, [r4, #8]
 8009a3c:	1b9b      	subs	r3, r3, r6
 8009a3e:	60a3      	str	r3, [r4, #8]
 8009a40:	6823      	ldr	r3, [r4, #0]
 8009a42:	441e      	add	r6, r3
 8009a44:	6026      	str	r6, [r4, #0]
 8009a46:	2000      	movs	r0, #0
 8009a48:	e7dc      	b.n	8009a04 <__ssputs_r+0x58>
 8009a4a:	462a      	mov	r2, r5
 8009a4c:	f000 fb30 	bl	800a0b0 <_realloc_r>
 8009a50:	4606      	mov	r6, r0
 8009a52:	2800      	cmp	r0, #0
 8009a54:	d1e2      	bne.n	8009a1c <__ssputs_r+0x70>
 8009a56:	6921      	ldr	r1, [r4, #16]
 8009a58:	4650      	mov	r0, sl
 8009a5a:	f000 fa81 	bl	8009f60 <_free_r>
 8009a5e:	e7c8      	b.n	80099f2 <__ssputs_r+0x46>

08009a60 <_svfiprintf_r>:
 8009a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a64:	461d      	mov	r5, r3
 8009a66:	898b      	ldrh	r3, [r1, #12]
 8009a68:	061f      	lsls	r7, r3, #24
 8009a6a:	b09d      	sub	sp, #116	; 0x74
 8009a6c:	4680      	mov	r8, r0
 8009a6e:	460c      	mov	r4, r1
 8009a70:	4616      	mov	r6, r2
 8009a72:	d50f      	bpl.n	8009a94 <_svfiprintf_r+0x34>
 8009a74:	690b      	ldr	r3, [r1, #16]
 8009a76:	b96b      	cbnz	r3, 8009a94 <_svfiprintf_r+0x34>
 8009a78:	2140      	movs	r1, #64	; 0x40
 8009a7a:	f000 fabf 	bl	8009ffc <_malloc_r>
 8009a7e:	6020      	str	r0, [r4, #0]
 8009a80:	6120      	str	r0, [r4, #16]
 8009a82:	b928      	cbnz	r0, 8009a90 <_svfiprintf_r+0x30>
 8009a84:	230c      	movs	r3, #12
 8009a86:	f8c8 3000 	str.w	r3, [r8]
 8009a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a8e:	e0c8      	b.n	8009c22 <_svfiprintf_r+0x1c2>
 8009a90:	2340      	movs	r3, #64	; 0x40
 8009a92:	6163      	str	r3, [r4, #20]
 8009a94:	2300      	movs	r3, #0
 8009a96:	9309      	str	r3, [sp, #36]	; 0x24
 8009a98:	2320      	movs	r3, #32
 8009a9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a9e:	2330      	movs	r3, #48	; 0x30
 8009aa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009aa4:	9503      	str	r5, [sp, #12]
 8009aa6:	f04f 0b01 	mov.w	fp, #1
 8009aaa:	4637      	mov	r7, r6
 8009aac:	463d      	mov	r5, r7
 8009aae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009ab2:	b10b      	cbz	r3, 8009ab8 <_svfiprintf_r+0x58>
 8009ab4:	2b25      	cmp	r3, #37	; 0x25
 8009ab6:	d13e      	bne.n	8009b36 <_svfiprintf_r+0xd6>
 8009ab8:	ebb7 0a06 	subs.w	sl, r7, r6
 8009abc:	d00b      	beq.n	8009ad6 <_svfiprintf_r+0x76>
 8009abe:	4653      	mov	r3, sl
 8009ac0:	4632      	mov	r2, r6
 8009ac2:	4621      	mov	r1, r4
 8009ac4:	4640      	mov	r0, r8
 8009ac6:	f7ff ff71 	bl	80099ac <__ssputs_r>
 8009aca:	3001      	adds	r0, #1
 8009acc:	f000 80a4 	beq.w	8009c18 <_svfiprintf_r+0x1b8>
 8009ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad2:	4453      	add	r3, sl
 8009ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ad6:	783b      	ldrb	r3, [r7, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 809d 	beq.w	8009c18 <_svfiprintf_r+0x1b8>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ae8:	9304      	str	r3, [sp, #16]
 8009aea:	9307      	str	r3, [sp, #28]
 8009aec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009af0:	931a      	str	r3, [sp, #104]	; 0x68
 8009af2:	462f      	mov	r7, r5
 8009af4:	2205      	movs	r2, #5
 8009af6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009afa:	4850      	ldr	r0, [pc, #320]	; (8009c3c <_svfiprintf_r+0x1dc>)
 8009afc:	f7f6 fbc0 	bl	8000280 <memchr>
 8009b00:	9b04      	ldr	r3, [sp, #16]
 8009b02:	b9d0      	cbnz	r0, 8009b3a <_svfiprintf_r+0xda>
 8009b04:	06d9      	lsls	r1, r3, #27
 8009b06:	bf44      	itt	mi
 8009b08:	2220      	movmi	r2, #32
 8009b0a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b0e:	071a      	lsls	r2, r3, #28
 8009b10:	bf44      	itt	mi
 8009b12:	222b      	movmi	r2, #43	; 0x2b
 8009b14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b18:	782a      	ldrb	r2, [r5, #0]
 8009b1a:	2a2a      	cmp	r2, #42	; 0x2a
 8009b1c:	d015      	beq.n	8009b4a <_svfiprintf_r+0xea>
 8009b1e:	9a07      	ldr	r2, [sp, #28]
 8009b20:	462f      	mov	r7, r5
 8009b22:	2000      	movs	r0, #0
 8009b24:	250a      	movs	r5, #10
 8009b26:	4639      	mov	r1, r7
 8009b28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b2c:	3b30      	subs	r3, #48	; 0x30
 8009b2e:	2b09      	cmp	r3, #9
 8009b30:	d94d      	bls.n	8009bce <_svfiprintf_r+0x16e>
 8009b32:	b1b8      	cbz	r0, 8009b64 <_svfiprintf_r+0x104>
 8009b34:	e00f      	b.n	8009b56 <_svfiprintf_r+0xf6>
 8009b36:	462f      	mov	r7, r5
 8009b38:	e7b8      	b.n	8009aac <_svfiprintf_r+0x4c>
 8009b3a:	4a40      	ldr	r2, [pc, #256]	; (8009c3c <_svfiprintf_r+0x1dc>)
 8009b3c:	1a80      	subs	r0, r0, r2
 8009b3e:	fa0b f000 	lsl.w	r0, fp, r0
 8009b42:	4318      	orrs	r0, r3
 8009b44:	9004      	str	r0, [sp, #16]
 8009b46:	463d      	mov	r5, r7
 8009b48:	e7d3      	b.n	8009af2 <_svfiprintf_r+0x92>
 8009b4a:	9a03      	ldr	r2, [sp, #12]
 8009b4c:	1d11      	adds	r1, r2, #4
 8009b4e:	6812      	ldr	r2, [r2, #0]
 8009b50:	9103      	str	r1, [sp, #12]
 8009b52:	2a00      	cmp	r2, #0
 8009b54:	db01      	blt.n	8009b5a <_svfiprintf_r+0xfa>
 8009b56:	9207      	str	r2, [sp, #28]
 8009b58:	e004      	b.n	8009b64 <_svfiprintf_r+0x104>
 8009b5a:	4252      	negs	r2, r2
 8009b5c:	f043 0302 	orr.w	r3, r3, #2
 8009b60:	9207      	str	r2, [sp, #28]
 8009b62:	9304      	str	r3, [sp, #16]
 8009b64:	783b      	ldrb	r3, [r7, #0]
 8009b66:	2b2e      	cmp	r3, #46	; 0x2e
 8009b68:	d10c      	bne.n	8009b84 <_svfiprintf_r+0x124>
 8009b6a:	787b      	ldrb	r3, [r7, #1]
 8009b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b6e:	d133      	bne.n	8009bd8 <_svfiprintf_r+0x178>
 8009b70:	9b03      	ldr	r3, [sp, #12]
 8009b72:	1d1a      	adds	r2, r3, #4
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	9203      	str	r2, [sp, #12]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	bfb8      	it	lt
 8009b7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b80:	3702      	adds	r7, #2
 8009b82:	9305      	str	r3, [sp, #20]
 8009b84:	4d2e      	ldr	r5, [pc, #184]	; (8009c40 <_svfiprintf_r+0x1e0>)
 8009b86:	7839      	ldrb	r1, [r7, #0]
 8009b88:	2203      	movs	r2, #3
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	f7f6 fb78 	bl	8000280 <memchr>
 8009b90:	b138      	cbz	r0, 8009ba2 <_svfiprintf_r+0x142>
 8009b92:	2340      	movs	r3, #64	; 0x40
 8009b94:	1b40      	subs	r0, r0, r5
 8009b96:	fa03 f000 	lsl.w	r0, r3, r0
 8009b9a:	9b04      	ldr	r3, [sp, #16]
 8009b9c:	4303      	orrs	r3, r0
 8009b9e:	3701      	adds	r7, #1
 8009ba0:	9304      	str	r3, [sp, #16]
 8009ba2:	7839      	ldrb	r1, [r7, #0]
 8009ba4:	4827      	ldr	r0, [pc, #156]	; (8009c44 <_svfiprintf_r+0x1e4>)
 8009ba6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009baa:	2206      	movs	r2, #6
 8009bac:	1c7e      	adds	r6, r7, #1
 8009bae:	f7f6 fb67 	bl	8000280 <memchr>
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d038      	beq.n	8009c28 <_svfiprintf_r+0x1c8>
 8009bb6:	4b24      	ldr	r3, [pc, #144]	; (8009c48 <_svfiprintf_r+0x1e8>)
 8009bb8:	bb13      	cbnz	r3, 8009c00 <_svfiprintf_r+0x1a0>
 8009bba:	9b03      	ldr	r3, [sp, #12]
 8009bbc:	3307      	adds	r3, #7
 8009bbe:	f023 0307 	bic.w	r3, r3, #7
 8009bc2:	3308      	adds	r3, #8
 8009bc4:	9303      	str	r3, [sp, #12]
 8009bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc8:	444b      	add	r3, r9
 8009bca:	9309      	str	r3, [sp, #36]	; 0x24
 8009bcc:	e76d      	b.n	8009aaa <_svfiprintf_r+0x4a>
 8009bce:	fb05 3202 	mla	r2, r5, r2, r3
 8009bd2:	2001      	movs	r0, #1
 8009bd4:	460f      	mov	r7, r1
 8009bd6:	e7a6      	b.n	8009b26 <_svfiprintf_r+0xc6>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	3701      	adds	r7, #1
 8009bdc:	9305      	str	r3, [sp, #20]
 8009bde:	4619      	mov	r1, r3
 8009be0:	250a      	movs	r5, #10
 8009be2:	4638      	mov	r0, r7
 8009be4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009be8:	3a30      	subs	r2, #48	; 0x30
 8009bea:	2a09      	cmp	r2, #9
 8009bec:	d903      	bls.n	8009bf6 <_svfiprintf_r+0x196>
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d0c8      	beq.n	8009b84 <_svfiprintf_r+0x124>
 8009bf2:	9105      	str	r1, [sp, #20]
 8009bf4:	e7c6      	b.n	8009b84 <_svfiprintf_r+0x124>
 8009bf6:	fb05 2101 	mla	r1, r5, r1, r2
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	4607      	mov	r7, r0
 8009bfe:	e7f0      	b.n	8009be2 <_svfiprintf_r+0x182>
 8009c00:	ab03      	add	r3, sp, #12
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	4622      	mov	r2, r4
 8009c06:	4b11      	ldr	r3, [pc, #68]	; (8009c4c <_svfiprintf_r+0x1ec>)
 8009c08:	a904      	add	r1, sp, #16
 8009c0a:	4640      	mov	r0, r8
 8009c0c:	f3af 8000 	nop.w
 8009c10:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009c14:	4681      	mov	r9, r0
 8009c16:	d1d6      	bne.n	8009bc6 <_svfiprintf_r+0x166>
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	065b      	lsls	r3, r3, #25
 8009c1c:	f53f af35 	bmi.w	8009a8a <_svfiprintf_r+0x2a>
 8009c20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c22:	b01d      	add	sp, #116	; 0x74
 8009c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c28:	ab03      	add	r3, sp, #12
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	4622      	mov	r2, r4
 8009c2e:	4b07      	ldr	r3, [pc, #28]	; (8009c4c <_svfiprintf_r+0x1ec>)
 8009c30:	a904      	add	r1, sp, #16
 8009c32:	4640      	mov	r0, r8
 8009c34:	f000 f882 	bl	8009d3c <_printf_i>
 8009c38:	e7ea      	b.n	8009c10 <_svfiprintf_r+0x1b0>
 8009c3a:	bf00      	nop
 8009c3c:	0800a378 	.word	0x0800a378
 8009c40:	0800a37e 	.word	0x0800a37e
 8009c44:	0800a382 	.word	0x0800a382
 8009c48:	00000000 	.word	0x00000000
 8009c4c:	080099ad 	.word	0x080099ad

08009c50 <_printf_common>:
 8009c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c54:	4691      	mov	r9, r2
 8009c56:	461f      	mov	r7, r3
 8009c58:	688a      	ldr	r2, [r1, #8]
 8009c5a:	690b      	ldr	r3, [r1, #16]
 8009c5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c60:	4293      	cmp	r3, r2
 8009c62:	bfb8      	it	lt
 8009c64:	4613      	movlt	r3, r2
 8009c66:	f8c9 3000 	str.w	r3, [r9]
 8009c6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c6e:	4606      	mov	r6, r0
 8009c70:	460c      	mov	r4, r1
 8009c72:	b112      	cbz	r2, 8009c7a <_printf_common+0x2a>
 8009c74:	3301      	adds	r3, #1
 8009c76:	f8c9 3000 	str.w	r3, [r9]
 8009c7a:	6823      	ldr	r3, [r4, #0]
 8009c7c:	0699      	lsls	r1, r3, #26
 8009c7e:	bf42      	ittt	mi
 8009c80:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009c84:	3302      	addmi	r3, #2
 8009c86:	f8c9 3000 	strmi.w	r3, [r9]
 8009c8a:	6825      	ldr	r5, [r4, #0]
 8009c8c:	f015 0506 	ands.w	r5, r5, #6
 8009c90:	d107      	bne.n	8009ca2 <_printf_common+0x52>
 8009c92:	f104 0a19 	add.w	sl, r4, #25
 8009c96:	68e3      	ldr	r3, [r4, #12]
 8009c98:	f8d9 2000 	ldr.w	r2, [r9]
 8009c9c:	1a9b      	subs	r3, r3, r2
 8009c9e:	42ab      	cmp	r3, r5
 8009ca0:	dc28      	bgt.n	8009cf4 <_printf_common+0xa4>
 8009ca2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009ca6:	6822      	ldr	r2, [r4, #0]
 8009ca8:	3300      	adds	r3, #0
 8009caa:	bf18      	it	ne
 8009cac:	2301      	movne	r3, #1
 8009cae:	0692      	lsls	r2, r2, #26
 8009cb0:	d42d      	bmi.n	8009d0e <_printf_common+0xbe>
 8009cb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009cb6:	4639      	mov	r1, r7
 8009cb8:	4630      	mov	r0, r6
 8009cba:	47c0      	blx	r8
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	d020      	beq.n	8009d02 <_printf_common+0xb2>
 8009cc0:	6823      	ldr	r3, [r4, #0]
 8009cc2:	68e5      	ldr	r5, [r4, #12]
 8009cc4:	f8d9 2000 	ldr.w	r2, [r9]
 8009cc8:	f003 0306 	and.w	r3, r3, #6
 8009ccc:	2b04      	cmp	r3, #4
 8009cce:	bf08      	it	eq
 8009cd0:	1aad      	subeq	r5, r5, r2
 8009cd2:	68a3      	ldr	r3, [r4, #8]
 8009cd4:	6922      	ldr	r2, [r4, #16]
 8009cd6:	bf0c      	ite	eq
 8009cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cdc:	2500      	movne	r5, #0
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	bfc4      	itt	gt
 8009ce2:	1a9b      	subgt	r3, r3, r2
 8009ce4:	18ed      	addgt	r5, r5, r3
 8009ce6:	f04f 0900 	mov.w	r9, #0
 8009cea:	341a      	adds	r4, #26
 8009cec:	454d      	cmp	r5, r9
 8009cee:	d11a      	bne.n	8009d26 <_printf_common+0xd6>
 8009cf0:	2000      	movs	r0, #0
 8009cf2:	e008      	b.n	8009d06 <_printf_common+0xb6>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	4652      	mov	r2, sl
 8009cf8:	4639      	mov	r1, r7
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	47c0      	blx	r8
 8009cfe:	3001      	adds	r0, #1
 8009d00:	d103      	bne.n	8009d0a <_printf_common+0xba>
 8009d02:	f04f 30ff 	mov.w	r0, #4294967295
 8009d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d0a:	3501      	adds	r5, #1
 8009d0c:	e7c3      	b.n	8009c96 <_printf_common+0x46>
 8009d0e:	18e1      	adds	r1, r4, r3
 8009d10:	1c5a      	adds	r2, r3, #1
 8009d12:	2030      	movs	r0, #48	; 0x30
 8009d14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d18:	4422      	add	r2, r4
 8009d1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d22:	3302      	adds	r3, #2
 8009d24:	e7c5      	b.n	8009cb2 <_printf_common+0x62>
 8009d26:	2301      	movs	r3, #1
 8009d28:	4622      	mov	r2, r4
 8009d2a:	4639      	mov	r1, r7
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	47c0      	blx	r8
 8009d30:	3001      	adds	r0, #1
 8009d32:	d0e6      	beq.n	8009d02 <_printf_common+0xb2>
 8009d34:	f109 0901 	add.w	r9, r9, #1
 8009d38:	e7d8      	b.n	8009cec <_printf_common+0x9c>
	...

08009d3c <_printf_i>:
 8009d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d40:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009d44:	460c      	mov	r4, r1
 8009d46:	7e09      	ldrb	r1, [r1, #24]
 8009d48:	b085      	sub	sp, #20
 8009d4a:	296e      	cmp	r1, #110	; 0x6e
 8009d4c:	4617      	mov	r7, r2
 8009d4e:	4606      	mov	r6, r0
 8009d50:	4698      	mov	r8, r3
 8009d52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d54:	f000 80b3 	beq.w	8009ebe <_printf_i+0x182>
 8009d58:	d822      	bhi.n	8009da0 <_printf_i+0x64>
 8009d5a:	2963      	cmp	r1, #99	; 0x63
 8009d5c:	d036      	beq.n	8009dcc <_printf_i+0x90>
 8009d5e:	d80a      	bhi.n	8009d76 <_printf_i+0x3a>
 8009d60:	2900      	cmp	r1, #0
 8009d62:	f000 80b9 	beq.w	8009ed8 <_printf_i+0x19c>
 8009d66:	2958      	cmp	r1, #88	; 0x58
 8009d68:	f000 8083 	beq.w	8009e72 <_printf_i+0x136>
 8009d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d70:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009d74:	e032      	b.n	8009ddc <_printf_i+0xa0>
 8009d76:	2964      	cmp	r1, #100	; 0x64
 8009d78:	d001      	beq.n	8009d7e <_printf_i+0x42>
 8009d7a:	2969      	cmp	r1, #105	; 0x69
 8009d7c:	d1f6      	bne.n	8009d6c <_printf_i+0x30>
 8009d7e:	6820      	ldr	r0, [r4, #0]
 8009d80:	6813      	ldr	r3, [r2, #0]
 8009d82:	0605      	lsls	r5, r0, #24
 8009d84:	f103 0104 	add.w	r1, r3, #4
 8009d88:	d52a      	bpl.n	8009de0 <_printf_i+0xa4>
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	6011      	str	r1, [r2, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	da03      	bge.n	8009d9a <_printf_i+0x5e>
 8009d92:	222d      	movs	r2, #45	; 0x2d
 8009d94:	425b      	negs	r3, r3
 8009d96:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009d9a:	486f      	ldr	r0, [pc, #444]	; (8009f58 <_printf_i+0x21c>)
 8009d9c:	220a      	movs	r2, #10
 8009d9e:	e039      	b.n	8009e14 <_printf_i+0xd8>
 8009da0:	2973      	cmp	r1, #115	; 0x73
 8009da2:	f000 809d 	beq.w	8009ee0 <_printf_i+0x1a4>
 8009da6:	d808      	bhi.n	8009dba <_printf_i+0x7e>
 8009da8:	296f      	cmp	r1, #111	; 0x6f
 8009daa:	d020      	beq.n	8009dee <_printf_i+0xb2>
 8009dac:	2970      	cmp	r1, #112	; 0x70
 8009dae:	d1dd      	bne.n	8009d6c <_printf_i+0x30>
 8009db0:	6823      	ldr	r3, [r4, #0]
 8009db2:	f043 0320 	orr.w	r3, r3, #32
 8009db6:	6023      	str	r3, [r4, #0]
 8009db8:	e003      	b.n	8009dc2 <_printf_i+0x86>
 8009dba:	2975      	cmp	r1, #117	; 0x75
 8009dbc:	d017      	beq.n	8009dee <_printf_i+0xb2>
 8009dbe:	2978      	cmp	r1, #120	; 0x78
 8009dc0:	d1d4      	bne.n	8009d6c <_printf_i+0x30>
 8009dc2:	2378      	movs	r3, #120	; 0x78
 8009dc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009dc8:	4864      	ldr	r0, [pc, #400]	; (8009f5c <_printf_i+0x220>)
 8009dca:	e055      	b.n	8009e78 <_printf_i+0x13c>
 8009dcc:	6813      	ldr	r3, [r2, #0]
 8009dce:	1d19      	adds	r1, r3, #4
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	6011      	str	r1, [r2, #0]
 8009dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e08c      	b.n	8009efa <_printf_i+0x1be>
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	6011      	str	r1, [r2, #0]
 8009de4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009de8:	bf18      	it	ne
 8009dea:	b21b      	sxthne	r3, r3
 8009dec:	e7cf      	b.n	8009d8e <_printf_i+0x52>
 8009dee:	6813      	ldr	r3, [r2, #0]
 8009df0:	6825      	ldr	r5, [r4, #0]
 8009df2:	1d18      	adds	r0, r3, #4
 8009df4:	6010      	str	r0, [r2, #0]
 8009df6:	0628      	lsls	r0, r5, #24
 8009df8:	d501      	bpl.n	8009dfe <_printf_i+0xc2>
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	e002      	b.n	8009e04 <_printf_i+0xc8>
 8009dfe:	0668      	lsls	r0, r5, #25
 8009e00:	d5fb      	bpl.n	8009dfa <_printf_i+0xbe>
 8009e02:	881b      	ldrh	r3, [r3, #0]
 8009e04:	4854      	ldr	r0, [pc, #336]	; (8009f58 <_printf_i+0x21c>)
 8009e06:	296f      	cmp	r1, #111	; 0x6f
 8009e08:	bf14      	ite	ne
 8009e0a:	220a      	movne	r2, #10
 8009e0c:	2208      	moveq	r2, #8
 8009e0e:	2100      	movs	r1, #0
 8009e10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e14:	6865      	ldr	r5, [r4, #4]
 8009e16:	60a5      	str	r5, [r4, #8]
 8009e18:	2d00      	cmp	r5, #0
 8009e1a:	f2c0 8095 	blt.w	8009f48 <_printf_i+0x20c>
 8009e1e:	6821      	ldr	r1, [r4, #0]
 8009e20:	f021 0104 	bic.w	r1, r1, #4
 8009e24:	6021      	str	r1, [r4, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d13d      	bne.n	8009ea6 <_printf_i+0x16a>
 8009e2a:	2d00      	cmp	r5, #0
 8009e2c:	f040 808e 	bne.w	8009f4c <_printf_i+0x210>
 8009e30:	4665      	mov	r5, ip
 8009e32:	2a08      	cmp	r2, #8
 8009e34:	d10b      	bne.n	8009e4e <_printf_i+0x112>
 8009e36:	6823      	ldr	r3, [r4, #0]
 8009e38:	07db      	lsls	r3, r3, #31
 8009e3a:	d508      	bpl.n	8009e4e <_printf_i+0x112>
 8009e3c:	6923      	ldr	r3, [r4, #16]
 8009e3e:	6862      	ldr	r2, [r4, #4]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	bfde      	ittt	le
 8009e44:	2330      	movle	r3, #48	; 0x30
 8009e46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e4e:	ebac 0305 	sub.w	r3, ip, r5
 8009e52:	6123      	str	r3, [r4, #16]
 8009e54:	f8cd 8000 	str.w	r8, [sp]
 8009e58:	463b      	mov	r3, r7
 8009e5a:	aa03      	add	r2, sp, #12
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	4630      	mov	r0, r6
 8009e60:	f7ff fef6 	bl	8009c50 <_printf_common>
 8009e64:	3001      	adds	r0, #1
 8009e66:	d14d      	bne.n	8009f04 <_printf_i+0x1c8>
 8009e68:	f04f 30ff 	mov.w	r0, #4294967295
 8009e6c:	b005      	add	sp, #20
 8009e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e72:	4839      	ldr	r0, [pc, #228]	; (8009f58 <_printf_i+0x21c>)
 8009e74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009e78:	6813      	ldr	r3, [r2, #0]
 8009e7a:	6821      	ldr	r1, [r4, #0]
 8009e7c:	1d1d      	adds	r5, r3, #4
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	6015      	str	r5, [r2, #0]
 8009e82:	060a      	lsls	r2, r1, #24
 8009e84:	d50b      	bpl.n	8009e9e <_printf_i+0x162>
 8009e86:	07ca      	lsls	r2, r1, #31
 8009e88:	bf44      	itt	mi
 8009e8a:	f041 0120 	orrmi.w	r1, r1, #32
 8009e8e:	6021      	strmi	r1, [r4, #0]
 8009e90:	b91b      	cbnz	r3, 8009e9a <_printf_i+0x15e>
 8009e92:	6822      	ldr	r2, [r4, #0]
 8009e94:	f022 0220 	bic.w	r2, r2, #32
 8009e98:	6022      	str	r2, [r4, #0]
 8009e9a:	2210      	movs	r2, #16
 8009e9c:	e7b7      	b.n	8009e0e <_printf_i+0xd2>
 8009e9e:	064d      	lsls	r5, r1, #25
 8009ea0:	bf48      	it	mi
 8009ea2:	b29b      	uxthmi	r3, r3
 8009ea4:	e7ef      	b.n	8009e86 <_printf_i+0x14a>
 8009ea6:	4665      	mov	r5, ip
 8009ea8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009eac:	fb02 3311 	mls	r3, r2, r1, r3
 8009eb0:	5cc3      	ldrb	r3, [r0, r3]
 8009eb2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	2900      	cmp	r1, #0
 8009eba:	d1f5      	bne.n	8009ea8 <_printf_i+0x16c>
 8009ebc:	e7b9      	b.n	8009e32 <_printf_i+0xf6>
 8009ebe:	6813      	ldr	r3, [r2, #0]
 8009ec0:	6825      	ldr	r5, [r4, #0]
 8009ec2:	6961      	ldr	r1, [r4, #20]
 8009ec4:	1d18      	adds	r0, r3, #4
 8009ec6:	6010      	str	r0, [r2, #0]
 8009ec8:	0628      	lsls	r0, r5, #24
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	d501      	bpl.n	8009ed2 <_printf_i+0x196>
 8009ece:	6019      	str	r1, [r3, #0]
 8009ed0:	e002      	b.n	8009ed8 <_printf_i+0x19c>
 8009ed2:	066a      	lsls	r2, r5, #25
 8009ed4:	d5fb      	bpl.n	8009ece <_printf_i+0x192>
 8009ed6:	8019      	strh	r1, [r3, #0]
 8009ed8:	2300      	movs	r3, #0
 8009eda:	6123      	str	r3, [r4, #16]
 8009edc:	4665      	mov	r5, ip
 8009ede:	e7b9      	b.n	8009e54 <_printf_i+0x118>
 8009ee0:	6813      	ldr	r3, [r2, #0]
 8009ee2:	1d19      	adds	r1, r3, #4
 8009ee4:	6011      	str	r1, [r2, #0]
 8009ee6:	681d      	ldr	r5, [r3, #0]
 8009ee8:	6862      	ldr	r2, [r4, #4]
 8009eea:	2100      	movs	r1, #0
 8009eec:	4628      	mov	r0, r5
 8009eee:	f7f6 f9c7 	bl	8000280 <memchr>
 8009ef2:	b108      	cbz	r0, 8009ef8 <_printf_i+0x1bc>
 8009ef4:	1b40      	subs	r0, r0, r5
 8009ef6:	6060      	str	r0, [r4, #4]
 8009ef8:	6863      	ldr	r3, [r4, #4]
 8009efa:	6123      	str	r3, [r4, #16]
 8009efc:	2300      	movs	r3, #0
 8009efe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f02:	e7a7      	b.n	8009e54 <_printf_i+0x118>
 8009f04:	6923      	ldr	r3, [r4, #16]
 8009f06:	462a      	mov	r2, r5
 8009f08:	4639      	mov	r1, r7
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	47c0      	blx	r8
 8009f0e:	3001      	adds	r0, #1
 8009f10:	d0aa      	beq.n	8009e68 <_printf_i+0x12c>
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	079b      	lsls	r3, r3, #30
 8009f16:	d413      	bmi.n	8009f40 <_printf_i+0x204>
 8009f18:	68e0      	ldr	r0, [r4, #12]
 8009f1a:	9b03      	ldr	r3, [sp, #12]
 8009f1c:	4298      	cmp	r0, r3
 8009f1e:	bfb8      	it	lt
 8009f20:	4618      	movlt	r0, r3
 8009f22:	e7a3      	b.n	8009e6c <_printf_i+0x130>
 8009f24:	2301      	movs	r3, #1
 8009f26:	464a      	mov	r2, r9
 8009f28:	4639      	mov	r1, r7
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	47c0      	blx	r8
 8009f2e:	3001      	adds	r0, #1
 8009f30:	d09a      	beq.n	8009e68 <_printf_i+0x12c>
 8009f32:	3501      	adds	r5, #1
 8009f34:	68e3      	ldr	r3, [r4, #12]
 8009f36:	9a03      	ldr	r2, [sp, #12]
 8009f38:	1a9b      	subs	r3, r3, r2
 8009f3a:	42ab      	cmp	r3, r5
 8009f3c:	dcf2      	bgt.n	8009f24 <_printf_i+0x1e8>
 8009f3e:	e7eb      	b.n	8009f18 <_printf_i+0x1dc>
 8009f40:	2500      	movs	r5, #0
 8009f42:	f104 0919 	add.w	r9, r4, #25
 8009f46:	e7f5      	b.n	8009f34 <_printf_i+0x1f8>
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d1ac      	bne.n	8009ea6 <_printf_i+0x16a>
 8009f4c:	7803      	ldrb	r3, [r0, #0]
 8009f4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f56:	e76c      	b.n	8009e32 <_printf_i+0xf6>
 8009f58:	0800a389 	.word	0x0800a389
 8009f5c:	0800a39a 	.word	0x0800a39a

08009f60 <_free_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	4605      	mov	r5, r0
 8009f64:	2900      	cmp	r1, #0
 8009f66:	d045      	beq.n	8009ff4 <_free_r+0x94>
 8009f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f6c:	1f0c      	subs	r4, r1, #4
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	bfb8      	it	lt
 8009f72:	18e4      	addlt	r4, r4, r3
 8009f74:	f000 f8d2 	bl	800a11c <__malloc_lock>
 8009f78:	4a1f      	ldr	r2, [pc, #124]	; (8009ff8 <_free_r+0x98>)
 8009f7a:	6813      	ldr	r3, [r2, #0]
 8009f7c:	4610      	mov	r0, r2
 8009f7e:	b933      	cbnz	r3, 8009f8e <_free_r+0x2e>
 8009f80:	6063      	str	r3, [r4, #4]
 8009f82:	6014      	str	r4, [r2, #0]
 8009f84:	4628      	mov	r0, r5
 8009f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f8a:	f000 b8c8 	b.w	800a11e <__malloc_unlock>
 8009f8e:	42a3      	cmp	r3, r4
 8009f90:	d90c      	bls.n	8009fac <_free_r+0x4c>
 8009f92:	6821      	ldr	r1, [r4, #0]
 8009f94:	1862      	adds	r2, r4, r1
 8009f96:	4293      	cmp	r3, r2
 8009f98:	bf04      	itt	eq
 8009f9a:	681a      	ldreq	r2, [r3, #0]
 8009f9c:	685b      	ldreq	r3, [r3, #4]
 8009f9e:	6063      	str	r3, [r4, #4]
 8009fa0:	bf04      	itt	eq
 8009fa2:	1852      	addeq	r2, r2, r1
 8009fa4:	6022      	streq	r2, [r4, #0]
 8009fa6:	6004      	str	r4, [r0, #0]
 8009fa8:	e7ec      	b.n	8009f84 <_free_r+0x24>
 8009faa:	4613      	mov	r3, r2
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	b10a      	cbz	r2, 8009fb4 <_free_r+0x54>
 8009fb0:	42a2      	cmp	r2, r4
 8009fb2:	d9fa      	bls.n	8009faa <_free_r+0x4a>
 8009fb4:	6819      	ldr	r1, [r3, #0]
 8009fb6:	1858      	adds	r0, r3, r1
 8009fb8:	42a0      	cmp	r0, r4
 8009fba:	d10b      	bne.n	8009fd4 <_free_r+0x74>
 8009fbc:	6820      	ldr	r0, [r4, #0]
 8009fbe:	4401      	add	r1, r0
 8009fc0:	1858      	adds	r0, r3, r1
 8009fc2:	4282      	cmp	r2, r0
 8009fc4:	6019      	str	r1, [r3, #0]
 8009fc6:	d1dd      	bne.n	8009f84 <_free_r+0x24>
 8009fc8:	6810      	ldr	r0, [r2, #0]
 8009fca:	6852      	ldr	r2, [r2, #4]
 8009fcc:	605a      	str	r2, [r3, #4]
 8009fce:	4401      	add	r1, r0
 8009fd0:	6019      	str	r1, [r3, #0]
 8009fd2:	e7d7      	b.n	8009f84 <_free_r+0x24>
 8009fd4:	d902      	bls.n	8009fdc <_free_r+0x7c>
 8009fd6:	230c      	movs	r3, #12
 8009fd8:	602b      	str	r3, [r5, #0]
 8009fda:	e7d3      	b.n	8009f84 <_free_r+0x24>
 8009fdc:	6820      	ldr	r0, [r4, #0]
 8009fde:	1821      	adds	r1, r4, r0
 8009fe0:	428a      	cmp	r2, r1
 8009fe2:	bf04      	itt	eq
 8009fe4:	6811      	ldreq	r1, [r2, #0]
 8009fe6:	6852      	ldreq	r2, [r2, #4]
 8009fe8:	6062      	str	r2, [r4, #4]
 8009fea:	bf04      	itt	eq
 8009fec:	1809      	addeq	r1, r1, r0
 8009fee:	6021      	streq	r1, [r4, #0]
 8009ff0:	605c      	str	r4, [r3, #4]
 8009ff2:	e7c7      	b.n	8009f84 <_free_r+0x24>
 8009ff4:	bd38      	pop	{r3, r4, r5, pc}
 8009ff6:	bf00      	nop
 8009ff8:	200054a4 	.word	0x200054a4

08009ffc <_malloc_r>:
 8009ffc:	b570      	push	{r4, r5, r6, lr}
 8009ffe:	1ccd      	adds	r5, r1, #3
 800a000:	f025 0503 	bic.w	r5, r5, #3
 800a004:	3508      	adds	r5, #8
 800a006:	2d0c      	cmp	r5, #12
 800a008:	bf38      	it	cc
 800a00a:	250c      	movcc	r5, #12
 800a00c:	2d00      	cmp	r5, #0
 800a00e:	4606      	mov	r6, r0
 800a010:	db01      	blt.n	800a016 <_malloc_r+0x1a>
 800a012:	42a9      	cmp	r1, r5
 800a014:	d903      	bls.n	800a01e <_malloc_r+0x22>
 800a016:	230c      	movs	r3, #12
 800a018:	6033      	str	r3, [r6, #0]
 800a01a:	2000      	movs	r0, #0
 800a01c:	bd70      	pop	{r4, r5, r6, pc}
 800a01e:	f000 f87d 	bl	800a11c <__malloc_lock>
 800a022:	4a21      	ldr	r2, [pc, #132]	; (800a0a8 <_malloc_r+0xac>)
 800a024:	6814      	ldr	r4, [r2, #0]
 800a026:	4621      	mov	r1, r4
 800a028:	b991      	cbnz	r1, 800a050 <_malloc_r+0x54>
 800a02a:	4c20      	ldr	r4, [pc, #128]	; (800a0ac <_malloc_r+0xb0>)
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	b91b      	cbnz	r3, 800a038 <_malloc_r+0x3c>
 800a030:	4630      	mov	r0, r6
 800a032:	f000 f863 	bl	800a0fc <_sbrk_r>
 800a036:	6020      	str	r0, [r4, #0]
 800a038:	4629      	mov	r1, r5
 800a03a:	4630      	mov	r0, r6
 800a03c:	f000 f85e 	bl	800a0fc <_sbrk_r>
 800a040:	1c43      	adds	r3, r0, #1
 800a042:	d124      	bne.n	800a08e <_malloc_r+0x92>
 800a044:	230c      	movs	r3, #12
 800a046:	6033      	str	r3, [r6, #0]
 800a048:	4630      	mov	r0, r6
 800a04a:	f000 f868 	bl	800a11e <__malloc_unlock>
 800a04e:	e7e4      	b.n	800a01a <_malloc_r+0x1e>
 800a050:	680b      	ldr	r3, [r1, #0]
 800a052:	1b5b      	subs	r3, r3, r5
 800a054:	d418      	bmi.n	800a088 <_malloc_r+0x8c>
 800a056:	2b0b      	cmp	r3, #11
 800a058:	d90f      	bls.n	800a07a <_malloc_r+0x7e>
 800a05a:	600b      	str	r3, [r1, #0]
 800a05c:	50cd      	str	r5, [r1, r3]
 800a05e:	18cc      	adds	r4, r1, r3
 800a060:	4630      	mov	r0, r6
 800a062:	f000 f85c 	bl	800a11e <__malloc_unlock>
 800a066:	f104 000b 	add.w	r0, r4, #11
 800a06a:	1d23      	adds	r3, r4, #4
 800a06c:	f020 0007 	bic.w	r0, r0, #7
 800a070:	1ac3      	subs	r3, r0, r3
 800a072:	d0d3      	beq.n	800a01c <_malloc_r+0x20>
 800a074:	425a      	negs	r2, r3
 800a076:	50e2      	str	r2, [r4, r3]
 800a078:	e7d0      	b.n	800a01c <_malloc_r+0x20>
 800a07a:	428c      	cmp	r4, r1
 800a07c:	684b      	ldr	r3, [r1, #4]
 800a07e:	bf16      	itet	ne
 800a080:	6063      	strne	r3, [r4, #4]
 800a082:	6013      	streq	r3, [r2, #0]
 800a084:	460c      	movne	r4, r1
 800a086:	e7eb      	b.n	800a060 <_malloc_r+0x64>
 800a088:	460c      	mov	r4, r1
 800a08a:	6849      	ldr	r1, [r1, #4]
 800a08c:	e7cc      	b.n	800a028 <_malloc_r+0x2c>
 800a08e:	1cc4      	adds	r4, r0, #3
 800a090:	f024 0403 	bic.w	r4, r4, #3
 800a094:	42a0      	cmp	r0, r4
 800a096:	d005      	beq.n	800a0a4 <_malloc_r+0xa8>
 800a098:	1a21      	subs	r1, r4, r0
 800a09a:	4630      	mov	r0, r6
 800a09c:	f000 f82e 	bl	800a0fc <_sbrk_r>
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	d0cf      	beq.n	800a044 <_malloc_r+0x48>
 800a0a4:	6025      	str	r5, [r4, #0]
 800a0a6:	e7db      	b.n	800a060 <_malloc_r+0x64>
 800a0a8:	200054a4 	.word	0x200054a4
 800a0ac:	200054a8 	.word	0x200054a8

0800a0b0 <_realloc_r>:
 800a0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b2:	4607      	mov	r7, r0
 800a0b4:	4614      	mov	r4, r2
 800a0b6:	460e      	mov	r6, r1
 800a0b8:	b921      	cbnz	r1, 800a0c4 <_realloc_r+0x14>
 800a0ba:	4611      	mov	r1, r2
 800a0bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a0c0:	f7ff bf9c 	b.w	8009ffc <_malloc_r>
 800a0c4:	b922      	cbnz	r2, 800a0d0 <_realloc_r+0x20>
 800a0c6:	f7ff ff4b 	bl	8009f60 <_free_r>
 800a0ca:	4625      	mov	r5, r4
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0d0:	f000 f826 	bl	800a120 <_malloc_usable_size_r>
 800a0d4:	42a0      	cmp	r0, r4
 800a0d6:	d20f      	bcs.n	800a0f8 <_realloc_r+0x48>
 800a0d8:	4621      	mov	r1, r4
 800a0da:	4638      	mov	r0, r7
 800a0dc:	f7ff ff8e 	bl	8009ffc <_malloc_r>
 800a0e0:	4605      	mov	r5, r0
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	d0f2      	beq.n	800a0cc <_realloc_r+0x1c>
 800a0e6:	4631      	mov	r1, r6
 800a0e8:	4622      	mov	r2, r4
 800a0ea:	f7ff fc12 	bl	8009912 <memcpy>
 800a0ee:	4631      	mov	r1, r6
 800a0f0:	4638      	mov	r0, r7
 800a0f2:	f7ff ff35 	bl	8009f60 <_free_r>
 800a0f6:	e7e9      	b.n	800a0cc <_realloc_r+0x1c>
 800a0f8:	4635      	mov	r5, r6
 800a0fa:	e7e7      	b.n	800a0cc <_realloc_r+0x1c>

0800a0fc <_sbrk_r>:
 800a0fc:	b538      	push	{r3, r4, r5, lr}
 800a0fe:	4c06      	ldr	r4, [pc, #24]	; (800a118 <_sbrk_r+0x1c>)
 800a100:	2300      	movs	r3, #0
 800a102:	4605      	mov	r5, r0
 800a104:	4608      	mov	r0, r1
 800a106:	6023      	str	r3, [r4, #0]
 800a108:	f7f7 f8d0 	bl	80012ac <_sbrk>
 800a10c:	1c43      	adds	r3, r0, #1
 800a10e:	d102      	bne.n	800a116 <_sbrk_r+0x1a>
 800a110:	6823      	ldr	r3, [r4, #0]
 800a112:	b103      	cbz	r3, 800a116 <_sbrk_r+0x1a>
 800a114:	602b      	str	r3, [r5, #0]
 800a116:	bd38      	pop	{r3, r4, r5, pc}
 800a118:	200057c8 	.word	0x200057c8

0800a11c <__malloc_lock>:
 800a11c:	4770      	bx	lr

0800a11e <__malloc_unlock>:
 800a11e:	4770      	bx	lr

0800a120 <_malloc_usable_size_r>:
 800a120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a124:	1f18      	subs	r0, r3, #4
 800a126:	2b00      	cmp	r3, #0
 800a128:	bfbc      	itt	lt
 800a12a:	580b      	ldrlt	r3, [r1, r0]
 800a12c:	18c0      	addlt	r0, r0, r3
 800a12e:	4770      	bx	lr

0800a130 <_init>:
 800a130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a132:	bf00      	nop
 800a134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a136:	bc08      	pop	{r3}
 800a138:	469e      	mov	lr, r3
 800a13a:	4770      	bx	lr

0800a13c <_fini>:
 800a13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a13e:	bf00      	nop
 800a140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a142:	bc08      	pop	{r3}
 800a144:	469e      	mov	lr, r3
 800a146:	4770      	bx	lr
